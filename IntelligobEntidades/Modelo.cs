#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ContextGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using Intelligob.Entidades;

namespace Intelligob.Entidades	
{
	public partial class Modelo : OpenAccessContext, IModeloUnitOfWork, IModeloExtension
	{
		private static string connectionStringName = @"ServidorConexion";
			
		private static BackendConfiguration backend = GetBackendConfiguration();
				
		private static MetadataSource metadataSource = XmlMetadataSource.FromAssemblyResource("Modelo.rlinq");
		
		public Modelo()
			:base(connectionStringName, backend, metadataSource)
		{ }
		
		public Modelo(string connection)
			:base(connection, backend, metadataSource)
		{ }
		
		public Modelo(BackendConfiguration backendConfiguration)
			:base(connectionStringName, backendConfiguration, metadataSource)
		{ }
			
		public Modelo(string connection, MetadataSource metadataSource)
			:base(connection, backend, metadataSource)
		{ }
		
		public Modelo(string connection, BackendConfiguration backendConfiguration, MetadataSource metadataSource)
			:base(connection, backendConfiguration, metadataSource)
		{ }
			
		public IQueryable<TablaClave> TablaClaves 
		{
			get
			{
				return this.GetAll<TablaClave>();
			}
		}
		
		public IQueryable<Tabla> Tablas 
		{
			get
			{
				return this.GetAll<Tabla>();
			}
		}
		
		public IQueryable<Contribuyente> Contribuyentes 
		{
			get
			{
				return this.GetAll<Contribuyente>();
			}
		}
		
		public IQueryable<Rubro> Rubros 
		{
			get
			{
				return this.GetAll<Rubro>();
			}
		}
		
		public IQueryable<RebajasRubro> RebajaRubros 
		{
			get
			{
				return this.GetAll<RebajasRubro>();
			}
		}
		
		public IQueryable<Rebaja> Rebajas 
		{
			get
			{
				return this.GetAll<Rebaja>();
			}
		}
		
		public IQueryable<ContribuyentesRebaja> ContribuyenteRebajas 
		{
			get
			{
				return this.GetAll<ContribuyentesRebaja>();
			}
		}
		
		public IQueryable<PredioTerreno> PredioTerrenos 
		{
			get
			{
				return this.GetAll<PredioTerreno>();
			}
		}
		
		public IQueryable<PredioTabla> PredioTablas 
		{
			get
			{
				return this.GetAll<PredioTabla>();
			}
		}
		
		public IQueryable<PredioPropietario> PredioPropietarios 
		{
			get
			{
				return this.GetAll<PredioPropietario>();
			}
		}
		
		public IQueryable<PredioPiso> PredioPisos 
		{
			get
			{
				return this.GetAll<PredioPiso>();
			}
		}
		
		public IQueryable<PredioFrente> PredioFrentes 
		{
			get
			{
				return this.GetAll<PredioFrente>();
			}
		}
		
		public IQueryable<PredioFoto> PredioFotos 
		{
			get
			{
				return this.GetAll<PredioFoto>();
			}
		}
		
		public IQueryable<PredioConstruccion> PredioConstrucciones 
		{
			get
			{
				return this.GetAll<PredioConstruccion>();
			}
		}
		
		public IQueryable<PredioBloque> PredioBloques 
		{
			get
			{
				return this.GetAll<PredioBloque>();
			}
		}
		
		public IQueryable<PredioBase> PredioBases 
		{
			get
			{
				return this.GetAll<PredioBase>();
			}
		}
		
		public IQueryable<Servicio> Servicios 
		{
			get
			{
				return this.GetAll<Servicio>();
			}
		}
		
		public IQueryable<Patente> Patentes 
		{
			get
			{
				return this.GetAll<Patente>();
			}
		}
		
		public IQueryable<AguaPotable> AguaPotables 
		{
			get
			{
				return this.GetAll<AguaPotable>();
			}
		}
		
		public IQueryable<AguaLectura> AguaLecturas 
		{
			get
			{
				return this.GetAll<AguaLectura>();
			}
		}
		
		public IQueryable<PatentesComponente> PatenteComponentes 
		{
			get
			{
				return this.GetAll<PatentesComponente>();
			}
		}
		
		public IQueryable<Concepto> Conceptos 
		{
			get
			{
				return this.GetAll<Concepto>();
			}
		}
		
		public IQueryable<Coeficiente> Coeficientes 
		{
			get
			{
				return this.GetAll<Coeficiente>();
			}
		}
		
		public IQueryable<CoeficienteElemento> CoeficienteElementos 
		{
			get
			{
				return this.GetAll<CoeficienteElemento>();
			}
		}
		
		public IQueryable<Supervision> Supervisiones 
		{
			get
			{
				return this.GetAll<Supervision>();
			}
		}
		
		public IQueryable<Privilegio> Privilegios 
		{
			get
			{
				return this.GetAll<Privilegio>();
			}
		}
		
		public IQueryable<Usuario> Usuarios 
		{
			get
			{
				return this.GetAll<Usuario>();
			}
		}
		
		public IQueryable<Comando> Comandos 
		{
			get
			{
				return this.GetAll<Comando>();
			}
		}
		
		public IQueryable<Funcion> Funciones 
		{
			get
			{
				return this.GetAll<Funcion>();
			}
		}
		
		public IQueryable<Autorizacion> Autorizaciones 
		{
			get
			{
				return this.GetAll<Autorizacion>();
			}
		}
		
		public IQueryable<ModuloUsuario> ModuloUsuarios 
		{
			get
			{
				return this.GetAll<ModuloUsuario>();
			}
		}
		
		public IQueryable<Seguimiento> Seguimientos 
		{
			get
			{
				return this.GetAll<Seguimiento>();
			}
		}
		
		public IQueryable<RubrosParametro> RubrosParametros 
		{
			get
			{
				return this.GetAll<RubrosParametro>();
			}
		}
		
		public IQueryable<ConceptosRubro> ConceptosRubros 
		{
			get
			{
				return this.GetAll<ConceptosRubro>();
			}
		}
		
		public IQueryable<ConceptosDocumento> ConceptosDocumentos 
		{
			get
			{
				return this.GetAll<ConceptosDocumento>();
			}
		}
		
		public IQueryable<AguaServicio> AguaServicios 
		{
			get
			{
				return this.GetAll<AguaServicio>();
			}
		}
		
		public IQueryable<PlanillaSustitucion> PlanillaSustitucions 
		{
			get
			{
				return this.GetAll<PlanillaSustitucion>();
			}
		}
		
		public IQueryable<PlanillaRubro> PlanillaRubros 
		{
			get
			{
				return this.GetAll<PlanillaRubro>();
			}
		}
		
		public IQueryable<PlanillaAtributo> PlanillaAtributos 
		{
			get
			{
				return this.GetAll<PlanillaAtributo>();
			}
		}
		
		public IQueryable<Planilla> Planillas 
		{
			get
			{
				return this.GetAll<Planilla>();
			}
		}
		
		public IQueryable<ConvenioTransaccion> ConvenioTransaccions 
		{
			get
			{
				return this.GetAll<ConvenioTransaccion>();
			}
		}
		
		public IQueryable<Convenio> Convenios 
		{
			get
			{
				return this.GetAll<Convenio>();
			}
		}
		
		public IQueryable<CobroTransaccion> CobroTransaccions 
		{
			get
			{
				return this.GetAll<CobroTransaccion>();
			}
		}
		
		public IQueryable<Cobro> Cobros 
		{
			get
			{
				return this.GetAll<Cobro>();
			}
		}
		
		public IQueryable<CobrosElemento> CobrosElementos 
		{
			get
			{
				return this.GetAll<CobrosElemento>();
			}
		}
		
		public IQueryable<CobrosRubro> CobrosRubros 
		{
			get
			{
				return this.GetAll<CobrosRubro>();
			}
		}
		
		public IQueryable<RepRecaudacionesFecha> RepRecaudacionesFechas 
		{
			get
			{
				return this.GetAll<RepRecaudacionesFecha>();
			}
		}
		
		public IQueryable<RepEmisionesSaldo> RepEmisionesSaldos 
		{
			get
			{
				return this.GetAll<RepEmisionesSaldo>();
			}
		}
		
		public IQueryable<ConceptosEmision> ConceptosEmisions 
		{
			get
			{
				return this.GetAll<ConceptosEmision>();
			}
		}
		
		public IQueryable<Modulo> Modulos 
		{
			get
			{
				return this.GetAll<Modulo>();
			}
		}
		
		public IQueryable<Reporte> Reportes 
		{
			get
			{
				return this.GetAll<Reporte>();
			}
		}
		
		public IQueryable<RepCuentaCorrienteResumen> RepCuentaCorrienteResumens 
		{
			get
			{
				return this.GetAll<RepCuentaCorrienteResumen>();
			}
		}
		
		public IQueryable<RepCuentaCorrienteDetalle> RepCuentaCorrienteDetalles 
		{
			get
			{
				return this.GetAll<RepCuentaCorrienteDetalle>();
			}
		}
		
		public IQueryable<Caja> Cajas 
		{
			get
			{
				return this.GetAll<Caja>();
			}
		}
		
		public IQueryable<CajasUsuario> CajasUsuarios 
		{
			get
			{
				return this.GetAll<CajasUsuario>();
			}
		}
		
		public IQueryable<RepPredio> RepPredios 
		{
			get
			{
				return this.GetAll<RepPredio>();
			}
		}
		
		public IQueryable<CuentaBancaria> CuentaBancarias 
		{
			get
			{
				return this.GetAll<CuentaBancaria>();
			}
		}
		
		public IQueryable<CajaElemento> CajaElementos 
		{
			get
			{
				return this.GetAll<CajaElemento>();
			}
		}
		
		public IQueryable<CajaComprobante> CajaComprobantes 
		{
			get
			{
				return this.GetAll<CajaComprobante>();
			}
		}
		
		public IQueryable<CarpetaCatastralAnual> CarpetaCatastralAnuals 
		{
			get
			{
				return this.GetAll<CarpetaCatastralAnual>();
			}
		}
		
		public IQueryable<Soporte> Soportes 
		{
			get
			{
				return this.GetAll<Soporte>();
			}
		}
		
		public IQueryable<SoporteMovimiento> SoporteMovimientos 
		{
			get
			{
				return this.GetAll<SoporteMovimiento>();
			}
		}
		
		public IQueryable<MejoraElemento> MejoraElementos 
		{
			get
			{
				return this.GetAll<MejoraElemento>();
			}
		}
		
		public IQueryable<Mejora> Mejoras 
		{
			get
			{
				return this.GetAll<Mejora>();
			}
		}
		
		public IQueryable<RepRecaudacionesCompDetalle> RepRecaudacionesCompDetalles 
		{
			get
			{
				return this.GetAll<RepRecaudacionesCompDetalle>();
			}
		}
		
		public IQueryable<CobrosNotasElemento> CobrosNotasElementos 
		{
			get
			{
				return this.GetAll<CobrosNotasElemento>();
			}
		}
		
		public IQueryable<CobrosNota> CobrosNotas 
		{
			get
			{
				return this.GetAll<CobrosNota>();
			}
		}
		
		public IQueryable<RepReversionesFecha> RepReversionesFechas 
		{
			get
			{
				return this.GetAll<RepReversionesFecha>();
			}
		}
		
		public IQueryable<ConveniosDividendo> ConveniosDividendos 
		{
			get
			{
				return this.GetAll<ConveniosDividendo>();
			}
		}
		
		public IQueryable<PlanillaMes> PlanillaMes 
		{
			get
			{
				return this.GetAll<PlanillaMes>();
			}
		}
		
		public IQueryable<Mercado> Mercados 
		{
			get
			{
				return this.GetAll<Mercado>();
			}
		}
		
		public IEnumerable<RubroCalcularConcepto> CALCULAR_CONCEPTO(int? pCONCEPTO, string pTIPOS, string pARAMETROS, ref int? rUBRO, ref string dENOMINACION, ref double? vALOR)
		{
			OAParameter parameterPCONCEPTO = new OAParameter();
			parameterPCONCEPTO.ParameterName = "PCONCEPTO";
			if(pCONCEPTO.HasValue)
			{
				parameterPCONCEPTO.Value = pCONCEPTO.Value;
			}
			else
			{
				parameterPCONCEPTO.DbType = DbType.Int32;
				parameterPCONCEPTO.Value = DBNull.Value;
			}

			OAParameter parameterPTIPOS = new OAParameter();
			parameterPTIPOS.ParameterName = "PTIPOS";
			parameterPTIPOS.Size = 100;
			if(pTIPOS != null)
			{
				parameterPTIPOS.Value = pTIPOS;
			}	
			else
			{
				parameterPTIPOS.DbType = DbType.String;
				parameterPTIPOS.Value = DBNull.Value;
			}

			OAParameter parameterPARAMETROS = new OAParameter();
			parameterPARAMETROS.ParameterName = "PARAMETROS";
			parameterPARAMETROS.Size = 100;
			if(pARAMETROS != null)
			{
				parameterPARAMETROS.Value = pARAMETROS;
			}	
			else
			{
				parameterPARAMETROS.DbType = DbType.String;
				parameterPARAMETROS.Value = DBNull.Value;
			}

			OAParameter parameterRUBRO = new OAParameter();
			parameterRUBRO.ParameterName = "RUBRO";
			parameterRUBRO.Direction = ParameterDirection.Output;
			if(rUBRO.HasValue)
			{
				parameterRUBRO.Value = rUBRO.Value;
			}
			else
			{
				parameterRUBRO.DbType = DbType.Int32;
				parameterRUBRO.Value = DBNull.Value;
			}

			OAParameter parameterDENOMINACION = new OAParameter();
			parameterDENOMINACION.ParameterName = "DENOMINACION";
			parameterDENOMINACION.Direction = ParameterDirection.Output;
			parameterDENOMINACION.Size = 100;
			if(dENOMINACION != null)
			{
				parameterDENOMINACION.Value = dENOMINACION;
			}	
			else
			{
				parameterDENOMINACION.DbType = DbType.String;
				parameterDENOMINACION.Value = DBNull.Value;
			}

			OAParameter parameterVALOR = new OAParameter();
			parameterVALOR.ParameterName = "VALOR";
			parameterVALOR.Direction = ParameterDirection.Output;
			if(vALOR.HasValue)
			{
				parameterVALOR.Value = vALOR.Value;
			}
			else
			{
				parameterVALOR.DbType = DbType.Double;
				parameterVALOR.Value = DBNull.Value;
			}

			IEnumerable<RubroCalcularConcepto> queryResult = this.ExecuteQuery<RubroCalcularConcepto>("\"CALCULAR_CONCEPTO\"", CommandType.StoredProcedure, parameterPCONCEPTO, parameterPTIPOS, parameterPARAMETROS, parameterRUBRO, parameterDENOMINACION, parameterVALOR);
		
			rUBRO = parameterRUBRO.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterRUBRO.Value;
			dENOMINACION = parameterDENOMINACION.Value == DBNull.Value 
				? default(string) 
				: (string)parameterDENOMINACION.Value;
			vALOR = parameterVALOR.Value == DBNull.Value 
				? default(double?) 
				: (double?)parameterVALOR.Value;
		
			return queryResult;
		}
		
		public String EmitirConceptoTodos(int? pCONCEPTO, ref string pERIODO)
		{
			OAParameter parameterPCONCEPTO = new OAParameter();
			parameterPCONCEPTO.ParameterName = "PCONCEPTO";
			if(pCONCEPTO.HasValue)
			{
				parameterPCONCEPTO.Value = pCONCEPTO.Value;
			}
			else
			{
				parameterPCONCEPTO.DbType = DbType.Int32;
				parameterPCONCEPTO.Value = DBNull.Value;
			}

			OAParameter parameterPERIODO = new OAParameter();
			parameterPERIODO.ParameterName = "PERIODO";
			parameterPERIODO.Direction = ParameterDirection.Output;
			parameterPERIODO.Size = 100;
			if(pERIODO != null)
			{
				parameterPERIODO.Value = pERIODO;
			}	
			else
			{
				parameterPERIODO.DbType = DbType.String;
				parameterPERIODO.Value = DBNull.Value;
			}

			String queryResult = this.ExecuteScalar<String>("\"EMITIR_CONCEPTO_TODOS\"", CommandType.StoredProcedure, parameterPCONCEPTO, parameterPERIODO);
		
			pERIODO = parameterPERIODO.Value == DBNull.Value 
				? default(string) 
				: (string)parameterPERIODO.Value;
		
			return queryResult;
		}
		
		public String ValidarConcepto(int? pCONCEPTO, string pARAMETROS, ref string rESULTADO)
		{
			OAParameter parameterPCONCEPTO = new OAParameter();
			parameterPCONCEPTO.ParameterName = "PCONCEPTO";
			if(pCONCEPTO.HasValue)
			{
				parameterPCONCEPTO.Value = pCONCEPTO.Value;
			}
			else
			{
				parameterPCONCEPTO.DbType = DbType.Int32;
				parameterPCONCEPTO.Value = DBNull.Value;
			}

			OAParameter parameterPARAMETROS = new OAParameter();
			parameterPARAMETROS.ParameterName = "PARAMETROS";
			parameterPARAMETROS.Size = 100;
			if(pARAMETROS != null)
			{
				parameterPARAMETROS.Value = pARAMETROS;
			}	
			else
			{
				parameterPARAMETROS.DbType = DbType.String;
				parameterPARAMETROS.Value = DBNull.Value;
			}

			OAParameter parameterRESULTADO = new OAParameter();
			parameterRESULTADO.ParameterName = "RESULTADO";
			parameterRESULTADO.Direction = ParameterDirection.Output;
			parameterRESULTADO.Size = 100;
			if(rESULTADO != null)
			{
				parameterRESULTADO.Value = rESULTADO;
			}	
			else
			{
				parameterRESULTADO.DbType = DbType.String;
				parameterRESULTADO.Value = DBNull.Value;
			}

			String queryResult = this.ExecuteScalar<String>("\"VALIDAR_CONCEPTO\"", CommandType.StoredProcedure, parameterPCONCEPTO, parameterPARAMETROS, parameterRESULTADO);
		
			rESULTADO = parameterRESULTADO.Value == DBNull.Value 
				? default(string) 
				: (string)parameterRESULTADO.Value;
		
			return queryResult;
		}
		
		public Int32 EMITIR_TITULO(int? pCONCEPTO, string pARAMETROS, int? pUSUARIO, string pCOMENTARIOS, ref int? iD)
		{
			OAParameter parameterPCONCEPTO = new OAParameter();
			parameterPCONCEPTO.ParameterName = "PCONCEPTO";
			if(pCONCEPTO.HasValue)
			{
				parameterPCONCEPTO.Value = pCONCEPTO.Value;
			}
			else
			{
				parameterPCONCEPTO.DbType = DbType.Int32;
				parameterPCONCEPTO.Value = DBNull.Value;
			}

			OAParameter parameterPARAMETROS = new OAParameter();
			parameterPARAMETROS.ParameterName = "PARAMETROS";
			parameterPARAMETROS.Size = 250;
			if(pARAMETROS != null)
			{
				parameterPARAMETROS.Value = pARAMETROS;
			}	
			else
			{
				parameterPARAMETROS.DbType = DbType.String;
				parameterPARAMETROS.Value = DBNull.Value;
			}

			OAParameter parameterPUSUARIO = new OAParameter();
			parameterPUSUARIO.ParameterName = "PUSUARIO";
			if(pUSUARIO.HasValue)
			{
				parameterPUSUARIO.Value = pUSUARIO.Value;
			}
			else
			{
				parameterPUSUARIO.DbType = DbType.Int32;
				parameterPUSUARIO.Value = DBNull.Value;
			}

			OAParameter parameterPCOMENTARIOS = new OAParameter();
			parameterPCOMENTARIOS.ParameterName = "PCOMENTARIOS";
			parameterPCOMENTARIOS.Size = 250;
			if(pCOMENTARIOS != null)
			{
				parameterPCOMENTARIOS.Value = pCOMENTARIOS;
			}	
			else
			{
				parameterPCOMENTARIOS.DbType = DbType.String;
				parameterPCOMENTARIOS.Value = DBNull.Value;
			}

			OAParameter parameterID = new OAParameter();
			parameterID.ParameterName = "ID";
			parameterID.Direction = ParameterDirection.Output;
			if(iD.HasValue)
			{
				parameterID.Value = iD.Value;
			}
			else
			{
				parameterID.DbType = DbType.Int32;
				parameterID.Value = DBNull.Value;
			}

			Int32 queryResult = this.ExecuteScalar<Int32>("\"EMITIR_TITULO\"", CommandType.StoredProcedure, parameterPCONCEPTO, parameterPARAMETROS, parameterPUSUARIO, parameterPCOMENTARIOS, parameterID);
		
			iD = parameterID.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterID.Value;
		
			return queryResult;
		}
		
		public IEnumerable<EmisionesSaldosItem> RepEmisionesSaldosFecha(DateTime? pFECHACORTE, ref int? id, ref int? conceptoid, ref string concepto, ref int? año, ref int? conteo, ref double? valor, ref string estado)
		{
			OAParameter parameterPFECHACORTE = new OAParameter();
			parameterPFECHACORTE.ParameterName = "PFECHA_CORTE";
			if(pFECHACORTE.HasValue)
			{
				parameterPFECHACORTE.Value = pFECHACORTE.Value;
			}
			else
			{
				parameterPFECHACORTE.DbType = DbType.DateTime;
				parameterPFECHACORTE.Value = DBNull.Value;
			}

			OAParameter parameterId = new OAParameter();
			parameterId.ParameterName = "id";
			parameterId.Direction = ParameterDirection.Output;
			if(id.HasValue)
			{
				parameterId.Value = id.Value;
			}
			else
			{
				parameterId.DbType = DbType.Int32;
				parameterId.Value = DBNull.Value;
			}

			OAParameter parameterConceptoid = new OAParameter();
			parameterConceptoid.ParameterName = "concepto_id";
			parameterConceptoid.Direction = ParameterDirection.Output;
			if(conceptoid.HasValue)
			{
				parameterConceptoid.Value = conceptoid.Value;
			}
			else
			{
				parameterConceptoid.DbType = DbType.Int32;
				parameterConceptoid.Value = DBNull.Value;
			}

			OAParameter parameterConcepto = new OAParameter();
			parameterConcepto.ParameterName = "concepto";
			parameterConcepto.Direction = ParameterDirection.Output;
			parameterConcepto.Size = 100;
			if(concepto != null)
			{
				parameterConcepto.Value = concepto;
			}	
			else
			{
				parameterConcepto.DbType = DbType.String;
				parameterConcepto.Value = DBNull.Value;
			}

			OAParameter parameterAño = new OAParameter();
			parameterAño.ParameterName = "año";
			parameterAño.Direction = ParameterDirection.Output;
			if(año.HasValue)
			{
				parameterAño.Value = año.Value;
			}
			else
			{
				parameterAño.DbType = DbType.Int32;
				parameterAño.Value = DBNull.Value;
			}

			OAParameter parameterConteo = new OAParameter();
			parameterConteo.ParameterName = "conteo";
			parameterConteo.Direction = ParameterDirection.Output;
			if(conteo.HasValue)
			{
				parameterConteo.Value = conteo.Value;
			}
			else
			{
				parameterConteo.DbType = DbType.Int32;
				parameterConteo.Value = DBNull.Value;
			}

			OAParameter parameterValor = new OAParameter();
			parameterValor.ParameterName = "valor";
			parameterValor.Direction = ParameterDirection.Output;
			if(valor.HasValue)
			{
				parameterValor.Value = valor.Value;
			}
			else
			{
				parameterValor.DbType = DbType.Double;
				parameterValor.Value = DBNull.Value;
			}

			OAParameter parameterEstado = new OAParameter();
			parameterEstado.ParameterName = "estado";
			parameterEstado.Direction = ParameterDirection.Output;
			parameterEstado.Size = 100;
			if(estado != null)
			{
				parameterEstado.Value = estado;
			}	
			else
			{
				parameterEstado.DbType = DbType.String;
				parameterEstado.Value = DBNull.Value;
			}

			IEnumerable<EmisionesSaldosItem> queryResult = this.ExecuteQuery<EmisionesSaldosItem>("\"REP_EMISIONES_SALDO_FECHA\"", CommandType.StoredProcedure, parameterPFECHACORTE, parameterId, parameterConceptoid, parameterConcepto, parameterAño, parameterConteo, parameterValor, parameterEstado);
		
			id = parameterId.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterId.Value;
			conceptoid = parameterConceptoid.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterConceptoid.Value;
			concepto = parameterConcepto.Value == DBNull.Value 
				? default(string) 
				: (string)parameterConcepto.Value;
			año = parameterAño.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterAño.Value;
			conteo = parameterConteo.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterConteo.Value;
			valor = parameterValor.Value == DBNull.Value 
				? default(double?) 
				: (double?)parameterValor.Value;
			estado = parameterEstado.Value == DBNull.Value 
				? default(string) 
				: (string)parameterEstado.Value;
		
			return queryResult;
		}
		
		public IEnumerable<CuentaCorrienteItem> RepCuentaCorrienteCorte(DateTime? pFECHACORTE, int? pCONCEPTO, ref int? id, ref int? concepto, ref string nombres, ref string codigo, ref string direccion, ref int? año, ref double? total)
		{
			OAParameter parameterPFECHACORTE = new OAParameter();
			parameterPFECHACORTE.ParameterName = "PFECHACORTE";
			if(pFECHACORTE.HasValue)
			{
				parameterPFECHACORTE.Value = pFECHACORTE.Value;
			}
			else
			{
				parameterPFECHACORTE.DbType = DbType.DateTime;
				parameterPFECHACORTE.Value = DBNull.Value;
			}

			OAParameter parameterPCONCEPTO = new OAParameter();
			parameterPCONCEPTO.ParameterName = "PCONCEPTO";
			if(pCONCEPTO.HasValue)
			{
				parameterPCONCEPTO.Value = pCONCEPTO.Value;
			}
			else
			{
				parameterPCONCEPTO.DbType = DbType.Int32;
				parameterPCONCEPTO.Value = DBNull.Value;
			}

			OAParameter parameterId = new OAParameter();
			parameterId.ParameterName = "id";
			parameterId.Direction = ParameterDirection.Output;
			if(id.HasValue)
			{
				parameterId.Value = id.Value;
			}
			else
			{
				parameterId.DbType = DbType.Int32;
				parameterId.Value = DBNull.Value;
			}

			OAParameter parameterConcepto = new OAParameter();
			parameterConcepto.ParameterName = "concepto";
			parameterConcepto.Direction = ParameterDirection.Output;
			if(concepto.HasValue)
			{
				parameterConcepto.Value = concepto.Value;
			}
			else
			{
				parameterConcepto.DbType = DbType.Int32;
				parameterConcepto.Value = DBNull.Value;
			}

			OAParameter parameterNombres = new OAParameter();
			parameterNombres.ParameterName = "nombres";
			parameterNombres.Direction = ParameterDirection.Output;
			parameterNombres.Size = 250;
			if(nombres != null)
			{
				parameterNombres.Value = nombres;
			}	
			else
			{
				parameterNombres.DbType = DbType.String;
				parameterNombres.Value = DBNull.Value;
			}

			OAParameter parameterCodigo = new OAParameter();
			parameterCodigo.ParameterName = "codigo";
			parameterCodigo.Direction = ParameterDirection.Output;
			parameterCodigo.Size = 50;
			if(codigo != null)
			{
				parameterCodigo.Value = codigo;
			}	
			else
			{
				parameterCodigo.DbType = DbType.String;
				parameterCodigo.Value = DBNull.Value;
			}

			OAParameter parameterDireccion = new OAParameter();
			parameterDireccion.ParameterName = "direccion";
			parameterDireccion.Direction = ParameterDirection.Output;
			parameterDireccion.Size = 250;
			if(direccion != null)
			{
				parameterDireccion.Value = direccion;
			}	
			else
			{
				parameterDireccion.DbType = DbType.String;
				parameterDireccion.Value = DBNull.Value;
			}

			OAParameter parameterAño = new OAParameter();
			parameterAño.ParameterName = "año";
			parameterAño.Direction = ParameterDirection.Output;
			if(año.HasValue)
			{
				parameterAño.Value = año.Value;
			}
			else
			{
				parameterAño.DbType = DbType.Int32;
				parameterAño.Value = DBNull.Value;
			}

			OAParameter parameterTotal = new OAParameter();
			parameterTotal.ParameterName = "total";
			parameterTotal.Direction = ParameterDirection.Output;
			if(total.HasValue)
			{
				parameterTotal.Value = total.Value;
			}
			else
			{
				parameterTotal.DbType = DbType.Double;
				parameterTotal.Value = DBNull.Value;
			}

			IEnumerable<CuentaCorrienteItem> queryResult = this.ExecuteQuery<CuentaCorrienteItem>("\"REP_CUENTA_CORRIENTE_CORTE\"", CommandType.StoredProcedure, parameterPFECHACORTE, parameterPCONCEPTO, parameterId, parameterConcepto, parameterNombres, parameterCodigo, parameterDireccion, parameterAño, parameterTotal);
		
			id = parameterId.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterId.Value;
			concepto = parameterConcepto.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterConcepto.Value;
			nombres = parameterNombres.Value == DBNull.Value 
				? default(string) 
				: (string)parameterNombres.Value;
			codigo = parameterCodigo.Value == DBNull.Value 
				? default(string) 
				: (string)parameterCodigo.Value;
			direccion = parameterDireccion.Value == DBNull.Value 
				? default(string) 
				: (string)parameterDireccion.Value;
			año = parameterAño.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterAño.Value;
			total = parameterTotal.Value == DBNull.Value 
				? default(double?) 
				: (double?)parameterTotal.Value;
		
			return queryResult;
		}
		
		public IEnumerable<BaseImponibleAño> BASE_IMPONIBLE_XCODIGO(int? pCONCEPTO, string pCODIGO, ref int? pID, ref string pDENOMINACION, ref int? pANIO, ref double? pVALOR)
		{
			OAParameter parameterPCONCEPTO = new OAParameter();
			parameterPCONCEPTO.ParameterName = "PCONCEPTO";
			if(pCONCEPTO.HasValue)
			{
				parameterPCONCEPTO.Value = pCONCEPTO.Value;
			}
			else
			{
				parameterPCONCEPTO.DbType = DbType.Int32;
				parameterPCONCEPTO.Value = DBNull.Value;
			}

			OAParameter parameterPCODIGO = new OAParameter();
			parameterPCODIGO.ParameterName = "PCODIGO";
			parameterPCODIGO.Size = 50;
			if(pCODIGO != null)
			{
				parameterPCODIGO.Value = pCODIGO;
			}	
			else
			{
				parameterPCODIGO.DbType = DbType.String;
				parameterPCODIGO.Value = DBNull.Value;
			}

			OAParameter parameterPID = new OAParameter();
			parameterPID.ParameterName = "PID";
			parameterPID.Direction = ParameterDirection.Output;
			if(pID.HasValue)
			{
				parameterPID.Value = pID.Value;
			}
			else
			{
				parameterPID.DbType = DbType.Int32;
				parameterPID.Value = DBNull.Value;
			}

			OAParameter parameterPDENOMINACION = new OAParameter();
			parameterPDENOMINACION.ParameterName = "PDENOMINACION";
			parameterPDENOMINACION.Direction = ParameterDirection.Output;
			parameterPDENOMINACION.Size = 100;
			if(pDENOMINACION != null)
			{
				parameterPDENOMINACION.Value = pDENOMINACION;
			}	
			else
			{
				parameterPDENOMINACION.DbType = DbType.String;
				parameterPDENOMINACION.Value = DBNull.Value;
			}

			OAParameter parameterPANIO = new OAParameter();
			parameterPANIO.ParameterName = "PANIO";
			parameterPANIO.Direction = ParameterDirection.Output;
			if(pANIO.HasValue)
			{
				parameterPANIO.Value = pANIO.Value;
			}
			else
			{
				parameterPANIO.DbType = DbType.Int32;
				parameterPANIO.Value = DBNull.Value;
			}

			OAParameter parameterPVALOR = new OAParameter();
			parameterPVALOR.ParameterName = "PVALOR";
			parameterPVALOR.Direction = ParameterDirection.Output;
			if(pVALOR.HasValue)
			{
				parameterPVALOR.Value = pVALOR.Value;
			}
			else
			{
				parameterPVALOR.DbType = DbType.Double;
				parameterPVALOR.Value = DBNull.Value;
			}

			IEnumerable<BaseImponibleAño> queryResult = this.ExecuteQuery<BaseImponibleAño>("\"BASE_IMPONIBLE_XCODIGO\"", CommandType.StoredProcedure, parameterPCONCEPTO, parameterPCODIGO, parameterPID, parameterPDENOMINACION, parameterPANIO, parameterPVALOR);
		
			pID = parameterPID.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterPID.Value;
			pDENOMINACION = parameterPDENOMINACION.Value == DBNull.Value 
				? default(string) 
				: (string)parameterPDENOMINACION.Value;
			pANIO = parameterPANIO.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterPANIO.Value;
			pVALOR = parameterPVALOR.Value == DBNull.Value 
				? default(double?) 
				: (double?)parameterPVALOR.Value;
		
			return queryResult;
		}
		
		public IEnumerable<CarpetaCatastralCorteItem> RepCarpetaCatastralCorte(int? aÑO, int? cONCEPTO, DateTime? fECHACORTE, ref int? id, ref string nombres, ref int? conceptoid, ref string codigo, ref int? año1, ref string rubro, ref double? valor, ref double? baseimponible)
		{
			OAParameter parameterAÑO = new OAParameter();
			parameterAÑO.ParameterName = "AÑO";
			if(aÑO.HasValue)
			{
				parameterAÑO.Value = aÑO.Value;
			}
			else
			{
				parameterAÑO.DbType = DbType.Int32;
				parameterAÑO.Value = DBNull.Value;
			}

			OAParameter parameterCONCEPTO = new OAParameter();
			parameterCONCEPTO.ParameterName = "CONCEPTO";
			if(cONCEPTO.HasValue)
			{
				parameterCONCEPTO.Value = cONCEPTO.Value;
			}
			else
			{
				parameterCONCEPTO.DbType = DbType.Int32;
				parameterCONCEPTO.Value = DBNull.Value;
			}

			OAParameter parameterFECHACORTE = new OAParameter();
			parameterFECHACORTE.ParameterName = "FECHA_CORTE";
			if(fECHACORTE.HasValue)
			{
				parameterFECHACORTE.Value = fECHACORTE.Value;
			}
			else
			{
				parameterFECHACORTE.DbType = DbType.DateTime;
				parameterFECHACORTE.Value = DBNull.Value;
			}

			OAParameter parameterId = new OAParameter();
			parameterId.ParameterName = "id";
			parameterId.Direction = ParameterDirection.Output;
			if(id.HasValue)
			{
				parameterId.Value = id.Value;
			}
			else
			{
				parameterId.DbType = DbType.Int32;
				parameterId.Value = DBNull.Value;
			}

			OAParameter parameterNombres = new OAParameter();
			parameterNombres.ParameterName = "nombres";
			parameterNombres.Direction = ParameterDirection.Output;
			parameterNombres.Size = 100;
			if(nombres != null)
			{
				parameterNombres.Value = nombres;
			}	
			else
			{
				parameterNombres.DbType = DbType.String;
				parameterNombres.Value = DBNull.Value;
			}

			OAParameter parameterConceptoid = new OAParameter();
			parameterConceptoid.ParameterName = "concepto_id";
			parameterConceptoid.Direction = ParameterDirection.Output;
			if(conceptoid.HasValue)
			{
				parameterConceptoid.Value = conceptoid.Value;
			}
			else
			{
				parameterConceptoid.DbType = DbType.Int32;
				parameterConceptoid.Value = DBNull.Value;
			}

			OAParameter parameterCodigo = new OAParameter();
			parameterCodigo.ParameterName = "codigo";
			parameterCodigo.Direction = ParameterDirection.Output;
			parameterCodigo.Size = 50;
			if(codigo != null)
			{
				parameterCodigo.Value = codigo;
			}	
			else
			{
				parameterCodigo.DbType = DbType.String;
				parameterCodigo.Value = DBNull.Value;
			}

			OAParameter parameterAño1 = new OAParameter();
			parameterAño1.ParameterName = "año";
			parameterAño1.Direction = ParameterDirection.Output;
			if(año1.HasValue)
			{
				parameterAño1.Value = año1.Value;
			}
			else
			{
				parameterAño1.DbType = DbType.Int32;
				parameterAño1.Value = DBNull.Value;
			}

			OAParameter parameterRubro = new OAParameter();
			parameterRubro.ParameterName = "rubro";
			parameterRubro.Direction = ParameterDirection.Output;
			parameterRubro.Size = 100;
			if(rubro != null)
			{
				parameterRubro.Value = rubro;
			}	
			else
			{
				parameterRubro.DbType = DbType.String;
				parameterRubro.Value = DBNull.Value;
			}

			OAParameter parameterValor = new OAParameter();
			parameterValor.ParameterName = "valor";
			parameterValor.Direction = ParameterDirection.Output;
			if(valor.HasValue)
			{
				parameterValor.Value = valor.Value;
			}
			else
			{
				parameterValor.DbType = DbType.Double;
				parameterValor.Value = DBNull.Value;
			}

			OAParameter parameterBaseimponible = new OAParameter();
			parameterBaseimponible.ParameterName = "base_imponible";
			parameterBaseimponible.Direction = ParameterDirection.Output;
			if(baseimponible.HasValue)
			{
				parameterBaseimponible.Value = baseimponible.Value;
			}
			else
			{
				parameterBaseimponible.DbType = DbType.Double;
				parameterBaseimponible.Value = DBNull.Value;
			}

			IEnumerable<CarpetaCatastralCorteItem> queryResult = this.ExecuteQuery<CarpetaCatastralCorteItem>("\"REP_CARPETA_CATASTRAL_CORTE\"", CommandType.StoredProcedure, parameterAÑO, parameterCONCEPTO, parameterFECHACORTE, parameterId, parameterNombres, parameterConceptoid, parameterCodigo, parameterAño1, parameterRubro, parameterValor, parameterBaseimponible);
		
			id = parameterId.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterId.Value;
			nombres = parameterNombres.Value == DBNull.Value 
				? default(string) 
				: (string)parameterNombres.Value;
			conceptoid = parameterConceptoid.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterConceptoid.Value;
			codigo = parameterCodigo.Value == DBNull.Value 
				? default(string) 
				: (string)parameterCodigo.Value;
			año1 = parameterAño1.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterAño1.Value;
			rubro = parameterRubro.Value == DBNull.Value 
				? default(string) 
				: (string)parameterRubro.Value;
			valor = parameterValor.Value == DBNull.Value 
				? default(double?) 
				: (double?)parameterValor.Value;
			baseimponible = parameterBaseimponible.Value == DBNull.Value 
				? default(double?) 
				: (double?)parameterBaseimponible.Value;
		
			return queryResult;
		}
		
		public IEnumerable<CuentaCorrienteRubrosCorteItem> RepCuentaCorrienteRubrosCorte(DateTime? pFECHACORTE, ref int? id, ref int? conceptoid, ref int? rubroid, ref double? valor, ref int? año, ref string concepto, ref string rubro)
		{
			OAParameter parameterPFECHACORTE = new OAParameter();
			parameterPFECHACORTE.ParameterName = "PFECHACORTE";
			if(pFECHACORTE.HasValue)
			{
				parameterPFECHACORTE.Value = pFECHACORTE.Value;
			}
			else
			{
				parameterPFECHACORTE.DbType = DbType.DateTime;
				parameterPFECHACORTE.Value = DBNull.Value;
			}

			OAParameter parameterId = new OAParameter();
			parameterId.ParameterName = "id";
			parameterId.Direction = ParameterDirection.Output;
			if(id.HasValue)
			{
				parameterId.Value = id.Value;
			}
			else
			{
				parameterId.DbType = DbType.Int32;
				parameterId.Value = DBNull.Value;
			}

			OAParameter parameterConceptoid = new OAParameter();
			parameterConceptoid.ParameterName = "concepto_id";
			parameterConceptoid.Direction = ParameterDirection.Output;
			if(conceptoid.HasValue)
			{
				parameterConceptoid.Value = conceptoid.Value;
			}
			else
			{
				parameterConceptoid.DbType = DbType.Int32;
				parameterConceptoid.Value = DBNull.Value;
			}

			OAParameter parameterRubroid = new OAParameter();
			parameterRubroid.ParameterName = "rubro_id";
			parameterRubroid.Direction = ParameterDirection.Output;
			if(rubroid.HasValue)
			{
				parameterRubroid.Value = rubroid.Value;
			}
			else
			{
				parameterRubroid.DbType = DbType.Int32;
				parameterRubroid.Value = DBNull.Value;
			}

			OAParameter parameterValor = new OAParameter();
			parameterValor.ParameterName = "valor";
			parameterValor.Direction = ParameterDirection.Output;
			if(valor.HasValue)
			{
				parameterValor.Value = valor.Value;
			}
			else
			{
				parameterValor.DbType = DbType.Double;
				parameterValor.Value = DBNull.Value;
			}

			OAParameter parameterAño = new OAParameter();
			parameterAño.ParameterName = "año";
			parameterAño.Direction = ParameterDirection.Output;
			if(año.HasValue)
			{
				parameterAño.Value = año.Value;
			}
			else
			{
				parameterAño.DbType = DbType.Int32;
				parameterAño.Value = DBNull.Value;
			}

			OAParameter parameterConcepto = new OAParameter();
			parameterConcepto.ParameterName = "concepto";
			parameterConcepto.Direction = ParameterDirection.Output;
			parameterConcepto.Size = 100;
			if(concepto != null)
			{
				parameterConcepto.Value = concepto;
			}	
			else
			{
				parameterConcepto.DbType = DbType.String;
				parameterConcepto.Value = DBNull.Value;
			}

			OAParameter parameterRubro = new OAParameter();
			parameterRubro.ParameterName = "rubro";
			parameterRubro.Direction = ParameterDirection.Output;
			parameterRubro.Size = 100;
			if(rubro != null)
			{
				parameterRubro.Value = rubro;
			}	
			else
			{
				parameterRubro.DbType = DbType.String;
				parameterRubro.Value = DBNull.Value;
			}

			IEnumerable<CuentaCorrienteRubrosCorteItem> queryResult = this.ExecuteQuery<CuentaCorrienteRubrosCorteItem>("\"REP_CTA_CORRIENTE_RUBROS_CORTE\"", CommandType.StoredProcedure, parameterPFECHACORTE, parameterId, parameterConceptoid, parameterRubroid, parameterValor, parameterAño, parameterConcepto, parameterRubro);
		
			id = parameterId.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterId.Value;
			conceptoid = parameterConceptoid.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterConceptoid.Value;
			rubroid = parameterRubroid.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterRubroid.Value;
			valor = parameterValor.Value == DBNull.Value 
				? default(double?) 
				: (double?)parameterValor.Value;
			año = parameterAño.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterAño.Value;
			concepto = parameterConcepto.Value == DBNull.Value 
				? default(string) 
				: (string)parameterConcepto.Value;
			rubro = parameterRubro.Value == DBNull.Value 
				? default(string) 
				: (string)parameterRubro.Value;
		
			return queryResult;
		}
		
		public IEnumerable<EmisionesSaldoRubrosItem> RepEmisionesSaldoRubrosFecha(DateTime? pFECHACORTE, ref int? id, ref int? conceptoid, ref string concepto, ref int? año, ref int? conteo, ref double? valor, ref string estado, ref int? rubroid, ref string rubro)
		{
			OAParameter parameterPFECHACORTE = new OAParameter();
			parameterPFECHACORTE.ParameterName = "PFECHA_CORTE";
			if(pFECHACORTE.HasValue)
			{
				parameterPFECHACORTE.Value = pFECHACORTE.Value;
			}
			else
			{
				parameterPFECHACORTE.DbType = DbType.DateTime;
				parameterPFECHACORTE.Value = DBNull.Value;
			}

			OAParameter parameterId = new OAParameter();
			parameterId.ParameterName = "id";
			parameterId.Direction = ParameterDirection.Output;
			if(id.HasValue)
			{
				parameterId.Value = id.Value;
			}
			else
			{
				parameterId.DbType = DbType.Int32;
				parameterId.Value = DBNull.Value;
			}

			OAParameter parameterConceptoid = new OAParameter();
			parameterConceptoid.ParameterName = "concepto_id";
			parameterConceptoid.Direction = ParameterDirection.Output;
			if(conceptoid.HasValue)
			{
				parameterConceptoid.Value = conceptoid.Value;
			}
			else
			{
				parameterConceptoid.DbType = DbType.Int32;
				parameterConceptoid.Value = DBNull.Value;
			}

			OAParameter parameterConcepto = new OAParameter();
			parameterConcepto.ParameterName = "concepto";
			parameterConcepto.Direction = ParameterDirection.Output;
			parameterConcepto.Size = 100;
			if(concepto != null)
			{
				parameterConcepto.Value = concepto;
			}	
			else
			{
				parameterConcepto.DbType = DbType.String;
				parameterConcepto.Value = DBNull.Value;
			}

			OAParameter parameterAño = new OAParameter();
			parameterAño.ParameterName = "año";
			parameterAño.Direction = ParameterDirection.Output;
			if(año.HasValue)
			{
				parameterAño.Value = año.Value;
			}
			else
			{
				parameterAño.DbType = DbType.Int32;
				parameterAño.Value = DBNull.Value;
			}

			OAParameter parameterConteo = new OAParameter();
			parameterConteo.ParameterName = "conteo";
			parameterConteo.Direction = ParameterDirection.Output;
			if(conteo.HasValue)
			{
				parameterConteo.Value = conteo.Value;
			}
			else
			{
				parameterConteo.DbType = DbType.Int32;
				parameterConteo.Value = DBNull.Value;
			}

			OAParameter parameterValor = new OAParameter();
			parameterValor.ParameterName = "valor";
			parameterValor.Direction = ParameterDirection.Output;
			if(valor.HasValue)
			{
				parameterValor.Value = valor.Value;
			}
			else
			{
				parameterValor.DbType = DbType.Double;
				parameterValor.Value = DBNull.Value;
			}

			OAParameter parameterEstado = new OAParameter();
			parameterEstado.ParameterName = "estado";
			parameterEstado.Direction = ParameterDirection.Output;
			parameterEstado.Size = 100;
			if(estado != null)
			{
				parameterEstado.Value = estado;
			}	
			else
			{
				parameterEstado.DbType = DbType.String;
				parameterEstado.Value = DBNull.Value;
			}

			OAParameter parameterRubroid = new OAParameter();
			parameterRubroid.ParameterName = "rubro_id";
			parameterRubroid.Direction = ParameterDirection.Output;
			if(rubroid.HasValue)
			{
				parameterRubroid.Value = rubroid.Value;
			}
			else
			{
				parameterRubroid.DbType = DbType.Int32;
				parameterRubroid.Value = DBNull.Value;
			}

			OAParameter parameterRubro = new OAParameter();
			parameterRubro.ParameterName = "rubro";
			parameterRubro.Direction = ParameterDirection.Output;
			parameterRubro.Size = 100;
			if(rubro != null)
			{
				parameterRubro.Value = rubro;
			}	
			else
			{
				parameterRubro.DbType = DbType.String;
				parameterRubro.Value = DBNull.Value;
			}

			IEnumerable<EmisionesSaldoRubrosItem> queryResult = this.ExecuteQuery<EmisionesSaldoRubrosItem>("\"REP_EMISAL_RUBROS_FECHA\"", CommandType.StoredProcedure, parameterPFECHACORTE, parameterId, parameterConceptoid, parameterConcepto, parameterAño, parameterConteo, parameterValor, parameterEstado, parameterRubroid, parameterRubro);
		
			id = parameterId.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterId.Value;
			conceptoid = parameterConceptoid.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterConceptoid.Value;
			concepto = parameterConcepto.Value == DBNull.Value 
				? default(string) 
				: (string)parameterConcepto.Value;
			año = parameterAño.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterAño.Value;
			conteo = parameterConteo.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterConteo.Value;
			valor = parameterValor.Value == DBNull.Value 
				? default(double?) 
				: (double?)parameterValor.Value;
			estado = parameterEstado.Value == DBNull.Value 
				? default(string) 
				: (string)parameterEstado.Value;
			rubroid = parameterRubroid.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterRubroid.Value;
			rubro = parameterRubro.Value == DBNull.Value 
				? default(string) 
				: (string)parameterRubro.Value;
		
			return queryResult;
		}
		
		public IEnumerable<RecaudacionComponentesItem> RepRecaudaComponentesFecha(DateTime? pFECHAINICIO, DateTime? pFECHACORTE, ref int? id, ref string concepto, ref int? origen, ref string rubro, ref double? valor)
		{
			OAParameter parameterPFECHAINICIO = new OAParameter();
			parameterPFECHAINICIO.ParameterName = "PFECHAINICIO";
			if(pFECHAINICIO.HasValue)
			{
				parameterPFECHAINICIO.Value = pFECHAINICIO.Value;
			}
			else
			{
				parameterPFECHAINICIO.DbType = DbType.DateTime;
				parameterPFECHAINICIO.Value = DBNull.Value;
			}

			OAParameter parameterPFECHACORTE = new OAParameter();
			parameterPFECHACORTE.ParameterName = "PFECHACORTE";
			if(pFECHACORTE.HasValue)
			{
				parameterPFECHACORTE.Value = pFECHACORTE.Value;
			}
			else
			{
				parameterPFECHACORTE.DbType = DbType.DateTime;
				parameterPFECHACORTE.Value = DBNull.Value;
			}

			OAParameter parameterId = new OAParameter();
			parameterId.ParameterName = "id";
			parameterId.Direction = ParameterDirection.Output;
			if(id.HasValue)
			{
				parameterId.Value = id.Value;
			}
			else
			{
				parameterId.DbType = DbType.Int32;
				parameterId.Value = DBNull.Value;
			}

			OAParameter parameterConcepto = new OAParameter();
			parameterConcepto.ParameterName = "concepto";
			parameterConcepto.Direction = ParameterDirection.Output;
			parameterConcepto.Size = 100;
			if(concepto != null)
			{
				parameterConcepto.Value = concepto;
			}	
			else
			{
				parameterConcepto.DbType = DbType.String;
				parameterConcepto.Value = DBNull.Value;
			}

			OAParameter parameterOrigen = new OAParameter();
			parameterOrigen.ParameterName = "origen";
			parameterOrigen.Direction = ParameterDirection.Output;
			if(origen.HasValue)
			{
				parameterOrigen.Value = origen.Value;
			}
			else
			{
				parameterOrigen.DbType = DbType.Int32;
				parameterOrigen.Value = DBNull.Value;
			}

			OAParameter parameterRubro = new OAParameter();
			parameterRubro.ParameterName = "rubro";
			parameterRubro.Direction = ParameterDirection.Output;
			parameterRubro.Size = 100;
			if(rubro != null)
			{
				parameterRubro.Value = rubro;
			}	
			else
			{
				parameterRubro.DbType = DbType.String;
				parameterRubro.Value = DBNull.Value;
			}

			OAParameter parameterValor = new OAParameter();
			parameterValor.ParameterName = "valor";
			parameterValor.Direction = ParameterDirection.Output;
			if(valor.HasValue)
			{
				parameterValor.Value = valor.Value;
			}
			else
			{
				parameterValor.DbType = DbType.Double;
				parameterValor.Value = DBNull.Value;
			}

			IEnumerable<RecaudacionComponentesItem> queryResult = this.ExecuteQuery<RecaudacionComponentesItem>("\"REP_RECAUDA_COMPONENTES_FECHA\"", CommandType.StoredProcedure, parameterPFECHAINICIO, parameterPFECHACORTE, parameterId, parameterConcepto, parameterOrigen, parameterRubro, parameterValor);
		
			id = parameterId.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterId.Value;
			concepto = parameterConcepto.Value == DBNull.Value 
				? default(string) 
				: (string)parameterConcepto.Value;
			origen = parameterOrigen.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterOrigen.Value;
			rubro = parameterRubro.Value == DBNull.Value 
				? default(string) 
				: (string)parameterRubro.Value;
			valor = parameterValor.Value == DBNull.Value 
				? default(double?) 
				: (double?)parameterValor.Value;
		
			return queryResult;
		}
		
		public IEnumerable<ResumenCatastralItem> RepResumenCatastral(int? pYEAR, ref string tipo, ref int? sector, ref int? conteo, ref double? valter, ref double? valcons, ref double? valpro, ref int? escritura, ref double? impuestos)
		{
			OAParameter parameterPYEAR = new OAParameter();
			parameterPYEAR.ParameterName = "PYEAR";
			if(pYEAR.HasValue)
			{
				parameterPYEAR.Value = pYEAR.Value;
			}
			else
			{
				parameterPYEAR.DbType = DbType.Int32;
				parameterPYEAR.Value = DBNull.Value;
			}

			OAParameter parameterTipo = new OAParameter();
			parameterTipo.ParameterName = "tipo";
			parameterTipo.Direction = ParameterDirection.Output;
			parameterTipo.Size = 50;
			if(tipo != null)
			{
				parameterTipo.Value = tipo;
			}	
			else
			{
				parameterTipo.DbType = DbType.String;
				parameterTipo.Value = DBNull.Value;
			}

			OAParameter parameterSector = new OAParameter();
			parameterSector.ParameterName = "sector";
			parameterSector.Direction = ParameterDirection.Output;
			if(sector.HasValue)
			{
				parameterSector.Value = sector.Value;
			}
			else
			{
				parameterSector.DbType = DbType.Int32;
				parameterSector.Value = DBNull.Value;
			}

			OAParameter parameterConteo = new OAParameter();
			parameterConteo.ParameterName = "conteo";
			parameterConteo.Direction = ParameterDirection.Output;
			if(conteo.HasValue)
			{
				parameterConteo.Value = conteo.Value;
			}
			else
			{
				parameterConteo.DbType = DbType.Int32;
				parameterConteo.Value = DBNull.Value;
			}

			OAParameter parameterValter = new OAParameter();
			parameterValter.ParameterName = "valter";
			parameterValter.Direction = ParameterDirection.Output;
			if(valter.HasValue)
			{
				parameterValter.Value = valter.Value;
			}
			else
			{
				parameterValter.DbType = DbType.Double;
				parameterValter.Value = DBNull.Value;
			}

			OAParameter parameterValcons = new OAParameter();
			parameterValcons.ParameterName = "valcons";
			parameterValcons.Direction = ParameterDirection.Output;
			if(valcons.HasValue)
			{
				parameterValcons.Value = valcons.Value;
			}
			else
			{
				parameterValcons.DbType = DbType.Double;
				parameterValcons.Value = DBNull.Value;
			}

			OAParameter parameterValpro = new OAParameter();
			parameterValpro.ParameterName = "valpro";
			parameterValpro.Direction = ParameterDirection.Output;
			if(valpro.HasValue)
			{
				parameterValpro.Value = valpro.Value;
			}
			else
			{
				parameterValpro.DbType = DbType.Double;
				parameterValpro.Value = DBNull.Value;
			}

			OAParameter parameterEscritura = new OAParameter();
			parameterEscritura.ParameterName = "escritura";
			parameterEscritura.Direction = ParameterDirection.Output;
			if(escritura.HasValue)
			{
				parameterEscritura.Value = escritura.Value;
			}
			else
			{
				parameterEscritura.DbType = DbType.Int32;
				parameterEscritura.Value = DBNull.Value;
			}

			OAParameter parameterImpuestos = new OAParameter();
			parameterImpuestos.ParameterName = "impuestos";
			parameterImpuestos.Direction = ParameterDirection.Output;
			if(impuestos.HasValue)
			{
				parameterImpuestos.Value = impuestos.Value;
			}
			else
			{
				parameterImpuestos.DbType = DbType.Double;
				parameterImpuestos.Value = DBNull.Value;
			}

			IEnumerable<ResumenCatastralItem> queryResult = this.ExecuteQuery<ResumenCatastralItem>("\"REP_RESUMEN_CATASTRAL\"", CommandType.StoredProcedure, parameterPYEAR, parameterTipo, parameterSector, parameterConteo, parameterValter, parameterValcons, parameterValpro, parameterEscritura, parameterImpuestos);
		
			tipo = parameterTipo.Value == DBNull.Value 
				? default(string) 
				: (string)parameterTipo.Value;
			sector = parameterSector.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterSector.Value;
			conteo = parameterConteo.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterConteo.Value;
			valter = parameterValter.Value == DBNull.Value 
				? default(double?) 
				: (double?)parameterValter.Value;
			valcons = parameterValcons.Value == DBNull.Value 
				? default(double?) 
				: (double?)parameterValcons.Value;
			valpro = parameterValpro.Value == DBNull.Value 
				? default(double?) 
				: (double?)parameterValpro.Value;
			escritura = parameterEscritura.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterEscritura.Value;
			impuestos = parameterImpuestos.Value == DBNull.Value 
				? default(double?) 
				: (double?)parameterImpuestos.Value;
		
			return queryResult;
		}
		
		public IEnumerable<ResumenEmisionesPeriodoItem> RepResumenEmisionesPeriodo(int? pANIO, DateTime? pFECHAINICIO, DateTime? pFECHACORTE, int? pPERIODO, int? pAFECTANTES, ref string concepto, ref string rubro, ref string valor, ref int? propiedad)
		{
			OAParameter parameterPANIO = new OAParameter();
			parameterPANIO.ParameterName = "PANIO";
			if(pANIO.HasValue)
			{
				parameterPANIO.Value = pANIO.Value;
			}
			else
			{
				parameterPANIO.DbType = DbType.Int32;
				parameterPANIO.Value = DBNull.Value;
			}

			OAParameter parameterPFECHAINICIO = new OAParameter();
			parameterPFECHAINICIO.ParameterName = "PFECHAINICIO";
			if(pFECHAINICIO.HasValue)
			{
				parameterPFECHAINICIO.Value = pFECHAINICIO.Value;
			}
			else
			{
				parameterPFECHAINICIO.DbType = DbType.DateTime;
				parameterPFECHAINICIO.Value = DBNull.Value;
			}

			OAParameter parameterPFECHACORTE = new OAParameter();
			parameterPFECHACORTE.ParameterName = "PFECHACORTE";
			if(pFECHACORTE.HasValue)
			{
				parameterPFECHACORTE.Value = pFECHACORTE.Value;
			}
			else
			{
				parameterPFECHACORTE.DbType = DbType.DateTime;
				parameterPFECHACORTE.Value = DBNull.Value;
			}

			OAParameter parameterPPERIODO = new OAParameter();
			parameterPPERIODO.ParameterName = "PPERIODO";
			if(pPERIODO.HasValue)
			{
				parameterPPERIODO.Value = pPERIODO.Value;
			}
			else
			{
				parameterPPERIODO.DbType = DbType.Int32;
				parameterPPERIODO.Value = DBNull.Value;
			}

			OAParameter parameterPAFECTANTES = new OAParameter();
			parameterPAFECTANTES.ParameterName = "PAFECTANTES";
			if(pAFECTANTES.HasValue)
			{
				parameterPAFECTANTES.Value = pAFECTANTES.Value;
			}
			else
			{
				parameterPAFECTANTES.DbType = DbType.Int32;
				parameterPAFECTANTES.Value = DBNull.Value;
			}

			OAParameter parameterConcepto = new OAParameter();
			parameterConcepto.ParameterName = "concepto";
			parameterConcepto.Direction = ParameterDirection.Output;
			parameterConcepto.Size = 100;
			if(concepto != null)
			{
				parameterConcepto.Value = concepto;
			}	
			else
			{
				parameterConcepto.DbType = DbType.String;
				parameterConcepto.Value = DBNull.Value;
			}

			OAParameter parameterRubro = new OAParameter();
			parameterRubro.ParameterName = "rubro";
			parameterRubro.Direction = ParameterDirection.Output;
			parameterRubro.Size = 100;
			if(rubro != null)
			{
				parameterRubro.Value = rubro;
			}	
			else
			{
				parameterRubro.DbType = DbType.String;
				parameterRubro.Value = DBNull.Value;
			}

			OAParameter parameterValor = new OAParameter();
			parameterValor.ParameterName = "valor";
			parameterValor.Direction = ParameterDirection.Output;
			parameterValor.Size = 100;
			if(valor != null)
			{
				parameterValor.Value = valor;
			}	
			else
			{
				parameterValor.DbType = DbType.String;
				parameterValor.Value = DBNull.Value;
			}

			OAParameter parameterPropiedad = new OAParameter();
			parameterPropiedad.ParameterName = "propiedad";
			parameterPropiedad.Direction = ParameterDirection.Output;
			if(propiedad.HasValue)
			{
				parameterPropiedad.Value = propiedad.Value;
			}
			else
			{
				parameterPropiedad.DbType = DbType.Int32;
				parameterPropiedad.Value = DBNull.Value;
			}

			IEnumerable<ResumenEmisionesPeriodoItem> queryResult = this.ExecuteQuery<ResumenEmisionesPeriodoItem>("\"REP_RESUMEN_EMISIONES_PERIODO\"", CommandType.StoredProcedure, parameterPANIO, parameterPFECHAINICIO, parameterPFECHACORTE, parameterPPERIODO, parameterPAFECTANTES, parameterConcepto, parameterRubro, parameterValor, parameterPropiedad);
		
			concepto = parameterConcepto.Value == DBNull.Value 
				? default(string) 
				: (string)parameterConcepto.Value;
			rubro = parameterRubro.Value == DBNull.Value 
				? default(string) 
				: (string)parameterRubro.Value;
			valor = parameterValor.Value == DBNull.Value 
				? default(string) 
				: (string)parameterValor.Value;
			propiedad = parameterPropiedad.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterPropiedad.Value;
		
			return queryResult;
		}
		
		public IEnumerable<RepCtaCteAnualItem> RepCtaCorrienteAnualCorte(int? aÑO, int? cONCEPTO, DateTime? pFECHACORTE, ref int iD, ref int? rUBROID, ref double? vALOR, ref string rUBRO, ref string nOMBRES, ref string cODIGO)
		{
			OAParameter parameterAÑO = new OAParameter();
			parameterAÑO.ParameterName = "AÑO";
			if(aÑO.HasValue)
			{
				parameterAÑO.Value = aÑO.Value;
			}
			else
			{
				parameterAÑO.DbType = DbType.Int32;
				parameterAÑO.Value = DBNull.Value;
			}

			OAParameter parameterCONCEPTO = new OAParameter();
			parameterCONCEPTO.ParameterName = "CONCEPTO";
			if(cONCEPTO.HasValue)
			{
				parameterCONCEPTO.Value = cONCEPTO.Value;
			}
			else
			{
				parameterCONCEPTO.DbType = DbType.Int32;
				parameterCONCEPTO.Value = DBNull.Value;
			}

			OAParameter parameterPFECHACORTE = new OAParameter();
			parameterPFECHACORTE.ParameterName = "PFECHACORTE";
			if(pFECHACORTE.HasValue)
			{
				parameterPFECHACORTE.Value = pFECHACORTE.Value;
			}
			else
			{
				parameterPFECHACORTE.DbType = DbType.DateTime;
				parameterPFECHACORTE.Value = DBNull.Value;
			}

			OAParameter parameterID = new OAParameter();
			parameterID.ParameterName = "ID";
			parameterID.Direction = ParameterDirection.Output;
			parameterID.Value = iD;

			OAParameter parameterRUBROID = new OAParameter();
			parameterRUBROID.ParameterName = "RUBRO_ID";
			parameterRUBROID.Direction = ParameterDirection.Output;
			if(rUBROID.HasValue)
			{
				parameterRUBROID.Value = rUBROID.Value;
			}
			else
			{
				parameterRUBROID.DbType = DbType.Int32;
				parameterRUBROID.Value = DBNull.Value;
			}

			OAParameter parameterVALOR = new OAParameter();
			parameterVALOR.ParameterName = "VALOR";
			parameterVALOR.Direction = ParameterDirection.Output;
			if(vALOR.HasValue)
			{
				parameterVALOR.Value = vALOR.Value;
			}
			else
			{
				parameterVALOR.DbType = DbType.Double;
				parameterVALOR.Value = DBNull.Value;
			}

			OAParameter parameterRUBRO = new OAParameter();
			parameterRUBRO.ParameterName = "RUBRO";
			parameterRUBRO.Direction = ParameterDirection.Output;
			parameterRUBRO.Size = 100;
			if(rUBRO != null)
			{
				parameterRUBRO.Value = rUBRO;
			}	
			else
			{
				parameterRUBRO.DbType = DbType.String;
				parameterRUBRO.Value = DBNull.Value;
			}

			OAParameter parameterNOMBRES = new OAParameter();
			parameterNOMBRES.ParameterName = "NOMBRES";
			parameterNOMBRES.Direction = ParameterDirection.Output;
			parameterNOMBRES.Size = 100;
			if(nOMBRES != null)
			{
				parameterNOMBRES.Value = nOMBRES;
			}	
			else
			{
				parameterNOMBRES.DbType = DbType.String;
				parameterNOMBRES.Value = DBNull.Value;
			}

			OAParameter parameterCODIGO = new OAParameter();
			parameterCODIGO.ParameterName = "CODIGO";
			parameterCODIGO.Direction = ParameterDirection.Output;
			parameterCODIGO.Size = 50;
			if(cODIGO != null)
			{
				parameterCODIGO.Value = cODIGO;
			}	
			else
			{
				parameterCODIGO.DbType = DbType.String;
				parameterCODIGO.Value = DBNull.Value;
			}

			IEnumerable<RepCtaCteAnualItem> queryResult = this.ExecuteQuery<RepCtaCteAnualItem>("\"REP_CTA_CORRIENTE_ANUAL_CORTE\"", CommandType.StoredProcedure, parameterAÑO, parameterCONCEPTO, parameterPFECHACORTE, parameterID, parameterRUBROID, parameterVALOR, parameterRUBRO, parameterNOMBRES, parameterCODIGO);
		
			iD = parameterID.Value == DBNull.Value 
				? default(int) 
				: (int)parameterID.Value;
			rUBROID = parameterRUBROID.Value == DBNull.Value 
				? default(int?) 
				: (int?)parameterRUBROID.Value;
			vALOR = parameterVALOR.Value == DBNull.Value 
				? default(double?) 
				: (double?)parameterVALOR.Value;
			rUBRO = parameterRUBRO.Value == DBNull.Value 
				? default(string) 
				: (string)parameterRUBRO.Value;
			nOMBRES = parameterNOMBRES.Value == DBNull.Value 
				? default(string) 
				: (string)parameterNOMBRES.Value;
			cODIGO = parameterCODIGO.Value == DBNull.Value 
				? default(string) 
				: (string)parameterCODIGO.Value;
		
			return queryResult;
		}
		
		public static BackendConfiguration GetBackendConfiguration()
		{
			BackendConfiguration backend = new BackendConfiguration();
			backend.Backend = "Firebird";
			backend.ProviderName = "FirebirdSql.Data.FirebirdClient";
			backend.Logging.LogEventsToTrace = false;
			backend.Logging.MetricStoreSnapshotInterval = 0;
		
			CustomizeBackendConfiguration(ref backend);
		
			return backend;
		}
		
		/// <summary>
		/// Allows you to customize the BackendConfiguration of Modelo.
		/// </summary>
		/// <param name="config">The BackendConfiguration of Modelo.</param>
		static partial void CustomizeBackendConfiguration(ref BackendConfiguration config);
		
	}
	
	public interface IModeloUnitOfWork : IUnitOfWork, IModeloExtension
	{
		IQueryable<TablaClave> TablaClaves
		{
			get;
		}
		IQueryable<Tabla> Tablas
		{
			get;
		}
		IQueryable<Contribuyente> Contribuyentes
		{
			get;
		}
		IQueryable<Rubro> Rubros
		{
			get;
		}
		IQueryable<RebajasRubro> RebajaRubros
		{
			get;
		}
		IQueryable<Rebaja> Rebajas
		{
			get;
		}
		IQueryable<ContribuyentesRebaja> ContribuyenteRebajas
		{
			get;
		}
		IQueryable<PredioTerreno> PredioTerrenos
		{
			get;
		}
		IQueryable<PredioTabla> PredioTablas
		{
			get;
		}
		IQueryable<PredioPropietario> PredioPropietarios
		{
			get;
		}
		IQueryable<PredioPiso> PredioPisos
		{
			get;
		}
		IQueryable<PredioFrente> PredioFrentes
		{
			get;
		}
		IQueryable<PredioFoto> PredioFotos
		{
			get;
		}
		IQueryable<PredioConstruccion> PredioConstrucciones
		{
			get;
		}
		IQueryable<PredioBloque> PredioBloques
		{
			get;
		}
		IQueryable<PredioBase> PredioBases
		{
			get;
		}
		IQueryable<Servicio> Servicios
		{
			get;
		}
		IQueryable<Patente> Patentes
		{
			get;
		}
		IQueryable<AguaPotable> AguaPotables
		{
			get;
		}
		IQueryable<AguaLectura> AguaLecturas
		{
			get;
		}
		IQueryable<PatentesComponente> PatenteComponentes
		{
			get;
		}
		IQueryable<Concepto> Conceptos
		{
			get;
		}
		IQueryable<Coeficiente> Coeficientes
		{
			get;
		}
		IQueryable<CoeficienteElemento> CoeficienteElementos
		{
			get;
		}
		IQueryable<Supervision> Supervisiones
		{
			get;
		}
		IQueryable<Privilegio> Privilegios
		{
			get;
		}
		IQueryable<Usuario> Usuarios
		{
			get;
		}
		IQueryable<Comando> Comandos
		{
			get;
		}
		IQueryable<Funcion> Funciones
		{
			get;
		}
		IQueryable<Autorizacion> Autorizaciones
		{
			get;
		}
		IQueryable<ModuloUsuario> ModuloUsuarios
		{
			get;
		}
		IQueryable<Seguimiento> Seguimientos
		{
			get;
		}
		IQueryable<RubrosParametro> RubrosParametros
		{
			get;
		}
		IQueryable<ConceptosRubro> ConceptosRubros
		{
			get;
		}
		IQueryable<ConceptosDocumento> ConceptosDocumentos
		{
			get;
		}
		IQueryable<AguaServicio> AguaServicios
		{
			get;
		}
		IQueryable<PlanillaSustitucion> PlanillaSustitucions
		{
			get;
		}
		IQueryable<PlanillaRubro> PlanillaRubros
		{
			get;
		}
		IQueryable<PlanillaAtributo> PlanillaAtributos
		{
			get;
		}
		IQueryable<Planilla> Planillas
		{
			get;
		}
		IQueryable<ConvenioTransaccion> ConvenioTransaccions
		{
			get;
		}
		IQueryable<Convenio> Convenios
		{
			get;
		}
		IQueryable<CobroTransaccion> CobroTransaccions
		{
			get;
		}
		IQueryable<Cobro> Cobros
		{
			get;
		}
		IQueryable<CobrosElemento> CobrosElementos
		{
			get;
		}
		IQueryable<CobrosRubro> CobrosRubros
		{
			get;
		}
		IQueryable<RepRecaudacionesFecha> RepRecaudacionesFechas
		{
			get;
		}
		IQueryable<RepEmisionesSaldo> RepEmisionesSaldos
		{
			get;
		}
		IQueryable<ConceptosEmision> ConceptosEmisions
		{
			get;
		}
		IQueryable<Modulo> Modulos
		{
			get;
		}
		IQueryable<Reporte> Reportes
		{
			get;
		}
		IQueryable<RepCuentaCorrienteResumen> RepCuentaCorrienteResumens
		{
			get;
		}
		IQueryable<RepCuentaCorrienteDetalle> RepCuentaCorrienteDetalles
		{
			get;
		}
		IQueryable<Caja> Cajas
		{
			get;
		}
		IQueryable<CajasUsuario> CajasUsuarios
		{
			get;
		}
		IQueryable<RepPredio> RepPredios
		{
			get;
		}
		IQueryable<CuentaBancaria> CuentaBancarias
		{
			get;
		}
		IQueryable<CajaElemento> CajaElementos
		{
			get;
		}
		IQueryable<CajaComprobante> CajaComprobantes
		{
			get;
		}
		IQueryable<CarpetaCatastralAnual> CarpetaCatastralAnuals
		{
			get;
		}
		IQueryable<Soporte> Soportes
		{
			get;
		}
		IQueryable<SoporteMovimiento> SoporteMovimientos
		{
			get;
		}
		IQueryable<MejoraElemento> MejoraElementos
		{
			get;
		}
		IQueryable<Mejora> Mejoras
		{
			get;
		}
		IQueryable<RepRecaudacionesCompDetalle> RepRecaudacionesCompDetalles
		{
			get;
		}
		IQueryable<CobrosNotasElemento> CobrosNotasElementos
		{
			get;
		}
		IQueryable<CobrosNota> CobrosNotas
		{
			get;
		}
		IQueryable<RepReversionesFecha> RepReversionesFechas
		{
			get;
		}
		IQueryable<ConveniosDividendo> ConveniosDividendos
		{
			get;
		}
		IQueryable<PlanillaMes> PlanillaMes
		{
			get;
		}
		IQueryable<Mercado> Mercados
		{
			get;
		}
		IEnumerable<RubroCalcularConcepto> CALCULAR_CONCEPTO(int? pCONCEPTO, string pTIPOS, string pARAMETROS, ref int? rUBRO, ref string dENOMINACION, ref double? vALOR);
		String EmitirConceptoTodos(int? pCONCEPTO, ref string pERIODO);
		String ValidarConcepto(int? pCONCEPTO, string pARAMETROS, ref string rESULTADO);
		Int32 EMITIR_TITULO(int? pCONCEPTO, string pARAMETROS, int? pUSUARIO, string pCOMENTARIOS, ref int? iD);
		IEnumerable<EmisionesSaldosItem> RepEmisionesSaldosFecha(DateTime? pFECHACORTE, ref int? id, ref int? conceptoid, ref string concepto, ref int? año, ref int? conteo, ref double? valor, ref string estado);
		IEnumerable<CuentaCorrienteItem> RepCuentaCorrienteCorte(DateTime? pFECHACORTE, int? pCONCEPTO, ref int? id, ref int? concepto, ref string nombres, ref string codigo, ref string direccion, ref int? año, ref double? total);
		IEnumerable<BaseImponibleAño> BASE_IMPONIBLE_XCODIGO(int? pCONCEPTO, string pCODIGO, ref int? pID, ref string pDENOMINACION, ref int? pANIO, ref double? pVALOR);
		IEnumerable<CarpetaCatastralCorteItem> RepCarpetaCatastralCorte(int? aÑO, int? cONCEPTO, DateTime? fECHACORTE, ref int? id, ref string nombres, ref int? conceptoid, ref string codigo, ref int? año1, ref string rubro, ref double? valor, ref double? baseimponible);
		IEnumerable<CuentaCorrienteRubrosCorteItem> RepCuentaCorrienteRubrosCorte(DateTime? pFECHACORTE, ref int? id, ref int? conceptoid, ref int? rubroid, ref double? valor, ref int? año, ref string concepto, ref string rubro);
		IEnumerable<EmisionesSaldoRubrosItem> RepEmisionesSaldoRubrosFecha(DateTime? pFECHACORTE, ref int? id, ref int? conceptoid, ref string concepto, ref int? año, ref int? conteo, ref double? valor, ref string estado, ref int? rubroid, ref string rubro);
		IEnumerable<RecaudacionComponentesItem> RepRecaudaComponentesFecha(DateTime? pFECHAINICIO, DateTime? pFECHACORTE, ref int? id, ref string concepto, ref int? origen, ref string rubro, ref double? valor);
		IEnumerable<ResumenCatastralItem> RepResumenCatastral(int? pYEAR, ref string tipo, ref int? sector, ref int? conteo, ref double? valter, ref double? valcons, ref double? valpro, ref int? escritura, ref double? impuestos);
		IEnumerable<ResumenEmisionesPeriodoItem> RepResumenEmisionesPeriodo(int? pANIO, DateTime? pFECHAINICIO, DateTime? pFECHACORTE, int? pPERIODO, int? pAFECTANTES, ref string concepto, ref string rubro, ref string valor, ref int? propiedad);
		IEnumerable<RepCtaCteAnualItem> RepCtaCorrienteAnualCorte(int? aÑO, int? cONCEPTO, DateTime? pFECHACORTE, ref int iD, ref int? rUBROID, ref double? vALOR, ref string rUBRO, ref string nOMBRES, ref string cODIGO);
	}
}
#pragma warning restore 1591
