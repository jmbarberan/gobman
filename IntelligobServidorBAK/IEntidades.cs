#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Code is generated byTelerik Data Access Service Wizard
// using PlainIDataService.tt template

namespace Intelligob.Servidor
{
	using System.ServiceModel;
	using Intelligob.Servidor.Dto;
	using System;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.Serialization;

	/// <summary>
	/// Entidades interface.
	/// </summary>
	[ServiceContract]
	public interface IEntidades: IEntidadesExtension
	{
	    #region AguaLecturas CRUD Operations
	
	    /// <summary>
	    /// Returns all agualecturas.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AguaLecturaDto> ReadAguaLecturas();
	
	    /// <summary>
	    /// Returns a specified amount of agualecturas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AguaLecturaDto> ReadAguaLecturasPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all agualecturas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AguaLecturaDto> ReadAguaLecturasFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of agualecturas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AguaLecturaDto> ReadAguaLecturasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a agualectura with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    AguaLecturaDto ReadAguaLectura(string dtoKey);
	
	    /// <summary>
	    /// Returns all agualecturas count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int AguaLecturasCount();
	
	    /// <summary>
	    /// Returns all agualecturas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int AguaLecturasCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new agualectura from the given dto object into the database.
	    /// </summary>
	    /// <param name="agualectura">The dto object.</param>
	    /// <returns>The dto key of the newly created agualectura.</returns>
	    [OperationContract]
	    string CreateAguaLectura(AguaLecturaDto agualectura);
	
	    /// <summary>
	    /// Updates agualectura in the database from the given dto object.
	    /// </summary>
	    /// <param name="agualectura">The dto object.</param>
	    [OperationContract]
	    void UpdateAguaLectura(AguaLecturaDto agualectura);
	
	    /// <summary>
	    /// Update an existing agualecturas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="agualecturas">The dto object list.</param>
	    [OperationContract]
	    void UpdateAguaLecturas(IEnumerable<AguaLecturaDto> agualecturas);
	
	    /// <summary>
	    /// Deletes agualectura from the database by the given dto object.
	    /// </summary>
	    /// <param name="agualectura">The dto object.</param>
	    [OperationContract]
	    void DeleteAguaLectura(AguaLecturaDto agualectura);
	
	    /// <summary>
	    /// Delete agualecturas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="agualecturas">The dto object list.</param>
	    [OperationContract]
	    void DeleteAguaLecturas(IEnumerable<AguaLecturaDto> agualecturas);
	    
	    #endregion
	    
	    #region AguaPotables CRUD Operations
	
	    /// <summary>
	    /// Returns all aguapotables.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AguaPotableDto> ReadAguaPotables();
	
	    /// <summary>
	    /// Returns a specified amount of aguapotables from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AguaPotableDto> ReadAguaPotablesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all aguapotables filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AguaPotableDto> ReadAguaPotablesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of aguapotables from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AguaPotableDto> ReadAguaPotablesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a aguapotable with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    AguaPotableDto ReadAguaPotable(string dtoKey);
	
	    /// <summary>
	    /// Returns all aguapotables count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int AguaPotablesCount();
	
	    /// <summary>
	    /// Returns all aguapotables count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int AguaPotablesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new aguapotable from the given dto object into the database.
	    /// </summary>
	    /// <param name="aguapotable">The dto object.</param>
	    /// <returns>The dto key of the newly created aguapotable.</returns>
	    [OperationContract]
	    string CreateAguaPotable(AguaPotableDto aguapotable);
	
	    /// <summary>
	    /// Updates aguapotable in the database from the given dto object.
	    /// </summary>
	    /// <param name="aguapotable">The dto object.</param>
	    [OperationContract]
	    void UpdateAguaPotable(AguaPotableDto aguapotable);
	
	    /// <summary>
	    /// Update an existing aguapotables in the database from the given dto object list.
	    /// </summary>
	    /// <param name="aguapotables">The dto object list.</param>
	    [OperationContract]
	    void UpdateAguaPotables(IEnumerable<AguaPotableDto> aguapotables);
	
	    /// <summary>
	    /// Deletes aguapotable from the database by the given dto object.
	    /// </summary>
	    /// <param name="aguapotable">The dto object.</param>
	    [OperationContract]
	    void DeleteAguaPotable(AguaPotableDto aguapotable);
	
	    /// <summary>
	    /// Delete aguapotables from the database by the given dto object list.
	    /// </summary>
	    /// <param name="aguapotables">The dto object list.</param>
	    [OperationContract]
	    void DeleteAguaPotables(IEnumerable<AguaPotableDto> aguapotables);
	    
	    #endregion
	    
	    #region AguaServicios CRUD Operations
	
	    /// <summary>
	    /// Returns all aguaservicios.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AguaServicioDto> ReadAguaServicios();
	
	    /// <summary>
	    /// Returns a specified amount of aguaservicios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AguaServicioDto> ReadAguaServiciosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all aguaservicios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AguaServicioDto> ReadAguaServiciosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of aguaservicios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AguaServicioDto> ReadAguaServiciosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a aguaservicio with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    AguaServicioDto ReadAguaServicio(string dtoKey);
	
	    /// <summary>
	    /// Returns all aguaservicios count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int AguaServiciosCount();
	
	    /// <summary>
	    /// Returns all aguaservicios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int AguaServiciosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new aguaservicio from the given dto object into the database.
	    /// </summary>
	    /// <param name="aguaservicio">The dto object.</param>
	    /// <returns>The dto key of the newly created aguaservicio.</returns>
	    [OperationContract]
	    string CreateAguaServicio(AguaServicioDto aguaservicio);
	
	    /// <summary>
	    /// Updates aguaservicio in the database from the given dto object.
	    /// </summary>
	    /// <param name="aguaservicio">The dto object.</param>
	    [OperationContract]
	    void UpdateAguaServicio(AguaServicioDto aguaservicio);
	
	    /// <summary>
	    /// Update an existing aguaservicios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="aguaservicios">The dto object list.</param>
	    [OperationContract]
	    void UpdateAguaServicios(IEnumerable<AguaServicioDto> aguaservicios);
	
	    /// <summary>
	    /// Deletes aguaservicio from the database by the given dto object.
	    /// </summary>
	    /// <param name="aguaservicio">The dto object.</param>
	    [OperationContract]
	    void DeleteAguaServicio(AguaServicioDto aguaservicio);
	
	    /// <summary>
	    /// Delete aguaservicios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="aguaservicios">The dto object list.</param>
	    [OperationContract]
	    void DeleteAguaServicios(IEnumerable<AguaServicioDto> aguaservicios);
	    
	    #endregion
	    
	    #region Autorizacions CRUD Operations
	
	    /// <summary>
	    /// Returns all autorizacions.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AutorizacionDto> ReadAutorizacions();
	
	    /// <summary>
	    /// Returns a specified amount of autorizacions from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AutorizacionDto> ReadAutorizacionsPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all autorizacions filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AutorizacionDto> ReadAutorizacionsFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of autorizacions from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<AutorizacionDto> ReadAutorizacionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a autorizacion with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    AutorizacionDto ReadAutorizacion(string dtoKey);
	
	    /// <summary>
	    /// Returns all autorizacions count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int AutorizacionsCount();
	
	    /// <summary>
	    /// Returns all autorizacions count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int AutorizacionsCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new autorizacion from the given dto object into the database.
	    /// </summary>
	    /// <param name="autorizacion">The dto object.</param>
	    /// <returns>The dto key of the newly created autorizacion.</returns>
	    [OperationContract]
	    string CreateAutorizacion(AutorizacionDto autorizacion);
	
	    /// <summary>
	    /// Updates autorizacion in the database from the given dto object.
	    /// </summary>
	    /// <param name="autorizacion">The dto object.</param>
	    [OperationContract]
	    void UpdateAutorizacion(AutorizacionDto autorizacion);
	
	    /// <summary>
	    /// Update an existing autorizacions in the database from the given dto object list.
	    /// </summary>
	    /// <param name="autorizacions">The dto object list.</param>
	    [OperationContract]
	    void UpdateAutorizacions(IEnumerable<AutorizacionDto> autorizacions);
	
	    /// <summary>
	    /// Deletes autorizacion from the database by the given dto object.
	    /// </summary>
	    /// <param name="autorizacion">The dto object.</param>
	    [OperationContract]
	    void DeleteAutorizacion(AutorizacionDto autorizacion);
	
	    /// <summary>
	    /// Delete autorizacions from the database by the given dto object list.
	    /// </summary>
	    /// <param name="autorizacions">The dto object list.</param>
	    [OperationContract]
	    void DeleteAutorizacions(IEnumerable<AutorizacionDto> autorizacions);
	    
	    #endregion
	    
	    #region Cajas CRUD Operations
	
	    /// <summary>
	    /// Returns all cajas.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CajaDto> ReadCajas();
	
	    /// <summary>
	    /// Returns a specified amount of cajas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CajaDto> ReadCajasPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all cajas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CajaDto> ReadCajasFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of cajas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CajaDto> ReadCajasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a caja with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CajaDto ReadCaja(string dtoKey);
	
	    /// <summary>
	    /// Returns all cajas count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CajasCount();
	
	    /// <summary>
	    /// Returns all cajas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CajasCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new caja from the given dto object into the database.
	    /// </summary>
	    /// <param name="caja">The dto object.</param>
	    /// <returns>The dto key of the newly created caja.</returns>
	    [OperationContract]
	    string CreateCaja(CajaDto caja);
	
	    /// <summary>
	    /// Updates caja in the database from the given dto object.
	    /// </summary>
	    /// <param name="caja">The dto object.</param>
	    [OperationContract]
	    void UpdateCaja(CajaDto caja);
	
	    /// <summary>
	    /// Update an existing cajas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cajas">The dto object list.</param>
	    [OperationContract]
	    void UpdateCajas(IEnumerable<CajaDto> cajas);
	
	    /// <summary>
	    /// Deletes caja from the database by the given dto object.
	    /// </summary>
	    /// <param name="caja">The dto object.</param>
	    [OperationContract]
	    void DeleteCaja(CajaDto caja);
	
	    /// <summary>
	    /// Delete cajas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cajas">The dto object list.</param>
	    [OperationContract]
	    void DeleteCajas(IEnumerable<CajaDto> cajas);
	    
	    #endregion
	    
	    #region CajaComprobantes CRUD Operations
	
	    /// <summary>
	    /// Returns all cajacomprobantes.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CajaComprobanteDto> ReadCajaComprobantes();
	
	    /// <summary>
	    /// Returns a specified amount of cajacomprobantes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CajaComprobanteDto> ReadCajaComprobantesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all cajacomprobantes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CajaComprobanteDto> ReadCajaComprobantesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of cajacomprobantes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CajaComprobanteDto> ReadCajaComprobantesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a cajacomprobante with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CajaComprobanteDto ReadCajaComprobante(string dtoKey);
	
	    /// <summary>
	    /// Returns all cajacomprobantes count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CajaComprobantesCount();
	
	    /// <summary>
	    /// Returns all cajacomprobantes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CajaComprobantesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new cajacomprobante from the given dto object into the database.
	    /// </summary>
	    /// <param name="cajacomprobante">The dto object.</param>
	    /// <returns>The dto key of the newly created cajacomprobante.</returns>
	    [OperationContract]
	    string CreateCajaComprobante(CajaComprobanteDto cajacomprobante);
	
	    /// <summary>
	    /// Updates cajacomprobante in the database from the given dto object.
	    /// </summary>
	    /// <param name="cajacomprobante">The dto object.</param>
	    [OperationContract]
	    void UpdateCajaComprobante(CajaComprobanteDto cajacomprobante);
	
	    /// <summary>
	    /// Update an existing cajacomprobantes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cajacomprobantes">The dto object list.</param>
	    [OperationContract]
	    void UpdateCajaComprobantes(IEnumerable<CajaComprobanteDto> cajacomprobantes);
	
	    /// <summary>
	    /// Deletes cajacomprobante from the database by the given dto object.
	    /// </summary>
	    /// <param name="cajacomprobante">The dto object.</param>
	    [OperationContract]
	    void DeleteCajaComprobante(CajaComprobanteDto cajacomprobante);
	
	    /// <summary>
	    /// Delete cajacomprobantes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cajacomprobantes">The dto object list.</param>
	    [OperationContract]
	    void DeleteCajaComprobantes(IEnumerable<CajaComprobanteDto> cajacomprobantes);
	    
	    #endregion
	    
	    #region CajaElementos CRUD Operations
	
	    /// <summary>
	    /// Returns all cajaelementos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CajaElementoDto> ReadCajaElementos();
	
	    /// <summary>
	    /// Returns a specified amount of cajaelementos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CajaElementoDto> ReadCajaElementosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all cajaelementos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CajaElementoDto> ReadCajaElementosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of cajaelementos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CajaElementoDto> ReadCajaElementosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a cajaelemento with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CajaElementoDto ReadCajaElemento(string dtoKey);
	
	    /// <summary>
	    /// Returns all cajaelementos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CajaElementosCount();
	
	    /// <summary>
	    /// Returns all cajaelementos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CajaElementosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new cajaelemento from the given dto object into the database.
	    /// </summary>
	    /// <param name="cajaelemento">The dto object.</param>
	    /// <returns>The dto key of the newly created cajaelemento.</returns>
	    [OperationContract]
	    string CreateCajaElemento(CajaElementoDto cajaelemento);
	
	    /// <summary>
	    /// Updates cajaelemento in the database from the given dto object.
	    /// </summary>
	    /// <param name="cajaelemento">The dto object.</param>
	    [OperationContract]
	    void UpdateCajaElemento(CajaElementoDto cajaelemento);
	
	    /// <summary>
	    /// Update an existing cajaelementos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cajaelementos">The dto object list.</param>
	    [OperationContract]
	    void UpdateCajaElementos(IEnumerable<CajaElementoDto> cajaelementos);
	
	    /// <summary>
	    /// Deletes cajaelemento from the database by the given dto object.
	    /// </summary>
	    /// <param name="cajaelemento">The dto object.</param>
	    [OperationContract]
	    void DeleteCajaElemento(CajaElementoDto cajaelemento);
	
	    /// <summary>
	    /// Delete cajaelementos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cajaelementos">The dto object list.</param>
	    [OperationContract]
	    void DeleteCajaElementos(IEnumerable<CajaElementoDto> cajaelementos);
	    
	    #endregion
	    
	    #region CajasUsuarios CRUD Operations
	
	    /// <summary>
	    /// Returns all cajasusuarios.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CajasUsuarioDto> ReadCajasUsuarios();
	
	    /// <summary>
	    /// Returns a specified amount of cajasusuarios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CajasUsuarioDto> ReadCajasUsuariosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all cajasusuarios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CajasUsuarioDto> ReadCajasUsuariosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of cajasusuarios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CajasUsuarioDto> ReadCajasUsuariosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a cajasusuario with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CajasUsuarioDto ReadCajasUsuario(string dtoKey);
	
	    /// <summary>
	    /// Returns all cajasusuarios count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CajasUsuariosCount();
	
	    /// <summary>
	    /// Returns all cajasusuarios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CajasUsuariosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new cajasusuario from the given dto object into the database.
	    /// </summary>
	    /// <param name="cajasusuario">The dto object.</param>
	    /// <returns>The dto key of the newly created cajasusuario.</returns>
	    [OperationContract]
	    string CreateCajasUsuario(CajasUsuarioDto cajasusuario);
	
	    /// <summary>
	    /// Updates cajasusuario in the database from the given dto object.
	    /// </summary>
	    /// <param name="cajasusuario">The dto object.</param>
	    [OperationContract]
	    void UpdateCajasUsuario(CajasUsuarioDto cajasusuario);
	
	    /// <summary>
	    /// Update an existing cajasusuarios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cajasusuarios">The dto object list.</param>
	    [OperationContract]
	    void UpdateCajasUsuarios(IEnumerable<CajasUsuarioDto> cajasusuarios);
	
	    /// <summary>
	    /// Deletes cajasusuario from the database by the given dto object.
	    /// </summary>
	    /// <param name="cajasusuario">The dto object.</param>
	    [OperationContract]
	    void DeleteCajasUsuario(CajasUsuarioDto cajasusuario);
	
	    /// <summary>
	    /// Delete cajasusuarios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cajasusuarios">The dto object list.</param>
	    [OperationContract]
	    void DeleteCajasUsuarios(IEnumerable<CajasUsuarioDto> cajasusuarios);
	    
	    #endregion
	    
	    #region CarpetaCatastralAnuals CRUD Operations
	
	    /// <summary>
	    /// Returns all carpetacatastralanuals.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CarpetaCatastralAnualDto> ReadCarpetaCatastralAnuals();
	
	    /// <summary>
	    /// Returns a specified amount of carpetacatastralanuals from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CarpetaCatastralAnualDto> ReadCarpetaCatastralAnualsPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all carpetacatastralanuals filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CarpetaCatastralAnualDto> ReadCarpetaCatastralAnualsFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of carpetacatastralanuals from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CarpetaCatastralAnualDto> ReadCarpetaCatastralAnualsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a carpetacatastralanual with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CarpetaCatastralAnualDto ReadCarpetaCatastralAnual(string dtoKey);
	
	    /// <summary>
	    /// Returns all carpetacatastralanuals count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CarpetaCatastralAnualsCount();
	
	    /// <summary>
	    /// Returns all carpetacatastralanuals count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CarpetaCatastralAnualsCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new carpetacatastralanual from the given dto object into the database.
	    /// </summary>
	    /// <param name="carpetacatastralanual">The dto object.</param>
	    /// <returns>The dto key of the newly created carpetacatastralanual.</returns>
	    [OperationContract]
	    string CreateCarpetaCatastralAnual(CarpetaCatastralAnualDto carpetacatastralanual);
	
	    /// <summary>
	    /// Updates carpetacatastralanual in the database from the given dto object.
	    /// </summary>
	    /// <param name="carpetacatastralanual">The dto object.</param>
	    [OperationContract]
	    void UpdateCarpetaCatastralAnual(CarpetaCatastralAnualDto carpetacatastralanual);
	
	    /// <summary>
	    /// Update an existing carpetacatastralanuals in the database from the given dto object list.
	    /// </summary>
	    /// <param name="carpetacatastralanuals">The dto object list.</param>
	    [OperationContract]
	    void UpdateCarpetaCatastralAnuals(IEnumerable<CarpetaCatastralAnualDto> carpetacatastralanuals);
	
	    /// <summary>
	    /// Deletes carpetacatastralanual from the database by the given dto object.
	    /// </summary>
	    /// <param name="carpetacatastralanual">The dto object.</param>
	    [OperationContract]
	    void DeleteCarpetaCatastralAnual(CarpetaCatastralAnualDto carpetacatastralanual);
	
	    /// <summary>
	    /// Delete carpetacatastralanuals from the database by the given dto object list.
	    /// </summary>
	    /// <param name="carpetacatastralanuals">The dto object list.</param>
	    [OperationContract]
	    void DeleteCarpetaCatastralAnuals(IEnumerable<CarpetaCatastralAnualDto> carpetacatastralanuals);
	    
	    #endregion
	    
	    #region Cobros CRUD Operations
	
	    /// <summary>
	    /// Returns all cobros.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobroDto> ReadCobros();
	
	    /// <summary>
	    /// Returns a specified amount of cobros from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobroDto> ReadCobrosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all cobros filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobroDto> ReadCobrosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of cobros from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobroDto> ReadCobrosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a cobro with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CobroDto ReadCobro(string dtoKey);
	
	    /// <summary>
	    /// Returns all cobros count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CobrosCount();
	
	    /// <summary>
	    /// Returns all cobros count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CobrosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new cobro from the given dto object into the database.
	    /// </summary>
	    /// <param name="cobro">The dto object.</param>
	    /// <returns>The dto key of the newly created cobro.</returns>
	    [OperationContract]
	    string CreateCobro(CobroDto cobro);
	
	    /// <summary>
	    /// Updates cobro in the database from the given dto object.
	    /// </summary>
	    /// <param name="cobro">The dto object.</param>
	    [OperationContract]
	    void UpdateCobro(CobroDto cobro);
	
	    /// <summary>
	    /// Update an existing cobros in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cobros">The dto object list.</param>
	    [OperationContract]
	    void UpdateCobros(IEnumerable<CobroDto> cobros);
	
	    /// <summary>
	    /// Deletes cobro from the database by the given dto object.
	    /// </summary>
	    /// <param name="cobro">The dto object.</param>
	    [OperationContract]
	    void DeleteCobro(CobroDto cobro);
	
	    /// <summary>
	    /// Delete cobros from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cobros">The dto object list.</param>
	    [OperationContract]
	    void DeleteCobros(IEnumerable<CobroDto> cobros);
	    
	    #endregion
	    
	    #region CobrosElementos CRUD Operations
	
	    /// <summary>
	    /// Returns all cobroselementos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobrosElementoDto> ReadCobrosElementos();
	
	    /// <summary>
	    /// Returns a specified amount of cobroselementos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobrosElementoDto> ReadCobrosElementosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all cobroselementos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobrosElementoDto> ReadCobrosElementosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of cobroselementos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobrosElementoDto> ReadCobrosElementosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a cobroselemento with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CobrosElementoDto ReadCobrosElemento(string dtoKey);
	
	    /// <summary>
	    /// Returns all cobroselementos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CobrosElementosCount();
	
	    /// <summary>
	    /// Returns all cobroselementos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CobrosElementosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new cobroselemento from the given dto object into the database.
	    /// </summary>
	    /// <param name="cobroselemento">The dto object.</param>
	    /// <returns>The dto key of the newly created cobroselemento.</returns>
	    [OperationContract]
	    string CreateCobrosElemento(CobrosElementoDto cobroselemento);
	
	    /// <summary>
	    /// Updates cobroselemento in the database from the given dto object.
	    /// </summary>
	    /// <param name="cobroselemento">The dto object.</param>
	    [OperationContract]
	    void UpdateCobrosElemento(CobrosElementoDto cobroselemento);
	
	    /// <summary>
	    /// Update an existing cobroselementos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cobroselementos">The dto object list.</param>
	    [OperationContract]
	    void UpdateCobrosElementos(IEnumerable<CobrosElementoDto> cobroselementos);
	
	    /// <summary>
	    /// Deletes cobroselemento from the database by the given dto object.
	    /// </summary>
	    /// <param name="cobroselemento">The dto object.</param>
	    [OperationContract]
	    void DeleteCobrosElemento(CobrosElementoDto cobroselemento);
	
	    /// <summary>
	    /// Delete cobroselementos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cobroselementos">The dto object list.</param>
	    [OperationContract]
	    void DeleteCobrosElementos(IEnumerable<CobrosElementoDto> cobroselementos);
	    
	    #endregion
	    
	    #region CobrosNotas CRUD Operations
	
	    /// <summary>
	    /// Returns all cobrosnotas.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobrosNotaDto> ReadCobrosNotas();
	
	    /// <summary>
	    /// Returns a specified amount of cobrosnotas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobrosNotaDto> ReadCobrosNotasPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all cobrosnotas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobrosNotaDto> ReadCobrosNotasFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of cobrosnotas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobrosNotaDto> ReadCobrosNotasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a cobrosnota with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CobrosNotaDto ReadCobrosNota(string dtoKey);
	
	    /// <summary>
	    /// Returns all cobrosnotas count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CobrosNotasCount();
	
	    /// <summary>
	    /// Returns all cobrosnotas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CobrosNotasCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new cobrosnota from the given dto object into the database.
	    /// </summary>
	    /// <param name="cobrosnota">The dto object.</param>
	    /// <returns>The dto key of the newly created cobrosnota.</returns>
	    [OperationContract]
	    string CreateCobrosNota(CobrosNotaDto cobrosnota);
	
	    /// <summary>
	    /// Updates cobrosnota in the database from the given dto object.
	    /// </summary>
	    /// <param name="cobrosnota">The dto object.</param>
	    [OperationContract]
	    void UpdateCobrosNota(CobrosNotaDto cobrosnota);
	
	    /// <summary>
	    /// Update an existing cobrosnotas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cobrosnotas">The dto object list.</param>
	    [OperationContract]
	    void UpdateCobrosNotas(IEnumerable<CobrosNotaDto> cobrosnotas);
	
	    /// <summary>
	    /// Deletes cobrosnota from the database by the given dto object.
	    /// </summary>
	    /// <param name="cobrosnota">The dto object.</param>
	    [OperationContract]
	    void DeleteCobrosNota(CobrosNotaDto cobrosnota);
	
	    /// <summary>
	    /// Delete cobrosnotas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cobrosnotas">The dto object list.</param>
	    [OperationContract]
	    void DeleteCobrosNotas(IEnumerable<CobrosNotaDto> cobrosnotas);
	    
	    #endregion
	    
	    #region CobrosNotasElementos CRUD Operations
	
	    /// <summary>
	    /// Returns all cobrosnotaselementos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobrosNotasElementoDto> ReadCobrosNotasElementos();
	
	    /// <summary>
	    /// Returns a specified amount of cobrosnotaselementos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobrosNotasElementoDto> ReadCobrosNotasElementosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all cobrosnotaselementos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobrosNotasElementoDto> ReadCobrosNotasElementosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of cobrosnotaselementos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobrosNotasElementoDto> ReadCobrosNotasElementosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a cobrosnotaselemento with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CobrosNotasElementoDto ReadCobrosNotasElemento(string dtoKey);
	
	    /// <summary>
	    /// Returns all cobrosnotaselementos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CobrosNotasElementosCount();
	
	    /// <summary>
	    /// Returns all cobrosnotaselementos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CobrosNotasElementosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new cobrosnotaselemento from the given dto object into the database.
	    /// </summary>
	    /// <param name="cobrosnotaselemento">The dto object.</param>
	    /// <returns>The dto key of the newly created cobrosnotaselemento.</returns>
	    [OperationContract]
	    string CreateCobrosNotasElemento(CobrosNotasElementoDto cobrosnotaselemento);
	
	    /// <summary>
	    /// Updates cobrosnotaselemento in the database from the given dto object.
	    /// </summary>
	    /// <param name="cobrosnotaselemento">The dto object.</param>
	    [OperationContract]
	    void UpdateCobrosNotasElemento(CobrosNotasElementoDto cobrosnotaselemento);
	
	    /// <summary>
	    /// Update an existing cobrosnotaselementos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cobrosnotaselementos">The dto object list.</param>
	    [OperationContract]
	    void UpdateCobrosNotasElementos(IEnumerable<CobrosNotasElementoDto> cobrosnotaselementos);
	
	    /// <summary>
	    /// Deletes cobrosnotaselemento from the database by the given dto object.
	    /// </summary>
	    /// <param name="cobrosnotaselemento">The dto object.</param>
	    [OperationContract]
	    void DeleteCobrosNotasElemento(CobrosNotasElementoDto cobrosnotaselemento);
	
	    /// <summary>
	    /// Delete cobrosnotaselementos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cobrosnotaselementos">The dto object list.</param>
	    [OperationContract]
	    void DeleteCobrosNotasElementos(IEnumerable<CobrosNotasElementoDto> cobrosnotaselementos);
	    
	    #endregion
	    
	    #region CobrosRubros CRUD Operations
	
	    /// <summary>
	    /// Returns all cobrosrubros.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobrosRubroDto> ReadCobrosRubros();
	
	    /// <summary>
	    /// Returns a specified amount of cobrosrubros from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobrosRubroDto> ReadCobrosRubrosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all cobrosrubros filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobrosRubroDto> ReadCobrosRubrosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of cobrosrubros from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobrosRubroDto> ReadCobrosRubrosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a cobrosrubro with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CobrosRubroDto ReadCobrosRubro(string dtoKey);
	
	    /// <summary>
	    /// Returns all cobrosrubros count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CobrosRubrosCount();
	
	    /// <summary>
	    /// Returns all cobrosrubros count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CobrosRubrosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new cobrosrubro from the given dto object into the database.
	    /// </summary>
	    /// <param name="cobrosrubro">The dto object.</param>
	    /// <returns>The dto key of the newly created cobrosrubro.</returns>
	    [OperationContract]
	    string CreateCobrosRubro(CobrosRubroDto cobrosrubro);
	
	    /// <summary>
	    /// Updates cobrosrubro in the database from the given dto object.
	    /// </summary>
	    /// <param name="cobrosrubro">The dto object.</param>
	    [OperationContract]
	    void UpdateCobrosRubro(CobrosRubroDto cobrosrubro);
	
	    /// <summary>
	    /// Update an existing cobrosrubros in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cobrosrubros">The dto object list.</param>
	    [OperationContract]
	    void UpdateCobrosRubros(IEnumerable<CobrosRubroDto> cobrosrubros);
	
	    /// <summary>
	    /// Deletes cobrosrubro from the database by the given dto object.
	    /// </summary>
	    /// <param name="cobrosrubro">The dto object.</param>
	    [OperationContract]
	    void DeleteCobrosRubro(CobrosRubroDto cobrosrubro);
	
	    /// <summary>
	    /// Delete cobrosrubros from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cobrosrubros">The dto object list.</param>
	    [OperationContract]
	    void DeleteCobrosRubros(IEnumerable<CobrosRubroDto> cobrosrubros);
	    
	    #endregion
	    
	    #region CobroTransaccions CRUD Operations
	
	    /// <summary>
	    /// Returns all cobrotransaccions.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobroTransaccionDto> ReadCobroTransaccions();
	
	    /// <summary>
	    /// Returns a specified amount of cobrotransaccions from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobroTransaccionDto> ReadCobroTransaccionsPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all cobrotransaccions filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobroTransaccionDto> ReadCobroTransaccionsFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of cobrotransaccions from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CobroTransaccionDto> ReadCobroTransaccionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a cobrotransaccion with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CobroTransaccionDto ReadCobroTransaccion(string dtoKey);
	
	    /// <summary>
	    /// Returns all cobrotransaccions count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CobroTransaccionsCount();
	
	    /// <summary>
	    /// Returns all cobrotransaccions count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CobroTransaccionsCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new cobrotransaccion from the given dto object into the database.
	    /// </summary>
	    /// <param name="cobrotransaccion">The dto object.</param>
	    /// <returns>The dto key of the newly created cobrotransaccion.</returns>
	    [OperationContract]
	    string CreateCobroTransaccion(CobroTransaccionDto cobrotransaccion);
	
	    /// <summary>
	    /// Updates cobrotransaccion in the database from the given dto object.
	    /// </summary>
	    /// <param name="cobrotransaccion">The dto object.</param>
	    [OperationContract]
	    void UpdateCobroTransaccion(CobroTransaccionDto cobrotransaccion);
	
	    /// <summary>
	    /// Update an existing cobrotransaccions in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cobrotransaccions">The dto object list.</param>
	    [OperationContract]
	    void UpdateCobroTransaccions(IEnumerable<CobroTransaccionDto> cobrotransaccions);
	
	    /// <summary>
	    /// Deletes cobrotransaccion from the database by the given dto object.
	    /// </summary>
	    /// <param name="cobrotransaccion">The dto object.</param>
	    [OperationContract]
	    void DeleteCobroTransaccion(CobroTransaccionDto cobrotransaccion);
	
	    /// <summary>
	    /// Delete cobrotransaccions from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cobrotransaccions">The dto object list.</param>
	    [OperationContract]
	    void DeleteCobroTransaccions(IEnumerable<CobroTransaccionDto> cobrotransaccions);
	    
	    #endregion
	    
	    #region Coeficientes CRUD Operations
	
	    /// <summary>
	    /// Returns all coeficientes.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CoeficienteDto> ReadCoeficientes();
	
	    /// <summary>
	    /// Returns a specified amount of coeficientes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CoeficienteDto> ReadCoeficientesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all coeficientes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CoeficienteDto> ReadCoeficientesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of coeficientes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CoeficienteDto> ReadCoeficientesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a coeficiente with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CoeficienteDto ReadCoeficiente(string dtoKey);
	
	    /// <summary>
	    /// Returns all coeficientes count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CoeficientesCount();
	
	    /// <summary>
	    /// Returns all coeficientes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CoeficientesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new coeficiente from the given dto object into the database.
	    /// </summary>
	    /// <param name="coeficiente">The dto object.</param>
	    /// <returns>The dto key of the newly created coeficiente.</returns>
	    [OperationContract]
	    string CreateCoeficiente(CoeficienteDto coeficiente);
	
	    /// <summary>
	    /// Updates coeficiente in the database from the given dto object.
	    /// </summary>
	    /// <param name="coeficiente">The dto object.</param>
	    [OperationContract]
	    void UpdateCoeficiente(CoeficienteDto coeficiente);
	
	    /// <summary>
	    /// Update an existing coeficientes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="coeficientes">The dto object list.</param>
	    [OperationContract]
	    void UpdateCoeficientes(IEnumerable<CoeficienteDto> coeficientes);
	
	    /// <summary>
	    /// Deletes coeficiente from the database by the given dto object.
	    /// </summary>
	    /// <param name="coeficiente">The dto object.</param>
	    [OperationContract]
	    void DeleteCoeficiente(CoeficienteDto coeficiente);
	
	    /// <summary>
	    /// Delete coeficientes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="coeficientes">The dto object list.</param>
	    [OperationContract]
	    void DeleteCoeficientes(IEnumerable<CoeficienteDto> coeficientes);
	    
	    #endregion
	    
	    #region CoeficienteElementos CRUD Operations
	
	    /// <summary>
	    /// Returns all coeficienteelementos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CoeficienteElementoDto> ReadCoeficienteElementos();
	
	    /// <summary>
	    /// Returns a specified amount of coeficienteelementos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CoeficienteElementoDto> ReadCoeficienteElementosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all coeficienteelementos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CoeficienteElementoDto> ReadCoeficienteElementosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of coeficienteelementos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CoeficienteElementoDto> ReadCoeficienteElementosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a coeficienteelemento with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CoeficienteElementoDto ReadCoeficienteElemento(string dtoKey);
	
	    /// <summary>
	    /// Returns all coeficienteelementos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CoeficienteElementosCount();
	
	    /// <summary>
	    /// Returns all coeficienteelementos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CoeficienteElementosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new coeficienteelemento from the given dto object into the database.
	    /// </summary>
	    /// <param name="coeficienteelemento">The dto object.</param>
	    /// <returns>The dto key of the newly created coeficienteelemento.</returns>
	    [OperationContract]
	    string CreateCoeficienteElemento(CoeficienteElementoDto coeficienteelemento);
	
	    /// <summary>
	    /// Updates coeficienteelemento in the database from the given dto object.
	    /// </summary>
	    /// <param name="coeficienteelemento">The dto object.</param>
	    [OperationContract]
	    void UpdateCoeficienteElemento(CoeficienteElementoDto coeficienteelemento);
	
	    /// <summary>
	    /// Update an existing coeficienteelementos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="coeficienteelementos">The dto object list.</param>
	    [OperationContract]
	    void UpdateCoeficienteElementos(IEnumerable<CoeficienteElementoDto> coeficienteelementos);
	
	    /// <summary>
	    /// Deletes coeficienteelemento from the database by the given dto object.
	    /// </summary>
	    /// <param name="coeficienteelemento">The dto object.</param>
	    [OperationContract]
	    void DeleteCoeficienteElemento(CoeficienteElementoDto coeficienteelemento);
	
	    /// <summary>
	    /// Delete coeficienteelementos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="coeficienteelementos">The dto object list.</param>
	    [OperationContract]
	    void DeleteCoeficienteElementos(IEnumerable<CoeficienteElementoDto> coeficienteelementos);
	    
	    #endregion
	    
	    #region Comandos CRUD Operations
	
	    /// <summary>
	    /// Returns all comandos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ComandoDto> ReadComandos();
	
	    /// <summary>
	    /// Returns a specified amount of comandos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ComandoDto> ReadComandosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all comandos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ComandoDto> ReadComandosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of comandos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ComandoDto> ReadComandosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a comando with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ComandoDto ReadComando(string dtoKey);
	
	    /// <summary>
	    /// Returns all comandos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ComandosCount();
	
	    /// <summary>
	    /// Returns all comandos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ComandosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new comando from the given dto object into the database.
	    /// </summary>
	    /// <param name="comando">The dto object.</param>
	    /// <returns>The dto key of the newly created comando.</returns>
	    [OperationContract]
	    string CreateComando(ComandoDto comando);
	
	    /// <summary>
	    /// Updates comando in the database from the given dto object.
	    /// </summary>
	    /// <param name="comando">The dto object.</param>
	    [OperationContract]
	    void UpdateComando(ComandoDto comando);
	
	    /// <summary>
	    /// Update an existing comandos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="comandos">The dto object list.</param>
	    [OperationContract]
	    void UpdateComandos(IEnumerable<ComandoDto> comandos);
	
	    /// <summary>
	    /// Deletes comando from the database by the given dto object.
	    /// </summary>
	    /// <param name="comando">The dto object.</param>
	    [OperationContract]
	    void DeleteComando(ComandoDto comando);
	
	    /// <summary>
	    /// Delete comandos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="comandos">The dto object list.</param>
	    [OperationContract]
	    void DeleteComandos(IEnumerable<ComandoDto> comandos);
	    
	    #endregion
	    
	    #region Conceptos CRUD Operations
	
	    /// <summary>
	    /// Returns all conceptos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConceptoDto> ReadConceptos();
	
	    /// <summary>
	    /// Returns a specified amount of conceptos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConceptoDto> ReadConceptosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all conceptos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConceptoDto> ReadConceptosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of conceptos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConceptoDto> ReadConceptosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a concepto with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ConceptoDto ReadConcepto(string dtoKey);
	
	    /// <summary>
	    /// Returns all conceptos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ConceptosCount();
	
	    /// <summary>
	    /// Returns all conceptos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ConceptosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new concepto from the given dto object into the database.
	    /// </summary>
	    /// <param name="concepto">The dto object.</param>
	    /// <returns>The dto key of the newly created concepto.</returns>
	    [OperationContract]
	    string CreateConcepto(ConceptoDto concepto);
	
	    /// <summary>
	    /// Updates concepto in the database from the given dto object.
	    /// </summary>
	    /// <param name="concepto">The dto object.</param>
	    [OperationContract]
	    void UpdateConcepto(ConceptoDto concepto);
	
	    /// <summary>
	    /// Update an existing conceptos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="conceptos">The dto object list.</param>
	    [OperationContract]
	    void UpdateConceptos(IEnumerable<ConceptoDto> conceptos);
	
	    /// <summary>
	    /// Deletes concepto from the database by the given dto object.
	    /// </summary>
	    /// <param name="concepto">The dto object.</param>
	    [OperationContract]
	    void DeleteConcepto(ConceptoDto concepto);
	
	    /// <summary>
	    /// Delete conceptos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="conceptos">The dto object list.</param>
	    [OperationContract]
	    void DeleteConceptos(IEnumerable<ConceptoDto> conceptos);
	    
	    #endregion
	    
	    #region ConceptosDocumentos CRUD Operations
	
	    /// <summary>
	    /// Returns all conceptosdocumentos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConceptosDocumentoDto> ReadConceptosDocumentos();
	
	    /// <summary>
	    /// Returns a specified amount of conceptosdocumentos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConceptosDocumentoDto> ReadConceptosDocumentosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all conceptosdocumentos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConceptosDocumentoDto> ReadConceptosDocumentosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of conceptosdocumentos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConceptosDocumentoDto> ReadConceptosDocumentosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a conceptosdocumento with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ConceptosDocumentoDto ReadConceptosDocumento(string dtoKey);
	
	    /// <summary>
	    /// Returns all conceptosdocumentos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ConceptosDocumentosCount();
	
	    /// <summary>
	    /// Returns all conceptosdocumentos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ConceptosDocumentosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new conceptosdocumento from the given dto object into the database.
	    /// </summary>
	    /// <param name="conceptosdocumento">The dto object.</param>
	    /// <returns>The dto key of the newly created conceptosdocumento.</returns>
	    [OperationContract]
	    string CreateConceptosDocumento(ConceptosDocumentoDto conceptosdocumento);
	
	    /// <summary>
	    /// Updates conceptosdocumento in the database from the given dto object.
	    /// </summary>
	    /// <param name="conceptosdocumento">The dto object.</param>
	    [OperationContract]
	    void UpdateConceptosDocumento(ConceptosDocumentoDto conceptosdocumento);
	
	    /// <summary>
	    /// Update an existing conceptosdocumentos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="conceptosdocumentos">The dto object list.</param>
	    [OperationContract]
	    void UpdateConceptosDocumentos(IEnumerable<ConceptosDocumentoDto> conceptosdocumentos);
	
	    /// <summary>
	    /// Deletes conceptosdocumento from the database by the given dto object.
	    /// </summary>
	    /// <param name="conceptosdocumento">The dto object.</param>
	    [OperationContract]
	    void DeleteConceptosDocumento(ConceptosDocumentoDto conceptosdocumento);
	
	    /// <summary>
	    /// Delete conceptosdocumentos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="conceptosdocumentos">The dto object list.</param>
	    [OperationContract]
	    void DeleteConceptosDocumentos(IEnumerable<ConceptosDocumentoDto> conceptosdocumentos);
	    
	    #endregion
	    
	    #region ConceptosEmisions CRUD Operations
	
	    /// <summary>
	    /// Returns all conceptosemisions.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConceptosEmisionDto> ReadConceptosEmisions();
	
	    /// <summary>
	    /// Returns a specified amount of conceptosemisions from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConceptosEmisionDto> ReadConceptosEmisionsPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all conceptosemisions filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConceptosEmisionDto> ReadConceptosEmisionsFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of conceptosemisions from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConceptosEmisionDto> ReadConceptosEmisionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a conceptosemision with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ConceptosEmisionDto ReadConceptosEmision(string dtoKey);
	
	    /// <summary>
	    /// Returns all conceptosemisions count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ConceptosEmisionsCount();
	
	    /// <summary>
	    /// Returns all conceptosemisions count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ConceptosEmisionsCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new conceptosemision from the given dto object into the database.
	    /// </summary>
	    /// <param name="conceptosemision">The dto object.</param>
	    /// <returns>The dto key of the newly created conceptosemision.</returns>
	    [OperationContract]
	    string CreateConceptosEmision(ConceptosEmisionDto conceptosemision);
	
	    /// <summary>
	    /// Updates conceptosemision in the database from the given dto object.
	    /// </summary>
	    /// <param name="conceptosemision">The dto object.</param>
	    [OperationContract]
	    void UpdateConceptosEmision(ConceptosEmisionDto conceptosemision);
	
	    /// <summary>
	    /// Update an existing conceptosemisions in the database from the given dto object list.
	    /// </summary>
	    /// <param name="conceptosemisions">The dto object list.</param>
	    [OperationContract]
	    void UpdateConceptosEmisions(IEnumerable<ConceptosEmisionDto> conceptosemisions);
	
	    /// <summary>
	    /// Deletes conceptosemision from the database by the given dto object.
	    /// </summary>
	    /// <param name="conceptosemision">The dto object.</param>
	    [OperationContract]
	    void DeleteConceptosEmision(ConceptosEmisionDto conceptosemision);
	
	    /// <summary>
	    /// Delete conceptosemisions from the database by the given dto object list.
	    /// </summary>
	    /// <param name="conceptosemisions">The dto object list.</param>
	    [OperationContract]
	    void DeleteConceptosEmisions(IEnumerable<ConceptosEmisionDto> conceptosemisions);
	    
	    #endregion
	    
	    #region ConceptosRubros CRUD Operations
	
	    /// <summary>
	    /// Returns all conceptosrubros.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConceptosRubroDto> ReadConceptosRubros();
	
	    /// <summary>
	    /// Returns a specified amount of conceptosrubros from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConceptosRubroDto> ReadConceptosRubrosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all conceptosrubros filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConceptosRubroDto> ReadConceptosRubrosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of conceptosrubros from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConceptosRubroDto> ReadConceptosRubrosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a conceptosrubro with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ConceptosRubroDto ReadConceptosRubro(string dtoKey);
	
	    /// <summary>
	    /// Returns all conceptosrubros count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ConceptosRubrosCount();
	
	    /// <summary>
	    /// Returns all conceptosrubros count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ConceptosRubrosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new conceptosrubro from the given dto object into the database.
	    /// </summary>
	    /// <param name="conceptosrubro">The dto object.</param>
	    /// <returns>The dto key of the newly created conceptosrubro.</returns>
	    [OperationContract]
	    string CreateConceptosRubro(ConceptosRubroDto conceptosrubro);
	
	    /// <summary>
	    /// Updates conceptosrubro in the database from the given dto object.
	    /// </summary>
	    /// <param name="conceptosrubro">The dto object.</param>
	    [OperationContract]
	    void UpdateConceptosRubro(ConceptosRubroDto conceptosrubro);
	
	    /// <summary>
	    /// Update an existing conceptosrubros in the database from the given dto object list.
	    /// </summary>
	    /// <param name="conceptosrubros">The dto object list.</param>
	    [OperationContract]
	    void UpdateConceptosRubros(IEnumerable<ConceptosRubroDto> conceptosrubros);
	
	    /// <summary>
	    /// Deletes conceptosrubro from the database by the given dto object.
	    /// </summary>
	    /// <param name="conceptosrubro">The dto object.</param>
	    [OperationContract]
	    void DeleteConceptosRubro(ConceptosRubroDto conceptosrubro);
	
	    /// <summary>
	    /// Delete conceptosrubros from the database by the given dto object list.
	    /// </summary>
	    /// <param name="conceptosrubros">The dto object list.</param>
	    [OperationContract]
	    void DeleteConceptosRubros(IEnumerable<ConceptosRubroDto> conceptosrubros);
	    
	    #endregion
	    
	    #region Contribuyentes CRUD Operations
	
	    /// <summary>
	    /// Returns all contribuyentes.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ContribuyenteDto> ReadContribuyentes();
	
	    /// <summary>
	    /// Returns a specified amount of contribuyentes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ContribuyenteDto> ReadContribuyentesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all contribuyentes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ContribuyenteDto> ReadContribuyentesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of contribuyentes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ContribuyenteDto> ReadContribuyentesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a contribuyente with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ContribuyenteDto ReadContribuyente(string dtoKey);
	
	    /// <summary>
	    /// Returns all contribuyentes count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ContribuyentesCount();
	
	    /// <summary>
	    /// Returns all contribuyentes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ContribuyentesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new contribuyente from the given dto object into the database.
	    /// </summary>
	    /// <param name="contribuyente">The dto object.</param>
	    /// <returns>The dto key of the newly created contribuyente.</returns>
	    [OperationContract]
	    string CreateContribuyente(ContribuyenteDto contribuyente);
	
	    /// <summary>
	    /// Updates contribuyente in the database from the given dto object.
	    /// </summary>
	    /// <param name="contribuyente">The dto object.</param>
	    [OperationContract]
	    void UpdateContribuyente(ContribuyenteDto contribuyente);
	
	    /// <summary>
	    /// Update an existing contribuyentes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="contribuyentes">The dto object list.</param>
	    [OperationContract]
	    void UpdateContribuyentes(IEnumerable<ContribuyenteDto> contribuyentes);
	
	    /// <summary>
	    /// Deletes contribuyente from the database by the given dto object.
	    /// </summary>
	    /// <param name="contribuyente">The dto object.</param>
	    [OperationContract]
	    void DeleteContribuyente(ContribuyenteDto contribuyente);
	
	    /// <summary>
	    /// Delete contribuyentes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="contribuyentes">The dto object list.</param>
	    [OperationContract]
	    void DeleteContribuyentes(IEnumerable<ContribuyenteDto> contribuyentes);
	    
	    #endregion
	    
	    #region ContribuyentesRebajas CRUD Operations
	
	    /// <summary>
	    /// Returns all contribuyentesrebajas.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ContribuyentesRebajaDto> ReadContribuyentesRebajas();
	
	    /// <summary>
	    /// Returns a specified amount of contribuyentesrebajas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ContribuyentesRebajaDto> ReadContribuyentesRebajasPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all contribuyentesrebajas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ContribuyentesRebajaDto> ReadContribuyentesRebajasFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of contribuyentesrebajas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ContribuyentesRebajaDto> ReadContribuyentesRebajasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a contribuyentesrebaja with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ContribuyentesRebajaDto ReadContribuyentesRebaja(string dtoKey);
	
	    /// <summary>
	    /// Returns all contribuyentesrebajas count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ContribuyentesRebajasCount();
	
	    /// <summary>
	    /// Returns all contribuyentesrebajas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ContribuyentesRebajasCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new contribuyentesrebaja from the given dto object into the database.
	    /// </summary>
	    /// <param name="contribuyentesrebaja">The dto object.</param>
	    /// <returns>The dto key of the newly created contribuyentesrebaja.</returns>
	    [OperationContract]
	    string CreateContribuyentesRebaja(ContribuyentesRebajaDto contribuyentesrebaja);
	
	    /// <summary>
	    /// Updates contribuyentesrebaja in the database from the given dto object.
	    /// </summary>
	    /// <param name="contribuyentesrebaja">The dto object.</param>
	    [OperationContract]
	    void UpdateContribuyentesRebaja(ContribuyentesRebajaDto contribuyentesrebaja);
	
	    /// <summary>
	    /// Update an existing contribuyentesrebajas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="contribuyentesrebajas">The dto object list.</param>
	    [OperationContract]
	    void UpdateContribuyentesRebajas(IEnumerable<ContribuyentesRebajaDto> contribuyentesrebajas);
	
	    /// <summary>
	    /// Deletes contribuyentesrebaja from the database by the given dto object.
	    /// </summary>
	    /// <param name="contribuyentesrebaja">The dto object.</param>
	    [OperationContract]
	    void DeleteContribuyentesRebaja(ContribuyentesRebajaDto contribuyentesrebaja);
	
	    /// <summary>
	    /// Delete contribuyentesrebajas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="contribuyentesrebajas">The dto object list.</param>
	    [OperationContract]
	    void DeleteContribuyentesRebajas(IEnumerable<ContribuyentesRebajaDto> contribuyentesrebajas);
	    
	    #endregion
	    
	    #region Convenios CRUD Operations
	
	    /// <summary>
	    /// Returns all convenios.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConvenioDto> ReadConvenios();
	
	    /// <summary>
	    /// Returns a specified amount of convenios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConvenioDto> ReadConveniosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all convenios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConvenioDto> ReadConveniosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of convenios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConvenioDto> ReadConveniosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a convenio with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ConvenioDto ReadConvenio(string dtoKey);
	
	    /// <summary>
	    /// Returns all convenios count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ConveniosCount();
	
	    /// <summary>
	    /// Returns all convenios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ConveniosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new convenio from the given dto object into the database.
	    /// </summary>
	    /// <param name="convenio">The dto object.</param>
	    /// <returns>The dto key of the newly created convenio.</returns>
	    [OperationContract]
	    string CreateConvenio(ConvenioDto convenio);
	
	    /// <summary>
	    /// Updates convenio in the database from the given dto object.
	    /// </summary>
	    /// <param name="convenio">The dto object.</param>
	    [OperationContract]
	    void UpdateConvenio(ConvenioDto convenio);
	
	    /// <summary>
	    /// Update an existing convenios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="convenios">The dto object list.</param>
	    [OperationContract]
	    void UpdateConvenios(IEnumerable<ConvenioDto> convenios);
	
	    /// <summary>
	    /// Deletes convenio from the database by the given dto object.
	    /// </summary>
	    /// <param name="convenio">The dto object.</param>
	    [OperationContract]
	    void DeleteConvenio(ConvenioDto convenio);
	
	    /// <summary>
	    /// Delete convenios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="convenios">The dto object list.</param>
	    [OperationContract]
	    void DeleteConvenios(IEnumerable<ConvenioDto> convenios);
	    
	    #endregion
	    
	    #region ConveniosDividendos CRUD Operations
	
	    /// <summary>
	    /// Returns all conveniosdividendos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConveniosDividendoDto> ReadConveniosDividendos();
	
	    /// <summary>
	    /// Returns a specified amount of conveniosdividendos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConveniosDividendoDto> ReadConveniosDividendosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all conveniosdividendos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConveniosDividendoDto> ReadConveniosDividendosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of conveniosdividendos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConveniosDividendoDto> ReadConveniosDividendosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a conveniosdividendo with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ConveniosDividendoDto ReadConveniosDividendo(string dtoKey);
	
	    /// <summary>
	    /// Returns all conveniosdividendos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ConveniosDividendosCount();
	
	    /// <summary>
	    /// Returns all conveniosdividendos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ConveniosDividendosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new conveniosdividendo from the given dto object into the database.
	    /// </summary>
	    /// <param name="conveniosdividendo">The dto object.</param>
	    /// <returns>The dto key of the newly created conveniosdividendo.</returns>
	    [OperationContract]
	    string CreateConveniosDividendo(ConveniosDividendoDto conveniosdividendo);
	
	    /// <summary>
	    /// Updates conveniosdividendo in the database from the given dto object.
	    /// </summary>
	    /// <param name="conveniosdividendo">The dto object.</param>
	    [OperationContract]
	    void UpdateConveniosDividendo(ConveniosDividendoDto conveniosdividendo);
	
	    /// <summary>
	    /// Update an existing conveniosdividendos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="conveniosdividendos">The dto object list.</param>
	    [OperationContract]
	    void UpdateConveniosDividendos(IEnumerable<ConveniosDividendoDto> conveniosdividendos);
	
	    /// <summary>
	    /// Deletes conveniosdividendo from the database by the given dto object.
	    /// </summary>
	    /// <param name="conveniosdividendo">The dto object.</param>
	    [OperationContract]
	    void DeleteConveniosDividendo(ConveniosDividendoDto conveniosdividendo);
	
	    /// <summary>
	    /// Delete conveniosdividendos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="conveniosdividendos">The dto object list.</param>
	    [OperationContract]
	    void DeleteConveniosDividendos(IEnumerable<ConveniosDividendoDto> conveniosdividendos);
	    
	    #endregion
	    
	    #region ConvenioTransaccions CRUD Operations
	
	    /// <summary>
	    /// Returns all conveniotransaccions.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConvenioTransaccionDto> ReadConvenioTransaccions();
	
	    /// <summary>
	    /// Returns a specified amount of conveniotransaccions from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConvenioTransaccionDto> ReadConvenioTransaccionsPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all conveniotransaccions filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConvenioTransaccionDto> ReadConvenioTransaccionsFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of conveniotransaccions from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ConvenioTransaccionDto> ReadConvenioTransaccionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a conveniotransaccion with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ConvenioTransaccionDto ReadConvenioTransaccion(string dtoKey);
	
	    /// <summary>
	    /// Returns all conveniotransaccions count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ConvenioTransaccionsCount();
	
	    /// <summary>
	    /// Returns all conveniotransaccions count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ConvenioTransaccionsCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new conveniotransaccion from the given dto object into the database.
	    /// </summary>
	    /// <param name="conveniotransaccion">The dto object.</param>
	    /// <returns>The dto key of the newly created conveniotransaccion.</returns>
	    [OperationContract]
	    string CreateConvenioTransaccion(ConvenioTransaccionDto conveniotransaccion);
	
	    /// <summary>
	    /// Updates conveniotransaccion in the database from the given dto object.
	    /// </summary>
	    /// <param name="conveniotransaccion">The dto object.</param>
	    [OperationContract]
	    void UpdateConvenioTransaccion(ConvenioTransaccionDto conveniotransaccion);
	
	    /// <summary>
	    /// Update an existing conveniotransaccions in the database from the given dto object list.
	    /// </summary>
	    /// <param name="conveniotransaccions">The dto object list.</param>
	    [OperationContract]
	    void UpdateConvenioTransaccions(IEnumerable<ConvenioTransaccionDto> conveniotransaccions);
	
	    /// <summary>
	    /// Deletes conveniotransaccion from the database by the given dto object.
	    /// </summary>
	    /// <param name="conveniotransaccion">The dto object.</param>
	    [OperationContract]
	    void DeleteConvenioTransaccion(ConvenioTransaccionDto conveniotransaccion);
	
	    /// <summary>
	    /// Delete conveniotransaccions from the database by the given dto object list.
	    /// </summary>
	    /// <param name="conveniotransaccions">The dto object list.</param>
	    [OperationContract]
	    void DeleteConvenioTransaccions(IEnumerable<ConvenioTransaccionDto> conveniotransaccions);
	    
	    #endregion
	    
	    #region CuentaBancarias CRUD Operations
	
	    /// <summary>
	    /// Returns all cuentabancarias.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CuentaBancariaDto> ReadCuentaBancarias();
	
	    /// <summary>
	    /// Returns a specified amount of cuentabancarias from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CuentaBancariaDto> ReadCuentaBancariasPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all cuentabancarias filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CuentaBancariaDto> ReadCuentaBancariasFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of cuentabancarias from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<CuentaBancariaDto> ReadCuentaBancariasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a cuentabancaria with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    CuentaBancariaDto ReadCuentaBancaria(string dtoKey);
	
	    /// <summary>
	    /// Returns all cuentabancarias count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int CuentaBancariasCount();
	
	    /// <summary>
	    /// Returns all cuentabancarias count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int CuentaBancariasCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new cuentabancaria from the given dto object into the database.
	    /// </summary>
	    /// <param name="cuentabancaria">The dto object.</param>
	    /// <returns>The dto key of the newly created cuentabancaria.</returns>
	    [OperationContract]
	    string CreateCuentaBancaria(CuentaBancariaDto cuentabancaria);
	
	    /// <summary>
	    /// Updates cuentabancaria in the database from the given dto object.
	    /// </summary>
	    /// <param name="cuentabancaria">The dto object.</param>
	    [OperationContract]
	    void UpdateCuentaBancaria(CuentaBancariaDto cuentabancaria);
	
	    /// <summary>
	    /// Update an existing cuentabancarias in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cuentabancarias">The dto object list.</param>
	    [OperationContract]
	    void UpdateCuentaBancarias(IEnumerable<CuentaBancariaDto> cuentabancarias);
	
	    /// <summary>
	    /// Deletes cuentabancaria from the database by the given dto object.
	    /// </summary>
	    /// <param name="cuentabancaria">The dto object.</param>
	    [OperationContract]
	    void DeleteCuentaBancaria(CuentaBancariaDto cuentabancaria);
	
	    /// <summary>
	    /// Delete cuentabancarias from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cuentabancarias">The dto object list.</param>
	    [OperationContract]
	    void DeleteCuentaBancarias(IEnumerable<CuentaBancariaDto> cuentabancarias);
	    
	    #endregion
	    
	    #region Funcions CRUD Operations
	
	    /// <summary>
	    /// Returns all funcions.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<FuncionDto> ReadFuncions();
	
	    /// <summary>
	    /// Returns a specified amount of funcions from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<FuncionDto> ReadFuncionsPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all funcions filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<FuncionDto> ReadFuncionsFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of funcions from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<FuncionDto> ReadFuncionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a funcion with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    FuncionDto ReadFuncion(string dtoKey);
	
	    /// <summary>
	    /// Returns all funcions count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int FuncionsCount();
	
	    /// <summary>
	    /// Returns all funcions count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int FuncionsCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new funcion from the given dto object into the database.
	    /// </summary>
	    /// <param name="funcion">The dto object.</param>
	    /// <returns>The dto key of the newly created funcion.</returns>
	    [OperationContract]
	    string CreateFuncion(FuncionDto funcion);
	
	    /// <summary>
	    /// Updates funcion in the database from the given dto object.
	    /// </summary>
	    /// <param name="funcion">The dto object.</param>
	    [OperationContract]
	    void UpdateFuncion(FuncionDto funcion);
	
	    /// <summary>
	    /// Update an existing funcions in the database from the given dto object list.
	    /// </summary>
	    /// <param name="funcions">The dto object list.</param>
	    [OperationContract]
	    void UpdateFuncions(IEnumerable<FuncionDto> funcions);
	
	    /// <summary>
	    /// Deletes funcion from the database by the given dto object.
	    /// </summary>
	    /// <param name="funcion">The dto object.</param>
	    [OperationContract]
	    void DeleteFuncion(FuncionDto funcion);
	
	    /// <summary>
	    /// Delete funcions from the database by the given dto object list.
	    /// </summary>
	    /// <param name="funcions">The dto object list.</param>
	    [OperationContract]
	    void DeleteFuncions(IEnumerable<FuncionDto> funcions);
	    
	    #endregion
	    
	    #region Mejoras CRUD Operations
	
	    /// <summary>
	    /// Returns all mejoras.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<MejoraDto> ReadMejoras();
	
	    /// <summary>
	    /// Returns a specified amount of mejoras from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<MejoraDto> ReadMejorasPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all mejoras filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<MejoraDto> ReadMejorasFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of mejoras from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<MejoraDto> ReadMejorasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a mejora with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    MejoraDto ReadMejora(string dtoKey);
	
	    /// <summary>
	    /// Returns all mejoras count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int MejorasCount();
	
	    /// <summary>
	    /// Returns all mejoras count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int MejorasCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new mejora from the given dto object into the database.
	    /// </summary>
	    /// <param name="mejora">The dto object.</param>
	    /// <returns>The dto key of the newly created mejora.</returns>
	    [OperationContract]
	    string CreateMejora(MejoraDto mejora);
	
	    /// <summary>
	    /// Updates mejora in the database from the given dto object.
	    /// </summary>
	    /// <param name="mejora">The dto object.</param>
	    [OperationContract]
	    void UpdateMejora(MejoraDto mejora);
	
	    /// <summary>
	    /// Update an existing mejoras in the database from the given dto object list.
	    /// </summary>
	    /// <param name="mejoras">The dto object list.</param>
	    [OperationContract]
	    void UpdateMejoras(IEnumerable<MejoraDto> mejoras);
	
	    /// <summary>
	    /// Deletes mejora from the database by the given dto object.
	    /// </summary>
	    /// <param name="mejora">The dto object.</param>
	    [OperationContract]
	    void DeleteMejora(MejoraDto mejora);
	
	    /// <summary>
	    /// Delete mejoras from the database by the given dto object list.
	    /// </summary>
	    /// <param name="mejoras">The dto object list.</param>
	    [OperationContract]
	    void DeleteMejoras(IEnumerable<MejoraDto> mejoras);
	    
	    #endregion
	    
	    #region MejoraElementos CRUD Operations
	
	    /// <summary>
	    /// Returns all mejoraelementos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<MejoraElementoDto> ReadMejoraElementos();
	
	    /// <summary>
	    /// Returns a specified amount of mejoraelementos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<MejoraElementoDto> ReadMejoraElementosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all mejoraelementos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<MejoraElementoDto> ReadMejoraElementosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of mejoraelementos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<MejoraElementoDto> ReadMejoraElementosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a mejoraelemento with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    MejoraElementoDto ReadMejoraElemento(string dtoKey);
	
	    /// <summary>
	    /// Returns all mejoraelementos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int MejoraElementosCount();
	
	    /// <summary>
	    /// Returns all mejoraelementos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int MejoraElementosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new mejoraelemento from the given dto object into the database.
	    /// </summary>
	    /// <param name="mejoraelemento">The dto object.</param>
	    /// <returns>The dto key of the newly created mejoraelemento.</returns>
	    [OperationContract]
	    string CreateMejoraElemento(MejoraElementoDto mejoraelemento);
	
	    /// <summary>
	    /// Updates mejoraelemento in the database from the given dto object.
	    /// </summary>
	    /// <param name="mejoraelemento">The dto object.</param>
	    [OperationContract]
	    void UpdateMejoraElemento(MejoraElementoDto mejoraelemento);
	
	    /// <summary>
	    /// Update an existing mejoraelementos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="mejoraelementos">The dto object list.</param>
	    [OperationContract]
	    void UpdateMejoraElementos(IEnumerable<MejoraElementoDto> mejoraelementos);
	
	    /// <summary>
	    /// Deletes mejoraelemento from the database by the given dto object.
	    /// </summary>
	    /// <param name="mejoraelemento">The dto object.</param>
	    [OperationContract]
	    void DeleteMejoraElemento(MejoraElementoDto mejoraelemento);
	
	    /// <summary>
	    /// Delete mejoraelementos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="mejoraelementos">The dto object list.</param>
	    [OperationContract]
	    void DeleteMejoraElementos(IEnumerable<MejoraElementoDto> mejoraelementos);
	    
	    #endregion
	    
	    #region Modulos CRUD Operations
	
	    /// <summary>
	    /// Returns all modulos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ModuloDto> ReadModulos();
	
	    /// <summary>
	    /// Returns a specified amount of modulos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ModuloDto> ReadModulosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all modulos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ModuloDto> ReadModulosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of modulos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ModuloDto> ReadModulosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a modulo with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ModuloDto ReadModulo(string dtoKey);
	
	    /// <summary>
	    /// Returns all modulos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ModulosCount();
	
	    /// <summary>
	    /// Returns all modulos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ModulosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new modulo from the given dto object into the database.
	    /// </summary>
	    /// <param name="modulo">The dto object.</param>
	    /// <returns>The dto key of the newly created modulo.</returns>
	    [OperationContract]
	    string CreateModulo(ModuloDto modulo);
	
	    /// <summary>
	    /// Updates modulo in the database from the given dto object.
	    /// </summary>
	    /// <param name="modulo">The dto object.</param>
	    [OperationContract]
	    void UpdateModulo(ModuloDto modulo);
	
	    /// <summary>
	    /// Update an existing modulos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="modulos">The dto object list.</param>
	    [OperationContract]
	    void UpdateModulos(IEnumerable<ModuloDto> modulos);
	
	    /// <summary>
	    /// Deletes modulo from the database by the given dto object.
	    /// </summary>
	    /// <param name="modulo">The dto object.</param>
	    [OperationContract]
	    void DeleteModulo(ModuloDto modulo);
	
	    /// <summary>
	    /// Delete modulos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="modulos">The dto object list.</param>
	    [OperationContract]
	    void DeleteModulos(IEnumerable<ModuloDto> modulos);
	    
	    #endregion
	    
	    #region ModuloUsuarios CRUD Operations
	
	    /// <summary>
	    /// Returns all modulousuarios.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ModuloUsuarioDto> ReadModuloUsuarios();
	
	    /// <summary>
	    /// Returns a specified amount of modulousuarios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ModuloUsuarioDto> ReadModuloUsuariosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all modulousuarios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ModuloUsuarioDto> ReadModuloUsuariosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of modulousuarios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ModuloUsuarioDto> ReadModuloUsuariosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a modulousuario with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ModuloUsuarioDto ReadModuloUsuario(string dtoKey);
	
	    /// <summary>
	    /// Returns all modulousuarios count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ModuloUsuariosCount();
	
	    /// <summary>
	    /// Returns all modulousuarios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ModuloUsuariosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new modulousuario from the given dto object into the database.
	    /// </summary>
	    /// <param name="modulousuario">The dto object.</param>
	    /// <returns>The dto key of the newly created modulousuario.</returns>
	    [OperationContract]
	    string CreateModuloUsuario(ModuloUsuarioDto modulousuario);
	
	    /// <summary>
	    /// Updates modulousuario in the database from the given dto object.
	    /// </summary>
	    /// <param name="modulousuario">The dto object.</param>
	    [OperationContract]
	    void UpdateModuloUsuario(ModuloUsuarioDto modulousuario);
	
	    /// <summary>
	    /// Update an existing modulousuarios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="modulousuarios">The dto object list.</param>
	    [OperationContract]
	    void UpdateModuloUsuarios(IEnumerable<ModuloUsuarioDto> modulousuarios);
	
	    /// <summary>
	    /// Deletes modulousuario from the database by the given dto object.
	    /// </summary>
	    /// <param name="modulousuario">The dto object.</param>
	    [OperationContract]
	    void DeleteModuloUsuario(ModuloUsuarioDto modulousuario);
	
	    /// <summary>
	    /// Delete modulousuarios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="modulousuarios">The dto object list.</param>
	    [OperationContract]
	    void DeleteModuloUsuarios(IEnumerable<ModuloUsuarioDto> modulousuarios);
	    
	    #endregion
	    
	    #region Patentes CRUD Operations
	
	    /// <summary>
	    /// Returns all patentes.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PatenteDto> ReadPatentes();
	
	    /// <summary>
	    /// Returns a specified amount of patentes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PatenteDto> ReadPatentesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all patentes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PatenteDto> ReadPatentesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of patentes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PatenteDto> ReadPatentesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a patente with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    PatenteDto ReadPatente(string dtoKey);
	
	    /// <summary>
	    /// Returns all patentes count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int PatentesCount();
	
	    /// <summary>
	    /// Returns all patentes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int PatentesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new patente from the given dto object into the database.
	    /// </summary>
	    /// <param name="patente">The dto object.</param>
	    /// <returns>The dto key of the newly created patente.</returns>
	    [OperationContract]
	    string CreatePatente(PatenteDto patente);
	
	    /// <summary>
	    /// Updates patente in the database from the given dto object.
	    /// </summary>
	    /// <param name="patente">The dto object.</param>
	    [OperationContract]
	    void UpdatePatente(PatenteDto patente);
	
	    /// <summary>
	    /// Update an existing patentes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="patentes">The dto object list.</param>
	    [OperationContract]
	    void UpdatePatentes(IEnumerable<PatenteDto> patentes);
	
	    /// <summary>
	    /// Deletes patente from the database by the given dto object.
	    /// </summary>
	    /// <param name="patente">The dto object.</param>
	    [OperationContract]
	    void DeletePatente(PatenteDto patente);
	
	    /// <summary>
	    /// Delete patentes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="patentes">The dto object list.</param>
	    [OperationContract]
	    void DeletePatentes(IEnumerable<PatenteDto> patentes);
	    
	    #endregion
	    
	    #region PatentesComponentes CRUD Operations
	
	    /// <summary>
	    /// Returns all patentescomponentes.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PatentesComponenteDto> ReadPatentesComponentes();
	
	    /// <summary>
	    /// Returns a specified amount of patentescomponentes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PatentesComponenteDto> ReadPatentesComponentesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all patentescomponentes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PatentesComponenteDto> ReadPatentesComponentesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of patentescomponentes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PatentesComponenteDto> ReadPatentesComponentesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a patentescomponente with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    PatentesComponenteDto ReadPatentesComponente(string dtoKey);
	
	    /// <summary>
	    /// Returns all patentescomponentes count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int PatentesComponentesCount();
	
	    /// <summary>
	    /// Returns all patentescomponentes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int PatentesComponentesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new patentescomponente from the given dto object into the database.
	    /// </summary>
	    /// <param name="patentescomponente">The dto object.</param>
	    /// <returns>The dto key of the newly created patentescomponente.</returns>
	    [OperationContract]
	    string CreatePatentesComponente(PatentesComponenteDto patentescomponente);
	
	    /// <summary>
	    /// Updates patentescomponente in the database from the given dto object.
	    /// </summary>
	    /// <param name="patentescomponente">The dto object.</param>
	    [OperationContract]
	    void UpdatePatentesComponente(PatentesComponenteDto patentescomponente);
	
	    /// <summary>
	    /// Update an existing patentescomponentes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="patentescomponentes">The dto object list.</param>
	    [OperationContract]
	    void UpdatePatentesComponentes(IEnumerable<PatentesComponenteDto> patentescomponentes);
	
	    /// <summary>
	    /// Deletes patentescomponente from the database by the given dto object.
	    /// </summary>
	    /// <param name="patentescomponente">The dto object.</param>
	    [OperationContract]
	    void DeletePatentesComponente(PatentesComponenteDto patentescomponente);
	
	    /// <summary>
	    /// Delete patentescomponentes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="patentescomponentes">The dto object list.</param>
	    [OperationContract]
	    void DeletePatentesComponentes(IEnumerable<PatentesComponenteDto> patentescomponentes);
	    
	    #endregion
	    
	    #region Planillas CRUD Operations
	
	    /// <summary>
	    /// Returns all planillas.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PlanillaDto> ReadPlanillas();
	
	    /// <summary>
	    /// Returns a specified amount of planillas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PlanillaDto> ReadPlanillasPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all planillas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PlanillaDto> ReadPlanillasFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of planillas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PlanillaDto> ReadPlanillasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a planilla with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    PlanillaDto ReadPlanilla(string dtoKey);
	
	    /// <summary>
	    /// Returns all planillas count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int PlanillasCount();
	
	    /// <summary>
	    /// Returns all planillas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int PlanillasCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new planilla from the given dto object into the database.
	    /// </summary>
	    /// <param name="planilla">The dto object.</param>
	    /// <returns>The dto key of the newly created planilla.</returns>
	    [OperationContract]
	    string CreatePlanilla(PlanillaDto planilla);
	
	    /// <summary>
	    /// Updates planilla in the database from the given dto object.
	    /// </summary>
	    /// <param name="planilla">The dto object.</param>
	    [OperationContract]
	    void UpdatePlanilla(PlanillaDto planilla);
	
	    /// <summary>
	    /// Update an existing planillas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="planillas">The dto object list.</param>
	    [OperationContract]
	    void UpdatePlanillas(IEnumerable<PlanillaDto> planillas);
	
	    /// <summary>
	    /// Deletes planilla from the database by the given dto object.
	    /// </summary>
	    /// <param name="planilla">The dto object.</param>
	    [OperationContract]
	    void DeletePlanilla(PlanillaDto planilla);
	
	    /// <summary>
	    /// Delete planillas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="planillas">The dto object list.</param>
	    [OperationContract]
	    void DeletePlanillas(IEnumerable<PlanillaDto> planillas);
	    
	    #endregion
	    
	    #region PlanillaAtributos CRUD Operations
	
	    /// <summary>
	    /// Returns all planillaatributos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PlanillaAtributoDto> ReadPlanillaAtributos();
	
	    /// <summary>
	    /// Returns a specified amount of planillaatributos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PlanillaAtributoDto> ReadPlanillaAtributosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all planillaatributos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PlanillaAtributoDto> ReadPlanillaAtributosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of planillaatributos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PlanillaAtributoDto> ReadPlanillaAtributosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a planillaatributo with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    PlanillaAtributoDto ReadPlanillaAtributo(string dtoKey);
	
	    /// <summary>
	    /// Returns all planillaatributos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int PlanillaAtributosCount();
	
	    /// <summary>
	    /// Returns all planillaatributos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int PlanillaAtributosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new planillaatributo from the given dto object into the database.
	    /// </summary>
	    /// <param name="planillaatributo">The dto object.</param>
	    /// <returns>The dto key of the newly created planillaatributo.</returns>
	    [OperationContract]
	    string CreatePlanillaAtributo(PlanillaAtributoDto planillaatributo);
	
	    /// <summary>
	    /// Updates planillaatributo in the database from the given dto object.
	    /// </summary>
	    /// <param name="planillaatributo">The dto object.</param>
	    [OperationContract]
	    void UpdatePlanillaAtributo(PlanillaAtributoDto planillaatributo);
	
	    /// <summary>
	    /// Update an existing planillaatributos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="planillaatributos">The dto object list.</param>
	    [OperationContract]
	    void UpdatePlanillaAtributos(IEnumerable<PlanillaAtributoDto> planillaatributos);
	
	    /// <summary>
	    /// Deletes planillaatributo from the database by the given dto object.
	    /// </summary>
	    /// <param name="planillaatributo">The dto object.</param>
	    [OperationContract]
	    void DeletePlanillaAtributo(PlanillaAtributoDto planillaatributo);
	
	    /// <summary>
	    /// Delete planillaatributos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="planillaatributos">The dto object list.</param>
	    [OperationContract]
	    void DeletePlanillaAtributos(IEnumerable<PlanillaAtributoDto> planillaatributos);
	    
	    #endregion
	    
	    #region PlanillaRubros CRUD Operations
	
	    /// <summary>
	    /// Returns all planillarubros.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PlanillaRubroDto> ReadPlanillaRubros();
	
	    /// <summary>
	    /// Returns a specified amount of planillarubros from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PlanillaRubroDto> ReadPlanillaRubrosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all planillarubros filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PlanillaRubroDto> ReadPlanillaRubrosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of planillarubros from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PlanillaRubroDto> ReadPlanillaRubrosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a planillarubro with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    PlanillaRubroDto ReadPlanillaRubro(string dtoKey);
	
	    /// <summary>
	    /// Returns all planillarubros count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int PlanillaRubrosCount();
	
	    /// <summary>
	    /// Returns all planillarubros count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int PlanillaRubrosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new planillarubro from the given dto object into the database.
	    /// </summary>
	    /// <param name="planillarubro">The dto object.</param>
	    /// <returns>The dto key of the newly created planillarubro.</returns>
	    [OperationContract]
	    string CreatePlanillaRubro(PlanillaRubroDto planillarubro);
	
	    /// <summary>
	    /// Updates planillarubro in the database from the given dto object.
	    /// </summary>
	    /// <param name="planillarubro">The dto object.</param>
	    [OperationContract]
	    void UpdatePlanillaRubro(PlanillaRubroDto planillarubro);
	
	    /// <summary>
	    /// Update an existing planillarubros in the database from the given dto object list.
	    /// </summary>
	    /// <param name="planillarubros">The dto object list.</param>
	    [OperationContract]
	    void UpdatePlanillaRubros(IEnumerable<PlanillaRubroDto> planillarubros);
	
	    /// <summary>
	    /// Deletes planillarubro from the database by the given dto object.
	    /// </summary>
	    /// <param name="planillarubro">The dto object.</param>
	    [OperationContract]
	    void DeletePlanillaRubro(PlanillaRubroDto planillarubro);
	
	    /// <summary>
	    /// Delete planillarubros from the database by the given dto object list.
	    /// </summary>
	    /// <param name="planillarubros">The dto object list.</param>
	    [OperationContract]
	    void DeletePlanillaRubros(IEnumerable<PlanillaRubroDto> planillarubros);
	    
	    #endregion
	    
	    #region PlanillaSustitucions CRUD Operations
	
	    /// <summary>
	    /// Returns all planillasustitucions.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PlanillaSustitucionDto> ReadPlanillaSustitucions();
	
	    /// <summary>
	    /// Returns a specified amount of planillasustitucions from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PlanillaSustitucionDto> ReadPlanillaSustitucionsPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all planillasustitucions filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PlanillaSustitucionDto> ReadPlanillaSustitucionsFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of planillasustitucions from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PlanillaSustitucionDto> ReadPlanillaSustitucionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a planillasustitucion with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    PlanillaSustitucionDto ReadPlanillaSustitucion(string dtoKey);
	
	    /// <summary>
	    /// Returns all planillasustitucions count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int PlanillaSustitucionsCount();
	
	    /// <summary>
	    /// Returns all planillasustitucions count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int PlanillaSustitucionsCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new planillasustitucion from the given dto object into the database.
	    /// </summary>
	    /// <param name="planillasustitucion">The dto object.</param>
	    /// <returns>The dto key of the newly created planillasustitucion.</returns>
	    [OperationContract]
	    string CreatePlanillaSustitucion(PlanillaSustitucionDto planillasustitucion);
	
	    /// <summary>
	    /// Updates planillasustitucion in the database from the given dto object.
	    /// </summary>
	    /// <param name="planillasustitucion">The dto object.</param>
	    [OperationContract]
	    void UpdatePlanillaSustitucion(PlanillaSustitucionDto planillasustitucion);
	
	    /// <summary>
	    /// Update an existing planillasustitucions in the database from the given dto object list.
	    /// </summary>
	    /// <param name="planillasustitucions">The dto object list.</param>
	    [OperationContract]
	    void UpdatePlanillaSustitucions(IEnumerable<PlanillaSustitucionDto> planillasustitucions);
	
	    /// <summary>
	    /// Deletes planillasustitucion from the database by the given dto object.
	    /// </summary>
	    /// <param name="planillasustitucion">The dto object.</param>
	    [OperationContract]
	    void DeletePlanillaSustitucion(PlanillaSustitucionDto planillasustitucion);
	
	    /// <summary>
	    /// Delete planillasustitucions from the database by the given dto object list.
	    /// </summary>
	    /// <param name="planillasustitucions">The dto object list.</param>
	    [OperationContract]
	    void DeletePlanillaSustitucions(IEnumerable<PlanillaSustitucionDto> planillasustitucions);
	    
	    #endregion
	    
	    #region PredioBases CRUD Operations
	
	    /// <summary>
	    /// Returns all prediobases.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioBaseDto> ReadPredioBases();
	
	    /// <summary>
	    /// Returns a specified amount of prediobases from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioBaseDto> ReadPredioBasesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all prediobases filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioBaseDto> ReadPredioBasesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of prediobases from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioBaseDto> ReadPredioBasesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a prediobase with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    PredioBaseDto ReadPredioBase(string dtoKey);
	
	    /// <summary>
	    /// Returns all prediobases count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int PredioBasesCount();
	
	    /// <summary>
	    /// Returns all prediobases count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int PredioBasesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new prediobase from the given dto object into the database.
	    /// </summary>
	    /// <param name="prediobase">The dto object.</param>
	    /// <returns>The dto key of the newly created prediobase.</returns>
	    [OperationContract]
	    string CreatePredioBase(PredioBaseDto prediobase);
	
	    /// <summary>
	    /// Updates prediobase in the database from the given dto object.
	    /// </summary>
	    /// <param name="prediobase">The dto object.</param>
	    [OperationContract]
	    void UpdatePredioBase(PredioBaseDto prediobase);
	
	    /// <summary>
	    /// Update an existing prediobases in the database from the given dto object list.
	    /// </summary>
	    /// <param name="prediobases">The dto object list.</param>
	    [OperationContract]
	    void UpdatePredioBases(IEnumerable<PredioBaseDto> prediobases);
	
	    /// <summary>
	    /// Deletes prediobase from the database by the given dto object.
	    /// </summary>
	    /// <param name="prediobase">The dto object.</param>
	    [OperationContract]
	    void DeletePredioBase(PredioBaseDto prediobase);
	
	    /// <summary>
	    /// Delete prediobases from the database by the given dto object list.
	    /// </summary>
	    /// <param name="prediobases">The dto object list.</param>
	    [OperationContract]
	    void DeletePredioBases(IEnumerable<PredioBaseDto> prediobases);
	    
	    #endregion
	    
	    #region PredioBloques CRUD Operations
	
	    /// <summary>
	    /// Returns all prediobloques.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioBloqueDto> ReadPredioBloques();
	
	    /// <summary>
	    /// Returns a specified amount of prediobloques from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioBloqueDto> ReadPredioBloquesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all prediobloques filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioBloqueDto> ReadPredioBloquesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of prediobloques from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioBloqueDto> ReadPredioBloquesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a prediobloque with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    PredioBloqueDto ReadPredioBloque(string dtoKey);
	
	    /// <summary>
	    /// Returns all prediobloques count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int PredioBloquesCount();
	
	    /// <summary>
	    /// Returns all prediobloques count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int PredioBloquesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new prediobloque from the given dto object into the database.
	    /// </summary>
	    /// <param name="prediobloque">The dto object.</param>
	    /// <returns>The dto key of the newly created prediobloque.</returns>
	    [OperationContract]
	    string CreatePredioBloque(PredioBloqueDto prediobloque);
	
	    /// <summary>
	    /// Updates prediobloque in the database from the given dto object.
	    /// </summary>
	    /// <param name="prediobloque">The dto object.</param>
	    [OperationContract]
	    void UpdatePredioBloque(PredioBloqueDto prediobloque);
	
	    /// <summary>
	    /// Update an existing prediobloques in the database from the given dto object list.
	    /// </summary>
	    /// <param name="prediobloques">The dto object list.</param>
	    [OperationContract]
	    void UpdatePredioBloques(IEnumerable<PredioBloqueDto> prediobloques);
	
	    /// <summary>
	    /// Deletes prediobloque from the database by the given dto object.
	    /// </summary>
	    /// <param name="prediobloque">The dto object.</param>
	    [OperationContract]
	    void DeletePredioBloque(PredioBloqueDto prediobloque);
	
	    /// <summary>
	    /// Delete prediobloques from the database by the given dto object list.
	    /// </summary>
	    /// <param name="prediobloques">The dto object list.</param>
	    [OperationContract]
	    void DeletePredioBloques(IEnumerable<PredioBloqueDto> prediobloques);
	    
	    #endregion
	    
	    #region PredioConstruccions CRUD Operations
	
	    /// <summary>
	    /// Returns all predioconstruccions.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioConstruccionDto> ReadPredioConstruccions();
	
	    /// <summary>
	    /// Returns a specified amount of predioconstruccions from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioConstruccionDto> ReadPredioConstruccionsPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all predioconstruccions filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioConstruccionDto> ReadPredioConstruccionsFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of predioconstruccions from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioConstruccionDto> ReadPredioConstruccionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a predioconstruccion with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    PredioConstruccionDto ReadPredioConstruccion(string dtoKey);
	
	    /// <summary>
	    /// Returns all predioconstruccions count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int PredioConstruccionsCount();
	
	    /// <summary>
	    /// Returns all predioconstruccions count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int PredioConstruccionsCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new predioconstruccion from the given dto object into the database.
	    /// </summary>
	    /// <param name="predioconstruccion">The dto object.</param>
	    /// <returns>The dto key of the newly created predioconstruccion.</returns>
	    [OperationContract]
	    string CreatePredioConstruccion(PredioConstruccionDto predioconstruccion);
	
	    /// <summary>
	    /// Updates predioconstruccion in the database from the given dto object.
	    /// </summary>
	    /// <param name="predioconstruccion">The dto object.</param>
	    [OperationContract]
	    void UpdatePredioConstruccion(PredioConstruccionDto predioconstruccion);
	
	    /// <summary>
	    /// Update an existing predioconstruccions in the database from the given dto object list.
	    /// </summary>
	    /// <param name="predioconstruccions">The dto object list.</param>
	    [OperationContract]
	    void UpdatePredioConstruccions(IEnumerable<PredioConstruccionDto> predioconstruccions);
	
	    /// <summary>
	    /// Deletes predioconstruccion from the database by the given dto object.
	    /// </summary>
	    /// <param name="predioconstruccion">The dto object.</param>
	    [OperationContract]
	    void DeletePredioConstruccion(PredioConstruccionDto predioconstruccion);
	
	    /// <summary>
	    /// Delete predioconstruccions from the database by the given dto object list.
	    /// </summary>
	    /// <param name="predioconstruccions">The dto object list.</param>
	    [OperationContract]
	    void DeletePredioConstruccions(IEnumerable<PredioConstruccionDto> predioconstruccions);
	    
	    #endregion
	    
	    #region PredioFotos CRUD Operations
	
	    /// <summary>
	    /// Returns all prediofotos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioFotoDto> ReadPredioFotos();
	
	    /// <summary>
	    /// Returns a specified amount of prediofotos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioFotoDto> ReadPredioFotosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all prediofotos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioFotoDto> ReadPredioFotosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of prediofotos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioFotoDto> ReadPredioFotosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a prediofoto with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    PredioFotoDto ReadPredioFoto(string dtoKey);
	
	    /// <summary>
	    /// Returns all prediofotos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int PredioFotosCount();
	
	    /// <summary>
	    /// Returns all prediofotos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int PredioFotosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new prediofoto from the given dto object into the database.
	    /// </summary>
	    /// <param name="prediofoto">The dto object.</param>
	    /// <returns>The dto key of the newly created prediofoto.</returns>
	    [OperationContract]
	    string CreatePredioFoto(PredioFotoDto prediofoto);
	
	    /// <summary>
	    /// Updates prediofoto in the database from the given dto object.
	    /// </summary>
	    /// <param name="prediofoto">The dto object.</param>
	    [OperationContract]
	    void UpdatePredioFoto(PredioFotoDto prediofoto);
	
	    /// <summary>
	    /// Update an existing prediofotos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="prediofotos">The dto object list.</param>
	    [OperationContract]
	    void UpdatePredioFotos(IEnumerable<PredioFotoDto> prediofotos);
	
	    /// <summary>
	    /// Deletes prediofoto from the database by the given dto object.
	    /// </summary>
	    /// <param name="prediofoto">The dto object.</param>
	    [OperationContract]
	    void DeletePredioFoto(PredioFotoDto prediofoto);
	
	    /// <summary>
	    /// Delete prediofotos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="prediofotos">The dto object list.</param>
	    [OperationContract]
	    void DeletePredioFotos(IEnumerable<PredioFotoDto> prediofotos);
	    
	    #endregion
	    
	    #region PredioFrentes CRUD Operations
	
	    /// <summary>
	    /// Returns all prediofrentes.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioFrenteDto> ReadPredioFrentes();
	
	    /// <summary>
	    /// Returns a specified amount of prediofrentes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioFrenteDto> ReadPredioFrentesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all prediofrentes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioFrenteDto> ReadPredioFrentesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of prediofrentes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioFrenteDto> ReadPredioFrentesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a prediofrente with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    PredioFrenteDto ReadPredioFrente(string dtoKey);
	
	    /// <summary>
	    /// Returns all prediofrentes count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int PredioFrentesCount();
	
	    /// <summary>
	    /// Returns all prediofrentes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int PredioFrentesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new prediofrente from the given dto object into the database.
	    /// </summary>
	    /// <param name="prediofrente">The dto object.</param>
	    /// <returns>The dto key of the newly created prediofrente.</returns>
	    [OperationContract]
	    string CreatePredioFrente(PredioFrenteDto prediofrente);
	
	    /// <summary>
	    /// Updates prediofrente in the database from the given dto object.
	    /// </summary>
	    /// <param name="prediofrente">The dto object.</param>
	    [OperationContract]
	    void UpdatePredioFrente(PredioFrenteDto prediofrente);
	
	    /// <summary>
	    /// Update an existing prediofrentes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="prediofrentes">The dto object list.</param>
	    [OperationContract]
	    void UpdatePredioFrentes(IEnumerable<PredioFrenteDto> prediofrentes);
	
	    /// <summary>
	    /// Deletes prediofrente from the database by the given dto object.
	    /// </summary>
	    /// <param name="prediofrente">The dto object.</param>
	    [OperationContract]
	    void DeletePredioFrente(PredioFrenteDto prediofrente);
	
	    /// <summary>
	    /// Delete prediofrentes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="prediofrentes">The dto object list.</param>
	    [OperationContract]
	    void DeletePredioFrentes(IEnumerable<PredioFrenteDto> prediofrentes);
	    
	    #endregion
	    
	    #region PredioPisos CRUD Operations
	
	    /// <summary>
	    /// Returns all prediopisos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioPisoDto> ReadPredioPisos();
	
	    /// <summary>
	    /// Returns a specified amount of prediopisos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioPisoDto> ReadPredioPisosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all prediopisos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioPisoDto> ReadPredioPisosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of prediopisos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioPisoDto> ReadPredioPisosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a prediopiso with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    PredioPisoDto ReadPredioPiso(string dtoKey);
	
	    /// <summary>
	    /// Returns all prediopisos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int PredioPisosCount();
	
	    /// <summary>
	    /// Returns all prediopisos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int PredioPisosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new prediopiso from the given dto object into the database.
	    /// </summary>
	    /// <param name="prediopiso">The dto object.</param>
	    /// <returns>The dto key of the newly created prediopiso.</returns>
	    [OperationContract]
	    string CreatePredioPiso(PredioPisoDto prediopiso);
	
	    /// <summary>
	    /// Updates prediopiso in the database from the given dto object.
	    /// </summary>
	    /// <param name="prediopiso">The dto object.</param>
	    [OperationContract]
	    void UpdatePredioPiso(PredioPisoDto prediopiso);
	
	    /// <summary>
	    /// Update an existing prediopisos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="prediopisos">The dto object list.</param>
	    [OperationContract]
	    void UpdatePredioPisos(IEnumerable<PredioPisoDto> prediopisos);
	
	    /// <summary>
	    /// Deletes prediopiso from the database by the given dto object.
	    /// </summary>
	    /// <param name="prediopiso">The dto object.</param>
	    [OperationContract]
	    void DeletePredioPiso(PredioPisoDto prediopiso);
	
	    /// <summary>
	    /// Delete prediopisos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="prediopisos">The dto object list.</param>
	    [OperationContract]
	    void DeletePredioPisos(IEnumerable<PredioPisoDto> prediopisos);
	    
	    #endregion
	    
	    #region PredioPropietarios CRUD Operations
	
	    /// <summary>
	    /// Returns all prediopropietarios.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioPropietarioDto> ReadPredioPropietarios();
	
	    /// <summary>
	    /// Returns a specified amount of prediopropietarios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioPropietarioDto> ReadPredioPropietariosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all prediopropietarios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioPropietarioDto> ReadPredioPropietariosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of prediopropietarios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioPropietarioDto> ReadPredioPropietariosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a prediopropietario with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    PredioPropietarioDto ReadPredioPropietario(string dtoKey);
	
	    /// <summary>
	    /// Returns all prediopropietarios count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int PredioPropietariosCount();
	
	    /// <summary>
	    /// Returns all prediopropietarios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int PredioPropietariosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new prediopropietario from the given dto object into the database.
	    /// </summary>
	    /// <param name="prediopropietario">The dto object.</param>
	    /// <returns>The dto key of the newly created prediopropietario.</returns>
	    [OperationContract]
	    string CreatePredioPropietario(PredioPropietarioDto prediopropietario);
	
	    /// <summary>
	    /// Updates prediopropietario in the database from the given dto object.
	    /// </summary>
	    /// <param name="prediopropietario">The dto object.</param>
	    [OperationContract]
	    void UpdatePredioPropietario(PredioPropietarioDto prediopropietario);
	
	    /// <summary>
	    /// Update an existing prediopropietarios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="prediopropietarios">The dto object list.</param>
	    [OperationContract]
	    void UpdatePredioPropietarios(IEnumerable<PredioPropietarioDto> prediopropietarios);
	
	    /// <summary>
	    /// Deletes prediopropietario from the database by the given dto object.
	    /// </summary>
	    /// <param name="prediopropietario">The dto object.</param>
	    [OperationContract]
	    void DeletePredioPropietario(PredioPropietarioDto prediopropietario);
	
	    /// <summary>
	    /// Delete prediopropietarios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="prediopropietarios">The dto object list.</param>
	    [OperationContract]
	    void DeletePredioPropietarios(IEnumerable<PredioPropietarioDto> prediopropietarios);
	    
	    #endregion
	    
	    #region PredioTablas CRUD Operations
	
	    /// <summary>
	    /// Returns all prediotablas.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioTablaDto> ReadPredioTablas();
	
	    /// <summary>
	    /// Returns a specified amount of prediotablas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioTablaDto> ReadPredioTablasPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all prediotablas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioTablaDto> ReadPredioTablasFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of prediotablas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioTablaDto> ReadPredioTablasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a prediotabla with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    PredioTablaDto ReadPredioTabla(string dtoKey);
	
	    /// <summary>
	    /// Returns all prediotablas count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int PredioTablasCount();
	
	    /// <summary>
	    /// Returns all prediotablas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int PredioTablasCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new prediotabla from the given dto object into the database.
	    /// </summary>
	    /// <param name="prediotabla">The dto object.</param>
	    /// <returns>The dto key of the newly created prediotabla.</returns>
	    [OperationContract]
	    string CreatePredioTabla(PredioTablaDto prediotabla);
	
	    /// <summary>
	    /// Updates prediotabla in the database from the given dto object.
	    /// </summary>
	    /// <param name="prediotabla">The dto object.</param>
	    [OperationContract]
	    void UpdatePredioTabla(PredioTablaDto prediotabla);
	
	    /// <summary>
	    /// Update an existing prediotablas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="prediotablas">The dto object list.</param>
	    [OperationContract]
	    void UpdatePredioTablas(IEnumerable<PredioTablaDto> prediotablas);
	
	    /// <summary>
	    /// Deletes prediotabla from the database by the given dto object.
	    /// </summary>
	    /// <param name="prediotabla">The dto object.</param>
	    [OperationContract]
	    void DeletePredioTabla(PredioTablaDto prediotabla);
	
	    /// <summary>
	    /// Delete prediotablas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="prediotablas">The dto object list.</param>
	    [OperationContract]
	    void DeletePredioTablas(IEnumerable<PredioTablaDto> prediotablas);
	    
	    #endregion
	    
	    #region PredioTerrenos CRUD Operations
	
	    /// <summary>
	    /// Returns all predioterrenos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioTerrenoDto> ReadPredioTerrenos();
	
	    /// <summary>
	    /// Returns a specified amount of predioterrenos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioTerrenoDto> ReadPredioTerrenosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all predioterrenos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioTerrenoDto> ReadPredioTerrenosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of predioterrenos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PredioTerrenoDto> ReadPredioTerrenosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a predioterreno with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    PredioTerrenoDto ReadPredioTerreno(string dtoKey);
	
	    /// <summary>
	    /// Returns all predioterrenos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int PredioTerrenosCount();
	
	    /// <summary>
	    /// Returns all predioterrenos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int PredioTerrenosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new predioterreno from the given dto object into the database.
	    /// </summary>
	    /// <param name="predioterreno">The dto object.</param>
	    /// <returns>The dto key of the newly created predioterreno.</returns>
	    [OperationContract]
	    string CreatePredioTerreno(PredioTerrenoDto predioterreno);
	
	    /// <summary>
	    /// Updates predioterreno in the database from the given dto object.
	    /// </summary>
	    /// <param name="predioterreno">The dto object.</param>
	    [OperationContract]
	    void UpdatePredioTerreno(PredioTerrenoDto predioterreno);
	
	    /// <summary>
	    /// Update an existing predioterrenos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="predioterrenos">The dto object list.</param>
	    [OperationContract]
	    void UpdatePredioTerrenos(IEnumerable<PredioTerrenoDto> predioterrenos);
	
	    /// <summary>
	    /// Deletes predioterreno from the database by the given dto object.
	    /// </summary>
	    /// <param name="predioterreno">The dto object.</param>
	    [OperationContract]
	    void DeletePredioTerreno(PredioTerrenoDto predioterreno);
	
	    /// <summary>
	    /// Delete predioterrenos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="predioterrenos">The dto object list.</param>
	    [OperationContract]
	    void DeletePredioTerrenos(IEnumerable<PredioTerrenoDto> predioterrenos);
	    
	    #endregion
	    
	    #region Privilegios CRUD Operations
	
	    /// <summary>
	    /// Returns all privilegios.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PrivilegioDto> ReadPrivilegios();
	
	    /// <summary>
	    /// Returns a specified amount of privilegios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PrivilegioDto> ReadPrivilegiosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all privilegios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PrivilegioDto> ReadPrivilegiosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of privilegios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<PrivilegioDto> ReadPrivilegiosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a privilegio with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    PrivilegioDto ReadPrivilegio(string dtoKey);
	
	    /// <summary>
	    /// Returns all privilegios count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int PrivilegiosCount();
	
	    /// <summary>
	    /// Returns all privilegios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int PrivilegiosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new privilegio from the given dto object into the database.
	    /// </summary>
	    /// <param name="privilegio">The dto object.</param>
	    /// <returns>The dto key of the newly created privilegio.</returns>
	    [OperationContract]
	    string CreatePrivilegio(PrivilegioDto privilegio);
	
	    /// <summary>
	    /// Updates privilegio in the database from the given dto object.
	    /// </summary>
	    /// <param name="privilegio">The dto object.</param>
	    [OperationContract]
	    void UpdatePrivilegio(PrivilegioDto privilegio);
	
	    /// <summary>
	    /// Update an existing privilegios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="privilegios">The dto object list.</param>
	    [OperationContract]
	    void UpdatePrivilegios(IEnumerable<PrivilegioDto> privilegios);
	
	    /// <summary>
	    /// Deletes privilegio from the database by the given dto object.
	    /// </summary>
	    /// <param name="privilegio">The dto object.</param>
	    [OperationContract]
	    void DeletePrivilegio(PrivilegioDto privilegio);
	
	    /// <summary>
	    /// Delete privilegios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="privilegios">The dto object list.</param>
	    [OperationContract]
	    void DeletePrivilegios(IEnumerable<PrivilegioDto> privilegios);
	    
	    #endregion
	    
	    #region Rebajas CRUD Operations
	
	    /// <summary>
	    /// Returns all rebajas.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RebajaDto> ReadRebajas();
	
	    /// <summary>
	    /// Returns a specified amount of rebajas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RebajaDto> ReadRebajasPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all rebajas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RebajaDto> ReadRebajasFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of rebajas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RebajaDto> ReadRebajasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a rebaja with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    RebajaDto ReadRebaja(string dtoKey);
	
	    /// <summary>
	    /// Returns all rebajas count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int RebajasCount();
	
	    /// <summary>
	    /// Returns all rebajas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int RebajasCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new rebaja from the given dto object into the database.
	    /// </summary>
	    /// <param name="rebaja">The dto object.</param>
	    /// <returns>The dto key of the newly created rebaja.</returns>
	    [OperationContract]
	    string CreateRebaja(RebajaDto rebaja);
	
	    /// <summary>
	    /// Updates rebaja in the database from the given dto object.
	    /// </summary>
	    /// <param name="rebaja">The dto object.</param>
	    [OperationContract]
	    void UpdateRebaja(RebajaDto rebaja);
	
	    /// <summary>
	    /// Update an existing rebajas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="rebajas">The dto object list.</param>
	    [OperationContract]
	    void UpdateRebajas(IEnumerable<RebajaDto> rebajas);
	
	    /// <summary>
	    /// Deletes rebaja from the database by the given dto object.
	    /// </summary>
	    /// <param name="rebaja">The dto object.</param>
	    [OperationContract]
	    void DeleteRebaja(RebajaDto rebaja);
	
	    /// <summary>
	    /// Delete rebajas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="rebajas">The dto object list.</param>
	    [OperationContract]
	    void DeleteRebajas(IEnumerable<RebajaDto> rebajas);
	    
	    #endregion
	    
	    #region RebajasRubros CRUD Operations
	
	    /// <summary>
	    /// Returns all rebajasrubros.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RebajasRubroDto> ReadRebajasRubros();
	
	    /// <summary>
	    /// Returns a specified amount of rebajasrubros from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RebajasRubroDto> ReadRebajasRubrosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all rebajasrubros filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RebajasRubroDto> ReadRebajasRubrosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of rebajasrubros from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RebajasRubroDto> ReadRebajasRubrosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a rebajasrubro with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    RebajasRubroDto ReadRebajasRubro(string dtoKey);
	
	    /// <summary>
	    /// Returns all rebajasrubros count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int RebajasRubrosCount();
	
	    /// <summary>
	    /// Returns all rebajasrubros count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int RebajasRubrosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new rebajasrubro from the given dto object into the database.
	    /// </summary>
	    /// <param name="rebajasrubro">The dto object.</param>
	    /// <returns>The dto key of the newly created rebajasrubro.</returns>
	    [OperationContract]
	    string CreateRebajasRubro(RebajasRubroDto rebajasrubro);
	
	    /// <summary>
	    /// Updates rebajasrubro in the database from the given dto object.
	    /// </summary>
	    /// <param name="rebajasrubro">The dto object.</param>
	    [OperationContract]
	    void UpdateRebajasRubro(RebajasRubroDto rebajasrubro);
	
	    /// <summary>
	    /// Update an existing rebajasrubros in the database from the given dto object list.
	    /// </summary>
	    /// <param name="rebajasrubros">The dto object list.</param>
	    [OperationContract]
	    void UpdateRebajasRubros(IEnumerable<RebajasRubroDto> rebajasrubros);
	
	    /// <summary>
	    /// Deletes rebajasrubro from the database by the given dto object.
	    /// </summary>
	    /// <param name="rebajasrubro">The dto object.</param>
	    [OperationContract]
	    void DeleteRebajasRubro(RebajasRubroDto rebajasrubro);
	
	    /// <summary>
	    /// Delete rebajasrubros from the database by the given dto object list.
	    /// </summary>
	    /// <param name="rebajasrubros">The dto object list.</param>
	    [OperationContract]
	    void DeleteRebajasRubros(IEnumerable<RebajasRubroDto> rebajasrubros);
	    
	    #endregion
	    
	    #region RepCuentaCorrienteDetalles CRUD Operations
	
	    /// <summary>
	    /// Returns all repcuentacorrientedetalles.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepCuentaCorrienteDetalleDto> ReadRepCuentaCorrienteDetalles();
	
	    /// <summary>
	    /// Returns a specified amount of repcuentacorrientedetalles from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepCuentaCorrienteDetalleDto> ReadRepCuentaCorrienteDetallesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all repcuentacorrientedetalles filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepCuentaCorrienteDetalleDto> ReadRepCuentaCorrienteDetallesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of repcuentacorrientedetalles from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepCuentaCorrienteDetalleDto> ReadRepCuentaCorrienteDetallesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a repcuentacorrientedetalle with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    RepCuentaCorrienteDetalleDto ReadRepCuentaCorrienteDetalle(string dtoKey);
	
	    /// <summary>
	    /// Returns all repcuentacorrientedetalles count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int RepCuentaCorrienteDetallesCount();
	
	    /// <summary>
	    /// Returns all repcuentacorrientedetalles count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int RepCuentaCorrienteDetallesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new repcuentacorrientedetalle from the given dto object into the database.
	    /// </summary>
	    /// <param name="repcuentacorrientedetalle">The dto object.</param>
	    /// <returns>The dto key of the newly created repcuentacorrientedetalle.</returns>
	    [OperationContract]
	    string CreateRepCuentaCorrienteDetalle(RepCuentaCorrienteDetalleDto repcuentacorrientedetalle);
	
	    /// <summary>
	    /// Updates repcuentacorrientedetalle in the database from the given dto object.
	    /// </summary>
	    /// <param name="repcuentacorrientedetalle">The dto object.</param>
	    [OperationContract]
	    void UpdateRepCuentaCorrienteDetalle(RepCuentaCorrienteDetalleDto repcuentacorrientedetalle);
	
	    /// <summary>
	    /// Update an existing repcuentacorrientedetalles in the database from the given dto object list.
	    /// </summary>
	    /// <param name="repcuentacorrientedetalles">The dto object list.</param>
	    [OperationContract]
	    void UpdateRepCuentaCorrienteDetalles(IEnumerable<RepCuentaCorrienteDetalleDto> repcuentacorrientedetalles);
	
	    /// <summary>
	    /// Deletes repcuentacorrientedetalle from the database by the given dto object.
	    /// </summary>
	    /// <param name="repcuentacorrientedetalle">The dto object.</param>
	    [OperationContract]
	    void DeleteRepCuentaCorrienteDetalle(RepCuentaCorrienteDetalleDto repcuentacorrientedetalle);
	
	    /// <summary>
	    /// Delete repcuentacorrientedetalles from the database by the given dto object list.
	    /// </summary>
	    /// <param name="repcuentacorrientedetalles">The dto object list.</param>
	    [OperationContract]
	    void DeleteRepCuentaCorrienteDetalles(IEnumerable<RepCuentaCorrienteDetalleDto> repcuentacorrientedetalles);
	    
	    #endregion
	    
	    #region RepCuentaCorrienteResumens CRUD Operations
	
	    /// <summary>
	    /// Returns all repcuentacorrienteresumens.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepCuentaCorrienteResumenDto> ReadRepCuentaCorrienteResumens();
	
	    /// <summary>
	    /// Returns a specified amount of repcuentacorrienteresumens from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepCuentaCorrienteResumenDto> ReadRepCuentaCorrienteResumensPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all repcuentacorrienteresumens filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepCuentaCorrienteResumenDto> ReadRepCuentaCorrienteResumensFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of repcuentacorrienteresumens from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepCuentaCorrienteResumenDto> ReadRepCuentaCorrienteResumensPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a repcuentacorrienteresumen with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    RepCuentaCorrienteResumenDto ReadRepCuentaCorrienteResumen(string dtoKey);
	
	    /// <summary>
	    /// Returns all repcuentacorrienteresumens count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int RepCuentaCorrienteResumensCount();
	
	    /// <summary>
	    /// Returns all repcuentacorrienteresumens count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int RepCuentaCorrienteResumensCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new repcuentacorrienteresumen from the given dto object into the database.
	    /// </summary>
	    /// <param name="repcuentacorrienteresumen">The dto object.</param>
	    /// <returns>The dto key of the newly created repcuentacorrienteresumen.</returns>
	    [OperationContract]
	    string CreateRepCuentaCorrienteResumen(RepCuentaCorrienteResumenDto repcuentacorrienteresumen);
	
	    /// <summary>
	    /// Updates repcuentacorrienteresumen in the database from the given dto object.
	    /// </summary>
	    /// <param name="repcuentacorrienteresumen">The dto object.</param>
	    [OperationContract]
	    void UpdateRepCuentaCorrienteResumen(RepCuentaCorrienteResumenDto repcuentacorrienteresumen);
	
	    /// <summary>
	    /// Update an existing repcuentacorrienteresumens in the database from the given dto object list.
	    /// </summary>
	    /// <param name="repcuentacorrienteresumens">The dto object list.</param>
	    [OperationContract]
	    void UpdateRepCuentaCorrienteResumens(IEnumerable<RepCuentaCorrienteResumenDto> repcuentacorrienteresumens);
	
	    /// <summary>
	    /// Deletes repcuentacorrienteresumen from the database by the given dto object.
	    /// </summary>
	    /// <param name="repcuentacorrienteresumen">The dto object.</param>
	    [OperationContract]
	    void DeleteRepCuentaCorrienteResumen(RepCuentaCorrienteResumenDto repcuentacorrienteresumen);
	
	    /// <summary>
	    /// Delete repcuentacorrienteresumens from the database by the given dto object list.
	    /// </summary>
	    /// <param name="repcuentacorrienteresumens">The dto object list.</param>
	    [OperationContract]
	    void DeleteRepCuentaCorrienteResumens(IEnumerable<RepCuentaCorrienteResumenDto> repcuentacorrienteresumens);
	    
	    #endregion
	    
	    #region RepEmisionesSaldos CRUD Operations
	
	    /// <summary>
	    /// Returns all repemisionessaldos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepEmisionesSaldoDto> ReadRepEmisionesSaldos();
	
	    /// <summary>
	    /// Returns a specified amount of repemisionessaldos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepEmisionesSaldoDto> ReadRepEmisionesSaldosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all repemisionessaldos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepEmisionesSaldoDto> ReadRepEmisionesSaldosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of repemisionessaldos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepEmisionesSaldoDto> ReadRepEmisionesSaldosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a repemisionessaldo with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    RepEmisionesSaldoDto ReadRepEmisionesSaldo(string dtoKey);
	
	    /// <summary>
	    /// Returns all repemisionessaldos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int RepEmisionesSaldosCount();
	
	    /// <summary>
	    /// Returns all repemisionessaldos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int RepEmisionesSaldosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new repemisionessaldo from the given dto object into the database.
	    /// </summary>
	    /// <param name="repemisionessaldo">The dto object.</param>
	    /// <returns>The dto key of the newly created repemisionessaldo.</returns>
	    [OperationContract]
	    string CreateRepEmisionesSaldo(RepEmisionesSaldoDto repemisionessaldo);
	
	    /// <summary>
	    /// Updates repemisionessaldo in the database from the given dto object.
	    /// </summary>
	    /// <param name="repemisionessaldo">The dto object.</param>
	    [OperationContract]
	    void UpdateRepEmisionesSaldo(RepEmisionesSaldoDto repemisionessaldo);
	
	    /// <summary>
	    /// Update an existing repemisionessaldos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="repemisionessaldos">The dto object list.</param>
	    [OperationContract]
	    void UpdateRepEmisionesSaldos(IEnumerable<RepEmisionesSaldoDto> repemisionessaldos);
	
	    /// <summary>
	    /// Deletes repemisionessaldo from the database by the given dto object.
	    /// </summary>
	    /// <param name="repemisionessaldo">The dto object.</param>
	    [OperationContract]
	    void DeleteRepEmisionesSaldo(RepEmisionesSaldoDto repemisionessaldo);
	
	    /// <summary>
	    /// Delete repemisionessaldos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="repemisionessaldos">The dto object list.</param>
	    [OperationContract]
	    void DeleteRepEmisionesSaldos(IEnumerable<RepEmisionesSaldoDto> repemisionessaldos);
	    
	    #endregion
	    
	    #region Reportes CRUD Operations
	
	    /// <summary>
	    /// Returns all reportes.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ReporteDto> ReadReportes();
	
	    /// <summary>
	    /// Returns a specified amount of reportes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ReporteDto> ReadReportesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all reportes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ReporteDto> ReadReportesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of reportes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ReporteDto> ReadReportesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a reporte with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ReporteDto ReadReporte(string dtoKey);
	
	    /// <summary>
	    /// Returns all reportes count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ReportesCount();
	
	    /// <summary>
	    /// Returns all reportes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ReportesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new reporte from the given dto object into the database.
	    /// </summary>
	    /// <param name="reporte">The dto object.</param>
	    /// <returns>The dto key of the newly created reporte.</returns>
	    [OperationContract]
	    string CreateReporte(ReporteDto reporte);
	
	    /// <summary>
	    /// Updates reporte in the database from the given dto object.
	    /// </summary>
	    /// <param name="reporte">The dto object.</param>
	    [OperationContract]
	    void UpdateReporte(ReporteDto reporte);
	
	    /// <summary>
	    /// Update an existing reportes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="reportes">The dto object list.</param>
	    [OperationContract]
	    void UpdateReportes(IEnumerable<ReporteDto> reportes);
	
	    /// <summary>
	    /// Deletes reporte from the database by the given dto object.
	    /// </summary>
	    /// <param name="reporte">The dto object.</param>
	    [OperationContract]
	    void DeleteReporte(ReporteDto reporte);
	
	    /// <summary>
	    /// Delete reportes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="reportes">The dto object list.</param>
	    [OperationContract]
	    void DeleteReportes(IEnumerable<ReporteDto> reportes);
	    
	    #endregion
	    
	    #region RepPredios CRUD Operations
	
	    /// <summary>
	    /// Returns all reppredios.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepPredioDto> ReadRepPredios();
	
	    /// <summary>
	    /// Returns a specified amount of reppredios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepPredioDto> ReadRepPrediosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all reppredios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepPredioDto> ReadRepPrediosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of reppredios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepPredioDto> ReadRepPrediosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a reppredio with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    RepPredioDto ReadRepPredio(string dtoKey);
	
	    /// <summary>
	    /// Returns all reppredios count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int RepPrediosCount();
	
	    /// <summary>
	    /// Returns all reppredios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int RepPrediosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new reppredio from the given dto object into the database.
	    /// </summary>
	    /// <param name="reppredio">The dto object.</param>
	    /// <returns>The dto key of the newly created reppredio.</returns>
	    [OperationContract]
	    string CreateRepPredio(RepPredioDto reppredio);
	
	    /// <summary>
	    /// Updates reppredio in the database from the given dto object.
	    /// </summary>
	    /// <param name="reppredio">The dto object.</param>
	    [OperationContract]
	    void UpdateRepPredio(RepPredioDto reppredio);
	
	    /// <summary>
	    /// Update an existing reppredios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="reppredios">The dto object list.</param>
	    [OperationContract]
	    void UpdateRepPredios(IEnumerable<RepPredioDto> reppredios);
	
	    /// <summary>
	    /// Deletes reppredio from the database by the given dto object.
	    /// </summary>
	    /// <param name="reppredio">The dto object.</param>
	    [OperationContract]
	    void DeleteRepPredio(RepPredioDto reppredio);
	
	    /// <summary>
	    /// Delete reppredios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="reppredios">The dto object list.</param>
	    [OperationContract]
	    void DeleteRepPredios(IEnumerable<RepPredioDto> reppredios);
	    
	    #endregion
	    
	    #region RepRecaudacionesCompDetalles CRUD Operations
	
	    /// <summary>
	    /// Returns all reprecaudacionescompdetalles.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepRecaudacionesCompDetalleDto> ReadRepRecaudacionesCompDetalles();
	
	    /// <summary>
	    /// Returns a specified amount of reprecaudacionescompdetalles from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepRecaudacionesCompDetalleDto> ReadRepRecaudacionesCompDetallesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all reprecaudacionescompdetalles filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepRecaudacionesCompDetalleDto> ReadRepRecaudacionesCompDetallesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of reprecaudacionescompdetalles from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepRecaudacionesCompDetalleDto> ReadRepRecaudacionesCompDetallesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a reprecaudacionescompdetalle with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    RepRecaudacionesCompDetalleDto ReadRepRecaudacionesCompDetalle(string dtoKey);
	
	    /// <summary>
	    /// Returns all reprecaudacionescompdetalles count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int RepRecaudacionesCompDetallesCount();
	
	    /// <summary>
	    /// Returns all reprecaudacionescompdetalles count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int RepRecaudacionesCompDetallesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new reprecaudacionescompdetalle from the given dto object into the database.
	    /// </summary>
	    /// <param name="reprecaudacionescompdetalle">The dto object.</param>
	    /// <returns>The dto key of the newly created reprecaudacionescompdetalle.</returns>
	    [OperationContract]
	    string CreateRepRecaudacionesCompDetalle(RepRecaudacionesCompDetalleDto reprecaudacionescompdetalle);
	
	    /// <summary>
	    /// Updates reprecaudacionescompdetalle in the database from the given dto object.
	    /// </summary>
	    /// <param name="reprecaudacionescompdetalle">The dto object.</param>
	    [OperationContract]
	    void UpdateRepRecaudacionesCompDetalle(RepRecaudacionesCompDetalleDto reprecaudacionescompdetalle);
	
	    /// <summary>
	    /// Update an existing reprecaudacionescompdetalles in the database from the given dto object list.
	    /// </summary>
	    /// <param name="reprecaudacionescompdetalles">The dto object list.</param>
	    [OperationContract]
	    void UpdateRepRecaudacionesCompDetalles(IEnumerable<RepRecaudacionesCompDetalleDto> reprecaudacionescompdetalles);
	
	    /// <summary>
	    /// Deletes reprecaudacionescompdetalle from the database by the given dto object.
	    /// </summary>
	    /// <param name="reprecaudacionescompdetalle">The dto object.</param>
	    [OperationContract]
	    void DeleteRepRecaudacionesCompDetalle(RepRecaudacionesCompDetalleDto reprecaudacionescompdetalle);
	
	    /// <summary>
	    /// Delete reprecaudacionescompdetalles from the database by the given dto object list.
	    /// </summary>
	    /// <param name="reprecaudacionescompdetalles">The dto object list.</param>
	    [OperationContract]
	    void DeleteRepRecaudacionesCompDetalles(IEnumerable<RepRecaudacionesCompDetalleDto> reprecaudacionescompdetalles);
	    
	    #endregion
	    
	    #region RepRecaudacionesFechas CRUD Operations
	
	    /// <summary>
	    /// Returns all reprecaudacionesfechas.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepRecaudacionesFechaDto> ReadRepRecaudacionesFechas();
	
	    /// <summary>
	    /// Returns a specified amount of reprecaudacionesfechas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepRecaudacionesFechaDto> ReadRepRecaudacionesFechasPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all reprecaudacionesfechas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepRecaudacionesFechaDto> ReadRepRecaudacionesFechasFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of reprecaudacionesfechas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepRecaudacionesFechaDto> ReadRepRecaudacionesFechasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a reprecaudacionesfecha with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    RepRecaudacionesFechaDto ReadRepRecaudacionesFecha(string dtoKey);
	
	    /// <summary>
	    /// Returns all reprecaudacionesfechas count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int RepRecaudacionesFechasCount();
	
	    /// <summary>
	    /// Returns all reprecaudacionesfechas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int RepRecaudacionesFechasCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new reprecaudacionesfecha from the given dto object into the database.
	    /// </summary>
	    /// <param name="reprecaudacionesfecha">The dto object.</param>
	    /// <returns>The dto key of the newly created reprecaudacionesfecha.</returns>
	    [OperationContract]
	    string CreateRepRecaudacionesFecha(RepRecaudacionesFechaDto reprecaudacionesfecha);
	
	    /// <summary>
	    /// Updates reprecaudacionesfecha in the database from the given dto object.
	    /// </summary>
	    /// <param name="reprecaudacionesfecha">The dto object.</param>
	    [OperationContract]
	    void UpdateRepRecaudacionesFecha(RepRecaudacionesFechaDto reprecaudacionesfecha);
	
	    /// <summary>
	    /// Update an existing reprecaudacionesfechas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="reprecaudacionesfechas">The dto object list.</param>
	    [OperationContract]
	    void UpdateRepRecaudacionesFechas(IEnumerable<RepRecaudacionesFechaDto> reprecaudacionesfechas);
	
	    /// <summary>
	    /// Deletes reprecaudacionesfecha from the database by the given dto object.
	    /// </summary>
	    /// <param name="reprecaudacionesfecha">The dto object.</param>
	    [OperationContract]
	    void DeleteRepRecaudacionesFecha(RepRecaudacionesFechaDto reprecaudacionesfecha);
	
	    /// <summary>
	    /// Delete reprecaudacionesfechas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="reprecaudacionesfechas">The dto object list.</param>
	    [OperationContract]
	    void DeleteRepRecaudacionesFechas(IEnumerable<RepRecaudacionesFechaDto> reprecaudacionesfechas);
	    
	    #endregion
	    
	    #region RepReversionesFechas CRUD Operations
	
	    /// <summary>
	    /// Returns all repreversionesfechas.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepReversionesFechaDto> ReadRepReversionesFechas();
	
	    /// <summary>
	    /// Returns a specified amount of repreversionesfechas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepReversionesFechaDto> ReadRepReversionesFechasPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all repreversionesfechas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepReversionesFechaDto> ReadRepReversionesFechasFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of repreversionesfechas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RepReversionesFechaDto> ReadRepReversionesFechasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a repreversionesfecha with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    RepReversionesFechaDto ReadRepReversionesFecha(string dtoKey);
	
	    /// <summary>
	    /// Returns all repreversionesfechas count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int RepReversionesFechasCount();
	
	    /// <summary>
	    /// Returns all repreversionesfechas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int RepReversionesFechasCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new repreversionesfecha from the given dto object into the database.
	    /// </summary>
	    /// <param name="repreversionesfecha">The dto object.</param>
	    /// <returns>The dto key of the newly created repreversionesfecha.</returns>
	    [OperationContract]
	    string CreateRepReversionesFecha(RepReversionesFechaDto repreversionesfecha);
	
	    /// <summary>
	    /// Updates repreversionesfecha in the database from the given dto object.
	    /// </summary>
	    /// <param name="repreversionesfecha">The dto object.</param>
	    [OperationContract]
	    void UpdateRepReversionesFecha(RepReversionesFechaDto repreversionesfecha);
	
	    /// <summary>
	    /// Update an existing repreversionesfechas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="repreversionesfechas">The dto object list.</param>
	    [OperationContract]
	    void UpdateRepReversionesFechas(IEnumerable<RepReversionesFechaDto> repreversionesfechas);
	
	    /// <summary>
	    /// Deletes repreversionesfecha from the database by the given dto object.
	    /// </summary>
	    /// <param name="repreversionesfecha">The dto object.</param>
	    [OperationContract]
	    void DeleteRepReversionesFecha(RepReversionesFechaDto repreversionesfecha);
	
	    /// <summary>
	    /// Delete repreversionesfechas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="repreversionesfechas">The dto object list.</param>
	    [OperationContract]
	    void DeleteRepReversionesFechas(IEnumerable<RepReversionesFechaDto> repreversionesfechas);
	    
	    #endregion
	    
	    #region Rubros CRUD Operations
	
	    /// <summary>
	    /// Returns all rubros.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RubroDto> ReadRubros();
	
	    /// <summary>
	    /// Returns a specified amount of rubros from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RubroDto> ReadRubrosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all rubros filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RubroDto> ReadRubrosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of rubros from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RubroDto> ReadRubrosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a rubro with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    RubroDto ReadRubro(string dtoKey);
	
	    /// <summary>
	    /// Returns all rubros count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int RubrosCount();
	
	    /// <summary>
	    /// Returns all rubros count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int RubrosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new rubro from the given dto object into the database.
	    /// </summary>
	    /// <param name="rubro">The dto object.</param>
	    /// <returns>The dto key of the newly created rubro.</returns>
	    [OperationContract]
	    string CreateRubro(RubroDto rubro);
	
	    /// <summary>
	    /// Updates rubro in the database from the given dto object.
	    /// </summary>
	    /// <param name="rubro">The dto object.</param>
	    [OperationContract]
	    void UpdateRubro(RubroDto rubro);
	
	    /// <summary>
	    /// Update an existing rubros in the database from the given dto object list.
	    /// </summary>
	    /// <param name="rubros">The dto object list.</param>
	    [OperationContract]
	    void UpdateRubros(IEnumerable<RubroDto> rubros);
	
	    /// <summary>
	    /// Deletes rubro from the database by the given dto object.
	    /// </summary>
	    /// <param name="rubro">The dto object.</param>
	    [OperationContract]
	    void DeleteRubro(RubroDto rubro);
	
	    /// <summary>
	    /// Delete rubros from the database by the given dto object list.
	    /// </summary>
	    /// <param name="rubros">The dto object list.</param>
	    [OperationContract]
	    void DeleteRubros(IEnumerable<RubroDto> rubros);
	    
	    #endregion
	    
	    #region RubrosParametros CRUD Operations
	
	    /// <summary>
	    /// Returns all rubrosparametros.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RubrosParametroDto> ReadRubrosParametros();
	
	    /// <summary>
	    /// Returns a specified amount of rubrosparametros from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RubrosParametroDto> ReadRubrosParametrosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all rubrosparametros filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RubrosParametroDto> ReadRubrosParametrosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of rubrosparametros from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<RubrosParametroDto> ReadRubrosParametrosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a rubrosparametro with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    RubrosParametroDto ReadRubrosParametro(string dtoKey);
	
	    /// <summary>
	    /// Returns all rubrosparametros count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int RubrosParametrosCount();
	
	    /// <summary>
	    /// Returns all rubrosparametros count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int RubrosParametrosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new rubrosparametro from the given dto object into the database.
	    /// </summary>
	    /// <param name="rubrosparametro">The dto object.</param>
	    /// <returns>The dto key of the newly created rubrosparametro.</returns>
	    [OperationContract]
	    string CreateRubrosParametro(RubrosParametroDto rubrosparametro);
	
	    /// <summary>
	    /// Updates rubrosparametro in the database from the given dto object.
	    /// </summary>
	    /// <param name="rubrosparametro">The dto object.</param>
	    [OperationContract]
	    void UpdateRubrosParametro(RubrosParametroDto rubrosparametro);
	
	    /// <summary>
	    /// Update an existing rubrosparametros in the database from the given dto object list.
	    /// </summary>
	    /// <param name="rubrosparametros">The dto object list.</param>
	    [OperationContract]
	    void UpdateRubrosParametros(IEnumerable<RubrosParametroDto> rubrosparametros);
	
	    /// <summary>
	    /// Deletes rubrosparametro from the database by the given dto object.
	    /// </summary>
	    /// <param name="rubrosparametro">The dto object.</param>
	    [OperationContract]
	    void DeleteRubrosParametro(RubrosParametroDto rubrosparametro);
	
	    /// <summary>
	    /// Delete rubrosparametros from the database by the given dto object list.
	    /// </summary>
	    /// <param name="rubrosparametros">The dto object list.</param>
	    [OperationContract]
	    void DeleteRubrosParametros(IEnumerable<RubrosParametroDto> rubrosparametros);
	    
	    #endregion
	    
	    #region Seguimientos CRUD Operations
	
	    /// <summary>
	    /// Returns all seguimientos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SeguimientoDto> ReadSeguimientos();
	
	    /// <summary>
	    /// Returns a specified amount of seguimientos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SeguimientoDto> ReadSeguimientosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all seguimientos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SeguimientoDto> ReadSeguimientosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of seguimientos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SeguimientoDto> ReadSeguimientosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a seguimiento with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    SeguimientoDto ReadSeguimiento(string dtoKey);
	
	    /// <summary>
	    /// Returns all seguimientos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int SeguimientosCount();
	
	    /// <summary>
	    /// Returns all seguimientos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int SeguimientosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new seguimiento from the given dto object into the database.
	    /// </summary>
	    /// <param name="seguimiento">The dto object.</param>
	    /// <returns>The dto key of the newly created seguimiento.</returns>
	    [OperationContract]
	    string CreateSeguimiento(SeguimientoDto seguimiento);
	
	    /// <summary>
	    /// Updates seguimiento in the database from the given dto object.
	    /// </summary>
	    /// <param name="seguimiento">The dto object.</param>
	    [OperationContract]
	    void UpdateSeguimiento(SeguimientoDto seguimiento);
	
	    /// <summary>
	    /// Update an existing seguimientos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="seguimientos">The dto object list.</param>
	    [OperationContract]
	    void UpdateSeguimientos(IEnumerable<SeguimientoDto> seguimientos);
	
	    /// <summary>
	    /// Deletes seguimiento from the database by the given dto object.
	    /// </summary>
	    /// <param name="seguimiento">The dto object.</param>
	    [OperationContract]
	    void DeleteSeguimiento(SeguimientoDto seguimiento);
	
	    /// <summary>
	    /// Delete seguimientos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="seguimientos">The dto object list.</param>
	    [OperationContract]
	    void DeleteSeguimientos(IEnumerable<SeguimientoDto> seguimientos);
	    
	    #endregion
	    
	    #region Servicios CRUD Operations
	
	    /// <summary>
	    /// Returns all servicios.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ServicioDto> ReadServicios();
	
	    /// <summary>
	    /// Returns a specified amount of servicios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ServicioDto> ReadServiciosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all servicios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ServicioDto> ReadServiciosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of servicios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<ServicioDto> ReadServiciosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a servicio with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    ServicioDto ReadServicio(string dtoKey);
	
	    /// <summary>
	    /// Returns all servicios count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int ServiciosCount();
	
	    /// <summary>
	    /// Returns all servicios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int ServiciosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new servicio from the given dto object into the database.
	    /// </summary>
	    /// <param name="servicio">The dto object.</param>
	    /// <returns>The dto key of the newly created servicio.</returns>
	    [OperationContract]
	    string CreateServicio(ServicioDto servicio);
	
	    /// <summary>
	    /// Updates servicio in the database from the given dto object.
	    /// </summary>
	    /// <param name="servicio">The dto object.</param>
	    [OperationContract]
	    void UpdateServicio(ServicioDto servicio);
	
	    /// <summary>
	    /// Update an existing servicios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="servicios">The dto object list.</param>
	    [OperationContract]
	    void UpdateServicios(IEnumerable<ServicioDto> servicios);
	
	    /// <summary>
	    /// Deletes servicio from the database by the given dto object.
	    /// </summary>
	    /// <param name="servicio">The dto object.</param>
	    [OperationContract]
	    void DeleteServicio(ServicioDto servicio);
	
	    /// <summary>
	    /// Delete servicios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="servicios">The dto object list.</param>
	    [OperationContract]
	    void DeleteServicios(IEnumerable<ServicioDto> servicios);
	    
	    #endregion
	    
	    #region Soportes CRUD Operations
	
	    /// <summary>
	    /// Returns all soportes.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SoporteDto> ReadSoportes();
	
	    /// <summary>
	    /// Returns a specified amount of soportes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SoporteDto> ReadSoportesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all soportes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SoporteDto> ReadSoportesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of soportes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SoporteDto> ReadSoportesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a soporte with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    SoporteDto ReadSoporte(string dtoKey);
	
	    /// <summary>
	    /// Returns all soportes count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int SoportesCount();
	
	    /// <summary>
	    /// Returns all soportes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int SoportesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new soporte from the given dto object into the database.
	    /// </summary>
	    /// <param name="soporte">The dto object.</param>
	    /// <returns>The dto key of the newly created soporte.</returns>
	    [OperationContract]
	    string CreateSoporte(SoporteDto soporte);
	
	    /// <summary>
	    /// Updates soporte in the database from the given dto object.
	    /// </summary>
	    /// <param name="soporte">The dto object.</param>
	    [OperationContract]
	    void UpdateSoporte(SoporteDto soporte);
	
	    /// <summary>
	    /// Update an existing soportes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="soportes">The dto object list.</param>
	    [OperationContract]
	    void UpdateSoportes(IEnumerable<SoporteDto> soportes);
	
	    /// <summary>
	    /// Deletes soporte from the database by the given dto object.
	    /// </summary>
	    /// <param name="soporte">The dto object.</param>
	    [OperationContract]
	    void DeleteSoporte(SoporteDto soporte);
	
	    /// <summary>
	    /// Delete soportes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="soportes">The dto object list.</param>
	    [OperationContract]
	    void DeleteSoportes(IEnumerable<SoporteDto> soportes);
	    
	    #endregion
	    
	    #region SoporteMovimientos CRUD Operations
	
	    /// <summary>
	    /// Returns all soportemovimientos.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SoporteMovimientoDto> ReadSoporteMovimientos();
	
	    /// <summary>
	    /// Returns a specified amount of soportemovimientos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SoporteMovimientoDto> ReadSoporteMovimientosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all soportemovimientos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SoporteMovimientoDto> ReadSoporteMovimientosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of soportemovimientos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SoporteMovimientoDto> ReadSoporteMovimientosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a soportemovimiento with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    SoporteMovimientoDto ReadSoporteMovimiento(string dtoKey);
	
	    /// <summary>
	    /// Returns all soportemovimientos count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int SoporteMovimientosCount();
	
	    /// <summary>
	    /// Returns all soportemovimientos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int SoporteMovimientosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new soportemovimiento from the given dto object into the database.
	    /// </summary>
	    /// <param name="soportemovimiento">The dto object.</param>
	    /// <returns>The dto key of the newly created soportemovimiento.</returns>
	    [OperationContract]
	    string CreateSoporteMovimiento(SoporteMovimientoDto soportemovimiento);
	
	    /// <summary>
	    /// Updates soportemovimiento in the database from the given dto object.
	    /// </summary>
	    /// <param name="soportemovimiento">The dto object.</param>
	    [OperationContract]
	    void UpdateSoporteMovimiento(SoporteMovimientoDto soportemovimiento);
	
	    /// <summary>
	    /// Update an existing soportemovimientos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="soportemovimientos">The dto object list.</param>
	    [OperationContract]
	    void UpdateSoporteMovimientos(IEnumerable<SoporteMovimientoDto> soportemovimientos);
	
	    /// <summary>
	    /// Deletes soportemovimiento from the database by the given dto object.
	    /// </summary>
	    /// <param name="soportemovimiento">The dto object.</param>
	    [OperationContract]
	    void DeleteSoporteMovimiento(SoporteMovimientoDto soportemovimiento);
	
	    /// <summary>
	    /// Delete soportemovimientos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="soportemovimientos">The dto object list.</param>
	    [OperationContract]
	    void DeleteSoporteMovimientos(IEnumerable<SoporteMovimientoDto> soportemovimientos);
	    
	    #endregion
	    
	    #region Supervisions CRUD Operations
	
	    /// <summary>
	    /// Returns all supervisions.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SupervisionDto> ReadSupervisions();
	
	    /// <summary>
	    /// Returns a specified amount of supervisions from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SupervisionDto> ReadSupervisionsPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all supervisions filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SupervisionDto> ReadSupervisionsFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of supervisions from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<SupervisionDto> ReadSupervisionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a supervision with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    SupervisionDto ReadSupervision(string dtoKey);
	
	    /// <summary>
	    /// Returns all supervisions count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int SupervisionsCount();
	
	    /// <summary>
	    /// Returns all supervisions count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int SupervisionsCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new supervision from the given dto object into the database.
	    /// </summary>
	    /// <param name="supervision">The dto object.</param>
	    /// <returns>The dto key of the newly created supervision.</returns>
	    [OperationContract]
	    string CreateSupervision(SupervisionDto supervision);
	
	    /// <summary>
	    /// Updates supervision in the database from the given dto object.
	    /// </summary>
	    /// <param name="supervision">The dto object.</param>
	    [OperationContract]
	    void UpdateSupervision(SupervisionDto supervision);
	
	    /// <summary>
	    /// Update an existing supervisions in the database from the given dto object list.
	    /// </summary>
	    /// <param name="supervisions">The dto object list.</param>
	    [OperationContract]
	    void UpdateSupervisions(IEnumerable<SupervisionDto> supervisions);
	
	    /// <summary>
	    /// Deletes supervision from the database by the given dto object.
	    /// </summary>
	    /// <param name="supervision">The dto object.</param>
	    [OperationContract]
	    void DeleteSupervision(SupervisionDto supervision);
	
	    /// <summary>
	    /// Delete supervisions from the database by the given dto object list.
	    /// </summary>
	    /// <param name="supervisions">The dto object list.</param>
	    [OperationContract]
	    void DeleteSupervisions(IEnumerable<SupervisionDto> supervisions);
	    
	    #endregion
	    
	    #region Tablas CRUD Operations
	
	    /// <summary>
	    /// Returns all tablas.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<TablaDto> ReadTablas();
	
	    /// <summary>
	    /// Returns a specified amount of tablas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<TablaDto> ReadTablasPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all tablas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<TablaDto> ReadTablasFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of tablas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<TablaDto> ReadTablasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a tabla with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    TablaDto ReadTabla(string dtoKey);
	
	    /// <summary>
	    /// Returns all tablas count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int TablasCount();
	
	    /// <summary>
	    /// Returns all tablas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int TablasCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new tabla from the given dto object into the database.
	    /// </summary>
	    /// <param name="tabla">The dto object.</param>
	    /// <returns>The dto key of the newly created tabla.</returns>
	    [OperationContract]
	    string CreateTabla(TablaDto tabla);
	
	    /// <summary>
	    /// Updates tabla in the database from the given dto object.
	    /// </summary>
	    /// <param name="tabla">The dto object.</param>
	    [OperationContract]
	    void UpdateTabla(TablaDto tabla);
	
	    /// <summary>
	    /// Update an existing tablas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="tablas">The dto object list.</param>
	    [OperationContract]
	    void UpdateTablas(IEnumerable<TablaDto> tablas);
	
	    /// <summary>
	    /// Deletes tabla from the database by the given dto object.
	    /// </summary>
	    /// <param name="tabla">The dto object.</param>
	    [OperationContract]
	    void DeleteTabla(TablaDto tabla);
	
	    /// <summary>
	    /// Delete tablas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="tablas">The dto object list.</param>
	    [OperationContract]
	    void DeleteTablas(IEnumerable<TablaDto> tablas);
	    
	    #endregion
	    
	    #region TablaClaves CRUD Operations
	
	    /// <summary>
	    /// Returns all tablaclaves.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<TablaClaveDto> ReadTablaClaves();
	
	    /// <summary>
	    /// Returns a specified amount of tablaclaves from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<TablaClaveDto> ReadTablaClavesPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all tablaclaves filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<TablaClaveDto> ReadTablaClavesFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of tablaclaves from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<TablaClaveDto> ReadTablaClavesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a tablaclave with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    TablaClaveDto ReadTablaClave(string dtoKey);
	
	    /// <summary>
	    /// Returns all tablaclaves count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int TablaClavesCount();
	
	    /// <summary>
	    /// Returns all tablaclaves count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int TablaClavesCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new tablaclave from the given dto object into the database.
	    /// </summary>
	    /// <param name="tablaclave">The dto object.</param>
	    /// <returns>The dto key of the newly created tablaclave.</returns>
	    [OperationContract]
	    string CreateTablaClave(TablaClaveDto tablaclave);
	
	    /// <summary>
	    /// Updates tablaclave in the database from the given dto object.
	    /// </summary>
	    /// <param name="tablaclave">The dto object.</param>
	    [OperationContract]
	    void UpdateTablaClave(TablaClaveDto tablaclave);
	
	    /// <summary>
	    /// Update an existing tablaclaves in the database from the given dto object list.
	    /// </summary>
	    /// <param name="tablaclaves">The dto object list.</param>
	    [OperationContract]
	    void UpdateTablaClaves(IEnumerable<TablaClaveDto> tablaclaves);
	
	    /// <summary>
	    /// Deletes tablaclave from the database by the given dto object.
	    /// </summary>
	    /// <param name="tablaclave">The dto object.</param>
	    [OperationContract]
	    void DeleteTablaClave(TablaClaveDto tablaclave);
	
	    /// <summary>
	    /// Delete tablaclaves from the database by the given dto object list.
	    /// </summary>
	    /// <param name="tablaclaves">The dto object list.</param>
	    [OperationContract]
	    void DeleteTablaClaves(IEnumerable<TablaClaveDto> tablaclaves);
	    
	    #endregion
	    
	    #region Usuarios CRUD Operations
	
	    /// <summary>
	    /// Returns all usuarios.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<UsuarioDto> ReadUsuarios();
	
	    /// <summary>
	    /// Returns a specified amount of usuarios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<UsuarioDto> ReadUsuariosPaged(int startIndex, int pageSize);
	
	    /// <summary>
	    /// Returns all usuarios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<UsuarioDto> ReadUsuariosFiltered(string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a specified amount of usuarios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    IEnumerable<UsuarioDto> ReadUsuariosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression);
	
	    /// <summary>
	    /// Returns a usuario with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    [OperationContract]
	    UsuarioDto ReadUsuario(string dtoKey);
	
	    /// <summary>
	    /// Returns all usuarios count.
	    /// </summary>
	    /// <returns></returns>
	    [OperationContract]
	    int UsuariosCount();
	
	    /// <summary>
	    /// Returns all usuarios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    [OperationContract]
	    int UsuariosCountFiltered(string filterExpression);
	
	    /// <summary>
	    /// Adds a new usuario from the given dto object into the database.
	    /// </summary>
	    /// <param name="usuario">The dto object.</param>
	    /// <returns>The dto key of the newly created usuario.</returns>
	    [OperationContract]
	    string CreateUsuario(UsuarioDto usuario);
	
	    /// <summary>
	    /// Updates usuario in the database from the given dto object.
	    /// </summary>
	    /// <param name="usuario">The dto object.</param>
	    [OperationContract]
	    void UpdateUsuario(UsuarioDto usuario);
	
	    /// <summary>
	    /// Update an existing usuarios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="usuarios">The dto object list.</param>
	    [OperationContract]
	    void UpdateUsuarios(IEnumerable<UsuarioDto> usuarios);
	
	    /// <summary>
	    /// Deletes usuario from the database by the given dto object.
	    /// </summary>
	    /// <param name="usuario">The dto object.</param>
	    [OperationContract]
	    void DeleteUsuario(UsuarioDto usuario);
	
	    /// <summary>
	    /// Delete usuarios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="usuarios">The dto object list.</param>
	    [OperationContract]
	    void DeleteUsuarios(IEnumerable<UsuarioDto> usuarios);
	    
	    #endregion
	    
	}
}
#pragma warning restore 1591
