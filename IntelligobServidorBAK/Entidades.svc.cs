#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Code is generated by Telerik Data Access Service Wizard
// using PlainDataService.tt template
    
namespace Intelligob.Servidor
{
	using System.ServiceModel;
	using Intelligob.Servidor.Dto;
	using Intelligob.Servidor.Assemblers;
	using Intelligob.Servidor.Repositories;
	using Intelligob.Servidor.Services;
	using Intelligob.Entidades;
	using System;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.Serialization;

	/// <summary>
	/// Entidades service class handler.
	/// </summary>
	[ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]
	public partial class Entidades : IEntidades
	{
	    /// <summary>
	    /// Maintains a list of objects affected by a business transaction and coordinates 
	    /// the writing out of changes and the resolution of concurrency problems.
	    /// </summary>
	    private IModeloUnitOfWork unitOfWork;
	    
	    /// <summary>
	    /// Get or sets the specific UnitOfWork. It maintains a list of objects affected 
	    /// by a business transaction and coordinates the writing out of changes and the resolution of concurrency problems.
	    /// </summary>
	    public IModeloUnitOfWork UnitOfWork
	    {
	        get
	        {
	            if(this.unitOfWork == null)
	            {
	                this.unitOfWork = new Modelo(Utilerias.ConexionDatos.CadenaConexion);
	            }
	            return this.unitOfWork;
	        }
	        set
	        {
	            this.unitOfWork = value;
	        }
	    }	
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against AguaLectura entity.
	    /// </summary>
	    private IAguaLecturaService agualecturaservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against AguaLectura entity.
	    /// </summary>
	    public virtual IAguaLecturaService AguaLecturaService
	    {
	        get
	        {
	            if (this.agualecturaservice == null)
	            {
	                IAguaLecturaAssembler assembler = new AguaLecturaAssembler();
	                IAguaLecturaRepository repository = new AguaLecturaRepository(this.UnitOfWork);
	
	                this.agualecturaservice = new AguaLecturaService(assembler, repository);
	            }
	            return this.agualecturaservice;
	        }
	    }
	        
	    #region AguaLecturas CRUD Operations
	
	    /// <summary>
	    /// Returns all agualecturas.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<AguaLecturaDto> ReadAguaLecturas()	
	    {
	        return this.AguaLecturaService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of agualecturas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<AguaLecturaDto> ReadAguaLecturasPaged(int startIndex, int pageSize)
	    {
	        return this.AguaLecturaService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all agualecturas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<AguaLecturaDto> ReadAguaLecturasFiltered(string sortExpression, string filterExpression)
	    {
	        return this.AguaLecturaService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of agualecturas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<AguaLecturaDto> ReadAguaLecturasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.AguaLecturaService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a agualectura with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public AguaLecturaDto ReadAguaLectura(string dtoKey)
	    {
	        return this.AguaLecturaService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all agualecturas count.
	    /// </summary>
	    /// <returns></returns>
	    public int AguaLecturasCount()
	    {
	        return this.AguaLecturaService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all agualecturas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int AguaLecturasCountFiltered(string filterExpression)
	    {
	        return this.AguaLecturaService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new agualectura from the given dto object into the database.
	    /// </summary>
	    /// <param name="agualectura">The dto object.</param>
	    /// <returns>The dto key of the newly created agualectura.</returns>
	    public string CreateAguaLectura(AguaLecturaDto agualectura)
	    {
	        string key = this.AguaLecturaService.Add(agualectura);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing agualectura in the database from the given dto object.
	    /// </summary>
	    /// <param name="agualectura">The dto object.</param>
	    public void UpdateAguaLectura(AguaLecturaDto agualectura)
	    {
	        this.AguaLecturaService.Update(agualectura);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update agualecturas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="agualecturas">The dto object list.</param>
	    public void UpdateAguaLecturas(IEnumerable<AguaLecturaDto> agualecturas)
	    {
	        if (agualecturas == null)
	        {
	            return;
	        }
	
	        foreach (AguaLecturaDto agualectura in agualecturas)
	        {
	            if (agualectura == null)
	            {
	                continue;
	            }
	            
	            this.UpdateAguaLectura(agualectura);
	        }
	    }
	
	    /// <summary>
	    /// Deletes agualectura from the database by the given dto object.
	    /// </summary>
	    /// <param name="agualectura">The dto object.</param>
	    public void DeleteAguaLectura(AguaLecturaDto agualectura)
	    {
	        this.AguaLecturaService.Delete(agualectura);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete agualecturas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="agualecturas">The dto object list.</param>
	    public void DeleteAguaLecturas(IEnumerable<AguaLecturaDto> agualecturas)
	    {
	        if (agualecturas == null)
	        {
	            return;
	        }
	
	        foreach (AguaLecturaDto agualectura in agualecturas)
	        {
	            if (agualectura == null)
	            {
	                continue;
	            }
	            
	            this.DeleteAguaLectura(agualectura);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against AguaPotable entity.
	    /// </summary>
	    private IAguaPotableService aguapotableservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against AguaPotable entity.
	    /// </summary>
	    public virtual IAguaPotableService AguaPotableService
	    {
	        get
	        {
	            if (this.aguapotableservice == null)
	            {
	                IAguaPotableAssembler assembler = new AguaPotableAssembler();
	                IAguaPotableRepository repository = new AguaPotableRepository(this.UnitOfWork);
	
	                this.aguapotableservice = new AguaPotableService(assembler, repository);
	            }
	            return this.aguapotableservice;
	        }
	    }
	        
	    #region AguaPotables CRUD Operations
	
	    /// <summary>
	    /// Returns all aguapotables.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<AguaPotableDto> ReadAguaPotables()	
	    {
	        return this.AguaPotableService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of aguapotables from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<AguaPotableDto> ReadAguaPotablesPaged(int startIndex, int pageSize)
	    {
	        return this.AguaPotableService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all aguapotables filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<AguaPotableDto> ReadAguaPotablesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.AguaPotableService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of aguapotables from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<AguaPotableDto> ReadAguaPotablesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.AguaPotableService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a aguapotable with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public AguaPotableDto ReadAguaPotable(string dtoKey)
	    {
	        return this.AguaPotableService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all aguapotables count.
	    /// </summary>
	    /// <returns></returns>
	    public int AguaPotablesCount()
	    {
	        return this.AguaPotableService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all aguapotables count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int AguaPotablesCountFiltered(string filterExpression)
	    {
	        return this.AguaPotableService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new aguapotable from the given dto object into the database.
	    /// </summary>
	    /// <param name="aguapotable">The dto object.</param>
	    /// <returns>The dto key of the newly created aguapotable.</returns>
	    public string CreateAguaPotable(AguaPotableDto aguapotable)
	    {
	        string key = this.AguaPotableService.Add(aguapotable);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing aguapotable in the database from the given dto object.
	    /// </summary>
	    /// <param name="aguapotable">The dto object.</param>
	    public void UpdateAguaPotable(AguaPotableDto aguapotable)
	    {
	        this.AguaPotableService.Update(aguapotable);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update aguapotables in the database from the given dto object list.
	    /// </summary>
	    /// <param name="aguapotables">The dto object list.</param>
	    public void UpdateAguaPotables(IEnumerable<AguaPotableDto> aguapotables)
	    {
	        if (aguapotables == null)
	        {
	            return;
	        }
	
	        foreach (AguaPotableDto aguapotable in aguapotables)
	        {
	            if (aguapotable == null)
	            {
	                continue;
	            }
	            
	            this.UpdateAguaPotable(aguapotable);
	        }
	    }
	
	    /// <summary>
	    /// Deletes aguapotable from the database by the given dto object.
	    /// </summary>
	    /// <param name="aguapotable">The dto object.</param>
	    public void DeleteAguaPotable(AguaPotableDto aguapotable)
	    {
	        this.AguaPotableService.Delete(aguapotable);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete aguapotables from the database by the given dto object list.
	    /// </summary>
	    /// <param name="aguapotables">The dto object list.</param>
	    public void DeleteAguaPotables(IEnumerable<AguaPotableDto> aguapotables)
	    {
	        if (aguapotables == null)
	        {
	            return;
	        }
	
	        foreach (AguaPotableDto aguapotable in aguapotables)
	        {
	            if (aguapotable == null)
	            {
	                continue;
	            }
	            
	            this.DeleteAguaPotable(aguapotable);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against AguaServicio entity.
	    /// </summary>
	    private IAguaServicioService aguaservicioservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against AguaServicio entity.
	    /// </summary>
	    public virtual IAguaServicioService AguaServicioService
	    {
	        get
	        {
	            if (this.aguaservicioservice == null)
	            {
	                IAguaServicioAssembler assembler = new AguaServicioAssembler();
	                IAguaServicioRepository repository = new AguaServicioRepository(this.UnitOfWork);
	
	                this.aguaservicioservice = new AguaServicioService(assembler, repository);
	            }
	            return this.aguaservicioservice;
	        }
	    }
	        
	    #region AguaServicios CRUD Operations
	
	    /// <summary>
	    /// Returns all aguaservicios.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<AguaServicioDto> ReadAguaServicios()	
	    {
	        return this.AguaServicioService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of aguaservicios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<AguaServicioDto> ReadAguaServiciosPaged(int startIndex, int pageSize)
	    {
	        return this.AguaServicioService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all aguaservicios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<AguaServicioDto> ReadAguaServiciosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.AguaServicioService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of aguaservicios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<AguaServicioDto> ReadAguaServiciosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.AguaServicioService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a aguaservicio with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public AguaServicioDto ReadAguaServicio(string dtoKey)
	    {
	        return this.AguaServicioService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all aguaservicios count.
	    /// </summary>
	    /// <returns></returns>
	    public int AguaServiciosCount()
	    {
	        return this.AguaServicioService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all aguaservicios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int AguaServiciosCountFiltered(string filterExpression)
	    {
	        return this.AguaServicioService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new aguaservicio from the given dto object into the database.
	    /// </summary>
	    /// <param name="aguaservicio">The dto object.</param>
	    /// <returns>The dto key of the newly created aguaservicio.</returns>
	    public string CreateAguaServicio(AguaServicioDto aguaservicio)
	    {
	        string key = this.AguaServicioService.Add(aguaservicio);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing aguaservicio in the database from the given dto object.
	    /// </summary>
	    /// <param name="aguaservicio">The dto object.</param>
	    public void UpdateAguaServicio(AguaServicioDto aguaservicio)
	    {
	        this.AguaServicioService.Update(aguaservicio);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update aguaservicios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="aguaservicios">The dto object list.</param>
	    public void UpdateAguaServicios(IEnumerable<AguaServicioDto> aguaservicios)
	    {
	        if (aguaservicios == null)
	        {
	            return;
	        }
	
	        foreach (AguaServicioDto aguaservicio in aguaservicios)
	        {
	            if (aguaservicio == null)
	            {
	                continue;
	            }
	            
	            this.UpdateAguaServicio(aguaservicio);
	        }
	    }
	
	    /// <summary>
	    /// Deletes aguaservicio from the database by the given dto object.
	    /// </summary>
	    /// <param name="aguaservicio">The dto object.</param>
	    public void DeleteAguaServicio(AguaServicioDto aguaservicio)
	    {
	        this.AguaServicioService.Delete(aguaservicio);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete aguaservicios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="aguaservicios">The dto object list.</param>
	    public void DeleteAguaServicios(IEnumerable<AguaServicioDto> aguaservicios)
	    {
	        if (aguaservicios == null)
	        {
	            return;
	        }
	
	        foreach (AguaServicioDto aguaservicio in aguaservicios)
	        {
	            if (aguaservicio == null)
	            {
	                continue;
	            }
	            
	            this.DeleteAguaServicio(aguaservicio);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Autorizacion entity.
	    /// </summary>
	    private IAutorizacionService autorizacionservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Autorizacion entity.
	    /// </summary>
	    public virtual IAutorizacionService AutorizacionService
	    {
	        get
	        {
	            if (this.autorizacionservice == null)
	            {
	                IAutorizacionAssembler assembler = new AutorizacionAssembler();
	                IAutorizacionRepository repository = new AutorizacionRepository(this.UnitOfWork);
	
	                this.autorizacionservice = new AutorizacionService(assembler, repository);
	            }
	            return this.autorizacionservice;
	        }
	    }
	        
	    #region Autorizacions CRUD Operations
	
	    /// <summary>
	    /// Returns all autorizacions.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<AutorizacionDto> ReadAutorizacions()	
	    {
	        return this.AutorizacionService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of autorizacions from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<AutorizacionDto> ReadAutorizacionsPaged(int startIndex, int pageSize)
	    {
	        return this.AutorizacionService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all autorizacions filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<AutorizacionDto> ReadAutorizacionsFiltered(string sortExpression, string filterExpression)
	    {
	        return this.AutorizacionService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of autorizacions from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<AutorizacionDto> ReadAutorizacionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.AutorizacionService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a autorizacion with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public AutorizacionDto ReadAutorizacion(string dtoKey)
	    {
	        return this.AutorizacionService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all autorizacions count.
	    /// </summary>
	    /// <returns></returns>
	    public int AutorizacionsCount()
	    {
	        return this.AutorizacionService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all autorizacions count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int AutorizacionsCountFiltered(string filterExpression)
	    {
	        return this.AutorizacionService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new autorizacion from the given dto object into the database.
	    /// </summary>
	    /// <param name="autorizacion">The dto object.</param>
	    /// <returns>The dto key of the newly created autorizacion.</returns>
	    public string CreateAutorizacion(AutorizacionDto autorizacion)
	    {
	        string key = this.AutorizacionService.Add(autorizacion);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing autorizacion in the database from the given dto object.
	    /// </summary>
	    /// <param name="autorizacion">The dto object.</param>
	    public void UpdateAutorizacion(AutorizacionDto autorizacion)
	    {
	        this.AutorizacionService.Update(autorizacion);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update autorizacions in the database from the given dto object list.
	    /// </summary>
	    /// <param name="autorizacions">The dto object list.</param>
	    public void UpdateAutorizacions(IEnumerable<AutorizacionDto> autorizacions)
	    {
	        if (autorizacions == null)
	        {
	            return;
	        }
	
	        foreach (AutorizacionDto autorizacion in autorizacions)
	        {
	            if (autorizacion == null)
	            {
	                continue;
	            }
	            
	            this.UpdateAutorizacion(autorizacion);
	        }
	    }
	
	    /// <summary>
	    /// Deletes autorizacion from the database by the given dto object.
	    /// </summary>
	    /// <param name="autorizacion">The dto object.</param>
	    public void DeleteAutorizacion(AutorizacionDto autorizacion)
	    {
	        this.AutorizacionService.Delete(autorizacion);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete autorizacions from the database by the given dto object list.
	    /// </summary>
	    /// <param name="autorizacions">The dto object list.</param>
	    public void DeleteAutorizacions(IEnumerable<AutorizacionDto> autorizacions)
	    {
	        if (autorizacions == null)
	        {
	            return;
	        }
	
	        foreach (AutorizacionDto autorizacion in autorizacions)
	        {
	            if (autorizacion == null)
	            {
	                continue;
	            }
	            
	            this.DeleteAutorizacion(autorizacion);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Caja entity.
	    /// </summary>
	    private ICajaService cajaservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Caja entity.
	    /// </summary>
	    public virtual ICajaService CajaService
	    {
	        get
	        {
	            if (this.cajaservice == null)
	            {
	                ICajaAssembler assembler = new CajaAssembler();
	                ICajaRepository repository = new CajaRepository(this.UnitOfWork);
	
	                this.cajaservice = new CajaService(assembler, repository);
	            }
	            return this.cajaservice;
	        }
	    }
	        
	    #region Cajas CRUD Operations
	
	    /// <summary>
	    /// Returns all cajas.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CajaDto> ReadCajas()	
	    {
	        return this.CajaService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cajas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CajaDto> ReadCajasPaged(int startIndex, int pageSize)
	    {
	        return this.CajaService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all cajas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CajaDto> ReadCajasFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CajaService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cajas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CajaDto> ReadCajasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CajaService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a caja with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CajaDto ReadCaja(string dtoKey)
	    {
	        return this.CajaService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all cajas count.
	    /// </summary>
	    /// <returns></returns>
	    public int CajasCount()
	    {
	        return this.CajaService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all cajas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CajasCountFiltered(string filterExpression)
	    {
	        return this.CajaService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new caja from the given dto object into the database.
	    /// </summary>
	    /// <param name="caja">The dto object.</param>
	    /// <returns>The dto key of the newly created caja.</returns>
	    public string CreateCaja(CajaDto caja)
	    {
	        string key = this.CajaService.Add(caja);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing caja in the database from the given dto object.
	    /// </summary>
	    /// <param name="caja">The dto object.</param>
	    public void UpdateCaja(CajaDto caja)
	    {
	        this.CajaService.Update(caja);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update cajas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cajas">The dto object list.</param>
	    public void UpdateCajas(IEnumerable<CajaDto> cajas)
	    {
	        if (cajas == null)
	        {
	            return;
	        }
	
	        foreach (CajaDto caja in cajas)
	        {
	            if (caja == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCaja(caja);
	        }
	    }
	
	    /// <summary>
	    /// Deletes caja from the database by the given dto object.
	    /// </summary>
	    /// <param name="caja">The dto object.</param>
	    public void DeleteCaja(CajaDto caja)
	    {
	        this.CajaService.Delete(caja);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete cajas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cajas">The dto object list.</param>
	    public void DeleteCajas(IEnumerable<CajaDto> cajas)
	    {
	        if (cajas == null)
	        {
	            return;
	        }
	
	        foreach (CajaDto caja in cajas)
	        {
	            if (caja == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCaja(caja);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against CajaComprobante entity.
	    /// </summary>
	    private ICajaComprobanteService cajacomprobanteservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against CajaComprobante entity.
	    /// </summary>
	    public virtual ICajaComprobanteService CajaComprobanteService
	    {
	        get
	        {
	            if (this.cajacomprobanteservice == null)
	            {
	                ICajaComprobanteAssembler assembler = new CajaComprobanteAssembler();
	                ICajaComprobanteRepository repository = new CajaComprobanteRepository(this.UnitOfWork);
	
	                this.cajacomprobanteservice = new CajaComprobanteService(assembler, repository);
	            }
	            return this.cajacomprobanteservice;
	        }
	    }
	        
	    #region CajaComprobantes CRUD Operations
	
	    /// <summary>
	    /// Returns all cajacomprobantes.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CajaComprobanteDto> ReadCajaComprobantes()	
	    {
	        return this.CajaComprobanteService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cajacomprobantes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CajaComprobanteDto> ReadCajaComprobantesPaged(int startIndex, int pageSize)
	    {
	        return this.CajaComprobanteService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all cajacomprobantes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CajaComprobanteDto> ReadCajaComprobantesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CajaComprobanteService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cajacomprobantes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CajaComprobanteDto> ReadCajaComprobantesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CajaComprobanteService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a cajacomprobante with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CajaComprobanteDto ReadCajaComprobante(string dtoKey)
	    {
	        return this.CajaComprobanteService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all cajacomprobantes count.
	    /// </summary>
	    /// <returns></returns>
	    public int CajaComprobantesCount()
	    {
	        return this.CajaComprobanteService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all cajacomprobantes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CajaComprobantesCountFiltered(string filterExpression)
	    {
	        return this.CajaComprobanteService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new cajacomprobante from the given dto object into the database.
	    /// </summary>
	    /// <param name="cajacomprobante">The dto object.</param>
	    /// <returns>The dto key of the newly created cajacomprobante.</returns>
	    public string CreateCajaComprobante(CajaComprobanteDto cajacomprobante)
	    {
	        string key = this.CajaComprobanteService.Add(cajacomprobante);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing cajacomprobante in the database from the given dto object.
	    /// </summary>
	    /// <param name="cajacomprobante">The dto object.</param>
	    public void UpdateCajaComprobante(CajaComprobanteDto cajacomprobante)
	    {
	        this.CajaComprobanteService.Update(cajacomprobante);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update cajacomprobantes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cajacomprobantes">The dto object list.</param>
	    public void UpdateCajaComprobantes(IEnumerable<CajaComprobanteDto> cajacomprobantes)
	    {
	        if (cajacomprobantes == null)
	        {
	            return;
	        }
	
	        foreach (CajaComprobanteDto cajacomprobante in cajacomprobantes)
	        {
	            if (cajacomprobante == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCajaComprobante(cajacomprobante);
	        }
	    }
	
	    /// <summary>
	    /// Deletes cajacomprobante from the database by the given dto object.
	    /// </summary>
	    /// <param name="cajacomprobante">The dto object.</param>
	    public void DeleteCajaComprobante(CajaComprobanteDto cajacomprobante)
	    {
	        this.CajaComprobanteService.Delete(cajacomprobante);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete cajacomprobantes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cajacomprobantes">The dto object list.</param>
	    public void DeleteCajaComprobantes(IEnumerable<CajaComprobanteDto> cajacomprobantes)
	    {
	        if (cajacomprobantes == null)
	        {
	            return;
	        }
	
	        foreach (CajaComprobanteDto cajacomprobante in cajacomprobantes)
	        {
	            if (cajacomprobante == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCajaComprobante(cajacomprobante);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against CajaElemento entity.
	    /// </summary>
	    private ICajaElementoService cajaelementoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against CajaElemento entity.
	    /// </summary>
	    public virtual ICajaElementoService CajaElementoService
	    {
	        get
	        {
	            if (this.cajaelementoservice == null)
	            {
	                ICajaElementoAssembler assembler = new CajaElementoAssembler();
	                ICajaElementoRepository repository = new CajaElementoRepository(this.UnitOfWork);
	
	                this.cajaelementoservice = new CajaElementoService(assembler, repository);
	            }
	            return this.cajaelementoservice;
	        }
	    }
	        
	    #region CajaElementos CRUD Operations
	
	    /// <summary>
	    /// Returns all cajaelementos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CajaElementoDto> ReadCajaElementos()	
	    {
	        return this.CajaElementoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cajaelementos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CajaElementoDto> ReadCajaElementosPaged(int startIndex, int pageSize)
	    {
	        return this.CajaElementoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all cajaelementos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CajaElementoDto> ReadCajaElementosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CajaElementoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cajaelementos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CajaElementoDto> ReadCajaElementosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CajaElementoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a cajaelemento with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CajaElementoDto ReadCajaElemento(string dtoKey)
	    {
	        return this.CajaElementoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all cajaelementos count.
	    /// </summary>
	    /// <returns></returns>
	    public int CajaElementosCount()
	    {
	        return this.CajaElementoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all cajaelementos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CajaElementosCountFiltered(string filterExpression)
	    {
	        return this.CajaElementoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new cajaelemento from the given dto object into the database.
	    /// </summary>
	    /// <param name="cajaelemento">The dto object.</param>
	    /// <returns>The dto key of the newly created cajaelemento.</returns>
	    public string CreateCajaElemento(CajaElementoDto cajaelemento)
	    {
	        string key = this.CajaElementoService.Add(cajaelemento);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing cajaelemento in the database from the given dto object.
	    /// </summary>
	    /// <param name="cajaelemento">The dto object.</param>
	    public void UpdateCajaElemento(CajaElementoDto cajaelemento)
	    {
	        this.CajaElementoService.Update(cajaelemento);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update cajaelementos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cajaelementos">The dto object list.</param>
	    public void UpdateCajaElementos(IEnumerable<CajaElementoDto> cajaelementos)
	    {
	        if (cajaelementos == null)
	        {
	            return;
	        }
	
	        foreach (CajaElementoDto cajaelemento in cajaelementos)
	        {
	            if (cajaelemento == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCajaElemento(cajaelemento);
	        }
	    }
	
	    /// <summary>
	    /// Deletes cajaelemento from the database by the given dto object.
	    /// </summary>
	    /// <param name="cajaelemento">The dto object.</param>
	    public void DeleteCajaElemento(CajaElementoDto cajaelemento)
	    {
	        this.CajaElementoService.Delete(cajaelemento);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete cajaelementos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cajaelementos">The dto object list.</param>
	    public void DeleteCajaElementos(IEnumerable<CajaElementoDto> cajaelementos)
	    {
	        if (cajaelementos == null)
	        {
	            return;
	        }
	
	        foreach (CajaElementoDto cajaelemento in cajaelementos)
	        {
	            if (cajaelemento == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCajaElemento(cajaelemento);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against CajasUsuario entity.
	    /// </summary>
	    private ICajasUsuarioService cajasusuarioservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against CajasUsuario entity.
	    /// </summary>
	    public virtual ICajasUsuarioService CajasUsuarioService
	    {
	        get
	        {
	            if (this.cajasusuarioservice == null)
	            {
	                ICajasUsuarioAssembler assembler = new CajasUsuarioAssembler();
	                ICajasUsuarioRepository repository = new CajasUsuarioRepository(this.UnitOfWork);
	
	                this.cajasusuarioservice = new CajasUsuarioService(assembler, repository);
	            }
	            return this.cajasusuarioservice;
	        }
	    }
	        
	    #region CajasUsuarios CRUD Operations
	
	    /// <summary>
	    /// Returns all cajasusuarios.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CajasUsuarioDto> ReadCajasUsuarios()	
	    {
	        return this.CajasUsuarioService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cajasusuarios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CajasUsuarioDto> ReadCajasUsuariosPaged(int startIndex, int pageSize)
	    {
	        return this.CajasUsuarioService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all cajasusuarios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CajasUsuarioDto> ReadCajasUsuariosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CajasUsuarioService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cajasusuarios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CajasUsuarioDto> ReadCajasUsuariosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CajasUsuarioService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a cajasusuario with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CajasUsuarioDto ReadCajasUsuario(string dtoKey)
	    {
	        return this.CajasUsuarioService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all cajasusuarios count.
	    /// </summary>
	    /// <returns></returns>
	    public int CajasUsuariosCount()
	    {
	        return this.CajasUsuarioService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all cajasusuarios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CajasUsuariosCountFiltered(string filterExpression)
	    {
	        return this.CajasUsuarioService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new cajasusuario from the given dto object into the database.
	    /// </summary>
	    /// <param name="cajasusuario">The dto object.</param>
	    /// <returns>The dto key of the newly created cajasusuario.</returns>
	    public string CreateCajasUsuario(CajasUsuarioDto cajasusuario)
	    {
	        string key = this.CajasUsuarioService.Add(cajasusuario);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing cajasusuario in the database from the given dto object.
	    /// </summary>
	    /// <param name="cajasusuario">The dto object.</param>
	    public void UpdateCajasUsuario(CajasUsuarioDto cajasusuario)
	    {
	        this.CajasUsuarioService.Update(cajasusuario);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update cajasusuarios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cajasusuarios">The dto object list.</param>
	    public void UpdateCajasUsuarios(IEnumerable<CajasUsuarioDto> cajasusuarios)
	    {
	        if (cajasusuarios == null)
	        {
	            return;
	        }
	
	        foreach (CajasUsuarioDto cajasusuario in cajasusuarios)
	        {
	            if (cajasusuario == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCajasUsuario(cajasusuario);
	        }
	    }
	
	    /// <summary>
	    /// Deletes cajasusuario from the database by the given dto object.
	    /// </summary>
	    /// <param name="cajasusuario">The dto object.</param>
	    public void DeleteCajasUsuario(CajasUsuarioDto cajasusuario)
	    {
	        this.CajasUsuarioService.Delete(cajasusuario);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete cajasusuarios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cajasusuarios">The dto object list.</param>
	    public void DeleteCajasUsuarios(IEnumerable<CajasUsuarioDto> cajasusuarios)
	    {
	        if (cajasusuarios == null)
	        {
	            return;
	        }
	
	        foreach (CajasUsuarioDto cajasusuario in cajasusuarios)
	        {
	            if (cajasusuario == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCajasUsuario(cajasusuario);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against CarpetaCatastralAnual entity.
	    /// </summary>
	    private ICarpetaCatastralAnualService carpetacatastralanualservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against CarpetaCatastralAnual entity.
	    /// </summary>
	    public virtual ICarpetaCatastralAnualService CarpetaCatastralAnualService
	    {
	        get
	        {
	            if (this.carpetacatastralanualservice == null)
	            {
	                ICarpetaCatastralAnualAssembler assembler = new CarpetaCatastralAnualAssembler();
	                ICarpetaCatastralAnualRepository repository = new CarpetaCatastralAnualRepository(this.UnitOfWork);
	
	                this.carpetacatastralanualservice = new CarpetaCatastralAnualService(assembler, repository);
	            }
	            return this.carpetacatastralanualservice;
	        }
	    }
	        
	    #region CarpetaCatastralAnuals CRUD Operations
	
	    /// <summary>
	    /// Returns all carpetacatastralanuals.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CarpetaCatastralAnualDto> ReadCarpetaCatastralAnuals()	
	    {
	        return this.CarpetaCatastralAnualService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of carpetacatastralanuals from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CarpetaCatastralAnualDto> ReadCarpetaCatastralAnualsPaged(int startIndex, int pageSize)
	    {
	        return this.CarpetaCatastralAnualService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all carpetacatastralanuals filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CarpetaCatastralAnualDto> ReadCarpetaCatastralAnualsFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CarpetaCatastralAnualService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of carpetacatastralanuals from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CarpetaCatastralAnualDto> ReadCarpetaCatastralAnualsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CarpetaCatastralAnualService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a carpetacatastralanual with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CarpetaCatastralAnualDto ReadCarpetaCatastralAnual(string dtoKey)
	    {
	        return this.CarpetaCatastralAnualService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all carpetacatastralanuals count.
	    /// </summary>
	    /// <returns></returns>
	    public int CarpetaCatastralAnualsCount()
	    {
	        return this.CarpetaCatastralAnualService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all carpetacatastralanuals count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CarpetaCatastralAnualsCountFiltered(string filterExpression)
	    {
	        return this.CarpetaCatastralAnualService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new carpetacatastralanual from the given dto object into the database.
	    /// </summary>
	    /// <param name="carpetacatastralanual">The dto object.</param>
	    /// <returns>The dto key of the newly created carpetacatastralanual.</returns>
	    public string CreateCarpetaCatastralAnual(CarpetaCatastralAnualDto carpetacatastralanual)
	    {
	        string key = this.CarpetaCatastralAnualService.Add(carpetacatastralanual);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing carpetacatastralanual in the database from the given dto object.
	    /// </summary>
	    /// <param name="carpetacatastralanual">The dto object.</param>
	    public void UpdateCarpetaCatastralAnual(CarpetaCatastralAnualDto carpetacatastralanual)
	    {
	        this.CarpetaCatastralAnualService.Update(carpetacatastralanual);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update carpetacatastralanuals in the database from the given dto object list.
	    /// </summary>
	    /// <param name="carpetacatastralanuals">The dto object list.</param>
	    public void UpdateCarpetaCatastralAnuals(IEnumerable<CarpetaCatastralAnualDto> carpetacatastralanuals)
	    {
	        if (carpetacatastralanuals == null)
	        {
	            return;
	        }
	
	        foreach (CarpetaCatastralAnualDto carpetacatastralanual in carpetacatastralanuals)
	        {
	            if (carpetacatastralanual == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCarpetaCatastralAnual(carpetacatastralanual);
	        }
	    }
	
	    /// <summary>
	    /// Deletes carpetacatastralanual from the database by the given dto object.
	    /// </summary>
	    /// <param name="carpetacatastralanual">The dto object.</param>
	    public void DeleteCarpetaCatastralAnual(CarpetaCatastralAnualDto carpetacatastralanual)
	    {
	        this.CarpetaCatastralAnualService.Delete(carpetacatastralanual);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete carpetacatastralanuals from the database by the given dto object list.
	    /// </summary>
	    /// <param name="carpetacatastralanuals">The dto object list.</param>
	    public void DeleteCarpetaCatastralAnuals(IEnumerable<CarpetaCatastralAnualDto> carpetacatastralanuals)
	    {
	        if (carpetacatastralanuals == null)
	        {
	            return;
	        }
	
	        foreach (CarpetaCatastralAnualDto carpetacatastralanual in carpetacatastralanuals)
	        {
	            if (carpetacatastralanual == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCarpetaCatastralAnual(carpetacatastralanual);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Cobro entity.
	    /// </summary>
	    private ICobroService cobroservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Cobro entity.
	    /// </summary>
	    public virtual ICobroService CobroService
	    {
	        get
	        {
	            if (this.cobroservice == null)
	            {
	                ICobroAssembler assembler = new CobroAssembler();
	                ICobroRepository repository = new CobroRepository(this.UnitOfWork);
	
	                this.cobroservice = new CobroService(assembler, repository);
	            }
	            return this.cobroservice;
	        }
	    }
	        
	    #region Cobros CRUD Operations
	
	    /// <summary>
	    /// Returns all cobros.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CobroDto> ReadCobros()	
	    {
	        return this.CobroService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cobros from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CobroDto> ReadCobrosPaged(int startIndex, int pageSize)
	    {
	        return this.CobroService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all cobros filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CobroDto> ReadCobrosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CobroService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cobros from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CobroDto> ReadCobrosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CobroService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a cobro with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CobroDto ReadCobro(string dtoKey)
	    {
	        return this.CobroService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all cobros count.
	    /// </summary>
	    /// <returns></returns>
	    public int CobrosCount()
	    {
	        return this.CobroService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all cobros count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CobrosCountFiltered(string filterExpression)
	    {
	        return this.CobroService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new cobro from the given dto object into the database.
	    /// </summary>
	    /// <param name="cobro">The dto object.</param>
	    /// <returns>The dto key of the newly created cobro.</returns>
	    public string CreateCobro(CobroDto cobro)
	    {
	        string key = this.CobroService.Add(cobro);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing cobro in the database from the given dto object.
	    /// </summary>
	    /// <param name="cobro">The dto object.</param>
	    public void UpdateCobro(CobroDto cobro)
	    {
	        this.CobroService.Update(cobro);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update cobros in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cobros">The dto object list.</param>
	    public void UpdateCobros(IEnumerable<CobroDto> cobros)
	    {
	        if (cobros == null)
	        {
	            return;
	        }
	
	        foreach (CobroDto cobro in cobros)
	        {
	            if (cobro == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCobro(cobro);
	        }
	    }
	
	    /// <summary>
	    /// Deletes cobro from the database by the given dto object.
	    /// </summary>
	    /// <param name="cobro">The dto object.</param>
	    public void DeleteCobro(CobroDto cobro)
	    {
	        this.CobroService.Delete(cobro);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete cobros from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cobros">The dto object list.</param>
	    public void DeleteCobros(IEnumerable<CobroDto> cobros)
	    {
	        if (cobros == null)
	        {
	            return;
	        }
	
	        foreach (CobroDto cobro in cobros)
	        {
	            if (cobro == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCobro(cobro);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against CobrosElemento entity.
	    /// </summary>
	    private ICobrosElementoService cobroselementoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against CobrosElemento entity.
	    /// </summary>
	    public virtual ICobrosElementoService CobrosElementoService
	    {
	        get
	        {
	            if (this.cobroselementoservice == null)
	            {
	                ICobrosElementoAssembler assembler = new CobrosElementoAssembler();
	                ICobrosElementoRepository repository = new CobrosElementoRepository(this.UnitOfWork);
	
	                this.cobroselementoservice = new CobrosElementoService(assembler, repository);
	            }
	            return this.cobroselementoservice;
	        }
	    }
	        
	    #region CobrosElementos CRUD Operations
	
	    /// <summary>
	    /// Returns all cobroselementos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CobrosElementoDto> ReadCobrosElementos()	
	    {
	        return this.CobrosElementoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cobroselementos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CobrosElementoDto> ReadCobrosElementosPaged(int startIndex, int pageSize)
	    {
	        return this.CobrosElementoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all cobroselementos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CobrosElementoDto> ReadCobrosElementosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CobrosElementoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cobroselementos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CobrosElementoDto> ReadCobrosElementosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CobrosElementoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a cobroselemento with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CobrosElementoDto ReadCobrosElemento(string dtoKey)
	    {
	        return this.CobrosElementoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all cobroselementos count.
	    /// </summary>
	    /// <returns></returns>
	    public int CobrosElementosCount()
	    {
	        return this.CobrosElementoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all cobroselementos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CobrosElementosCountFiltered(string filterExpression)
	    {
	        return this.CobrosElementoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new cobroselemento from the given dto object into the database.
	    /// </summary>
	    /// <param name="cobroselemento">The dto object.</param>
	    /// <returns>The dto key of the newly created cobroselemento.</returns>
	    public string CreateCobrosElemento(CobrosElementoDto cobroselemento)
	    {
	        string key = this.CobrosElementoService.Add(cobroselemento);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing cobroselemento in the database from the given dto object.
	    /// </summary>
	    /// <param name="cobroselemento">The dto object.</param>
	    public void UpdateCobrosElemento(CobrosElementoDto cobroselemento)
	    {
	        this.CobrosElementoService.Update(cobroselemento);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update cobroselementos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cobroselementos">The dto object list.</param>
	    public void UpdateCobrosElementos(IEnumerable<CobrosElementoDto> cobroselementos)
	    {
	        if (cobroselementos == null)
	        {
	            return;
	        }
	
	        foreach (CobrosElementoDto cobroselemento in cobroselementos)
	        {
	            if (cobroselemento == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCobrosElemento(cobroselemento);
	        }
	    }
	
	    /// <summary>
	    /// Deletes cobroselemento from the database by the given dto object.
	    /// </summary>
	    /// <param name="cobroselemento">The dto object.</param>
	    public void DeleteCobrosElemento(CobrosElementoDto cobroselemento)
	    {
	        this.CobrosElementoService.Delete(cobroselemento);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete cobroselementos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cobroselementos">The dto object list.</param>
	    public void DeleteCobrosElementos(IEnumerable<CobrosElementoDto> cobroselementos)
	    {
	        if (cobroselementos == null)
	        {
	            return;
	        }
	
	        foreach (CobrosElementoDto cobroselemento in cobroselementos)
	        {
	            if (cobroselemento == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCobrosElemento(cobroselemento);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against CobrosNota entity.
	    /// </summary>
	    private ICobrosNotaService cobrosnotaservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against CobrosNota entity.
	    /// </summary>
	    public virtual ICobrosNotaService CobrosNotaService
	    {
	        get
	        {
	            if (this.cobrosnotaservice == null)
	            {
	                ICobrosNotaAssembler assembler = new CobrosNotaAssembler();
	                ICobrosNotaRepository repository = new CobrosNotaRepository(this.UnitOfWork);
	
	                this.cobrosnotaservice = new CobrosNotaService(assembler, repository);
	            }
	            return this.cobrosnotaservice;
	        }
	    }
	        
	    #region CobrosNotas CRUD Operations
	
	    /// <summary>
	    /// Returns all cobrosnotas.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CobrosNotaDto> ReadCobrosNotas()	
	    {
	        return this.CobrosNotaService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cobrosnotas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CobrosNotaDto> ReadCobrosNotasPaged(int startIndex, int pageSize)
	    {
	        return this.CobrosNotaService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all cobrosnotas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CobrosNotaDto> ReadCobrosNotasFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CobrosNotaService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cobrosnotas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CobrosNotaDto> ReadCobrosNotasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CobrosNotaService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a cobrosnota with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CobrosNotaDto ReadCobrosNota(string dtoKey)
	    {
	        return this.CobrosNotaService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all cobrosnotas count.
	    /// </summary>
	    /// <returns></returns>
	    public int CobrosNotasCount()
	    {
	        return this.CobrosNotaService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all cobrosnotas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CobrosNotasCountFiltered(string filterExpression)
	    {
	        return this.CobrosNotaService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new cobrosnota from the given dto object into the database.
	    /// </summary>
	    /// <param name="cobrosnota">The dto object.</param>
	    /// <returns>The dto key of the newly created cobrosnota.</returns>
	    public string CreateCobrosNota(CobrosNotaDto cobrosnota)
	    {
	        string key = this.CobrosNotaService.Add(cobrosnota);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing cobrosnota in the database from the given dto object.
	    /// </summary>
	    /// <param name="cobrosnota">The dto object.</param>
	    public void UpdateCobrosNota(CobrosNotaDto cobrosnota)
	    {
	        this.CobrosNotaService.Update(cobrosnota);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update cobrosnotas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cobrosnotas">The dto object list.</param>
	    public void UpdateCobrosNotas(IEnumerable<CobrosNotaDto> cobrosnotas)
	    {
	        if (cobrosnotas == null)
	        {
	            return;
	        }
	
	        foreach (CobrosNotaDto cobrosnota in cobrosnotas)
	        {
	            if (cobrosnota == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCobrosNota(cobrosnota);
	        }
	    }
	
	    /// <summary>
	    /// Deletes cobrosnota from the database by the given dto object.
	    /// </summary>
	    /// <param name="cobrosnota">The dto object.</param>
	    public void DeleteCobrosNota(CobrosNotaDto cobrosnota)
	    {
	        this.CobrosNotaService.Delete(cobrosnota);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete cobrosnotas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cobrosnotas">The dto object list.</param>
	    public void DeleteCobrosNotas(IEnumerable<CobrosNotaDto> cobrosnotas)
	    {
	        if (cobrosnotas == null)
	        {
	            return;
	        }
	
	        foreach (CobrosNotaDto cobrosnota in cobrosnotas)
	        {
	            if (cobrosnota == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCobrosNota(cobrosnota);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against CobrosNotasElemento entity.
	    /// </summary>
	    private ICobrosNotasElementoService cobrosnotaselementoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against CobrosNotasElemento entity.
	    /// </summary>
	    public virtual ICobrosNotasElementoService CobrosNotasElementoService
	    {
	        get
	        {
	            if (this.cobrosnotaselementoservice == null)
	            {
	                ICobrosNotasElementoAssembler assembler = new CobrosNotasElementoAssembler();
	                ICobrosNotasElementoRepository repository = new CobrosNotasElementoRepository(this.UnitOfWork);
	
	                this.cobrosnotaselementoservice = new CobrosNotasElementoService(assembler, repository);
	            }
	            return this.cobrosnotaselementoservice;
	        }
	    }
	        
	    #region CobrosNotasElementos CRUD Operations
	
	    /// <summary>
	    /// Returns all cobrosnotaselementos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CobrosNotasElementoDto> ReadCobrosNotasElementos()	
	    {
	        return this.CobrosNotasElementoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cobrosnotaselementos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CobrosNotasElementoDto> ReadCobrosNotasElementosPaged(int startIndex, int pageSize)
	    {
	        return this.CobrosNotasElementoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all cobrosnotaselementos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CobrosNotasElementoDto> ReadCobrosNotasElementosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CobrosNotasElementoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cobrosnotaselementos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CobrosNotasElementoDto> ReadCobrosNotasElementosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CobrosNotasElementoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a cobrosnotaselemento with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CobrosNotasElementoDto ReadCobrosNotasElemento(string dtoKey)
	    {
	        return this.CobrosNotasElementoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all cobrosnotaselementos count.
	    /// </summary>
	    /// <returns></returns>
	    public int CobrosNotasElementosCount()
	    {
	        return this.CobrosNotasElementoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all cobrosnotaselementos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CobrosNotasElementosCountFiltered(string filterExpression)
	    {
	        return this.CobrosNotasElementoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new cobrosnotaselemento from the given dto object into the database.
	    /// </summary>
	    /// <param name="cobrosnotaselemento">The dto object.</param>
	    /// <returns>The dto key of the newly created cobrosnotaselemento.</returns>
	    public string CreateCobrosNotasElemento(CobrosNotasElementoDto cobrosnotaselemento)
	    {
	        string key = this.CobrosNotasElementoService.Add(cobrosnotaselemento);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing cobrosnotaselemento in the database from the given dto object.
	    /// </summary>
	    /// <param name="cobrosnotaselemento">The dto object.</param>
	    public void UpdateCobrosNotasElemento(CobrosNotasElementoDto cobrosnotaselemento)
	    {
	        this.CobrosNotasElementoService.Update(cobrosnotaselemento);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update cobrosnotaselementos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cobrosnotaselementos">The dto object list.</param>
	    public void UpdateCobrosNotasElementos(IEnumerable<CobrosNotasElementoDto> cobrosnotaselementos)
	    {
	        if (cobrosnotaselementos == null)
	        {
	            return;
	        }
	
	        foreach (CobrosNotasElementoDto cobrosnotaselemento in cobrosnotaselementos)
	        {
	            if (cobrosnotaselemento == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCobrosNotasElemento(cobrosnotaselemento);
	        }
	    }
	
	    /// <summary>
	    /// Deletes cobrosnotaselemento from the database by the given dto object.
	    /// </summary>
	    /// <param name="cobrosnotaselemento">The dto object.</param>
	    public void DeleteCobrosNotasElemento(CobrosNotasElementoDto cobrosnotaselemento)
	    {
	        this.CobrosNotasElementoService.Delete(cobrosnotaselemento);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete cobrosnotaselementos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cobrosnotaselementos">The dto object list.</param>
	    public void DeleteCobrosNotasElementos(IEnumerable<CobrosNotasElementoDto> cobrosnotaselementos)
	    {
	        if (cobrosnotaselementos == null)
	        {
	            return;
	        }
	
	        foreach (CobrosNotasElementoDto cobrosnotaselemento in cobrosnotaselementos)
	        {
	            if (cobrosnotaselemento == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCobrosNotasElemento(cobrosnotaselemento);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against CobrosRubro entity.
	    /// </summary>
	    private ICobrosRubroService cobrosrubroservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against CobrosRubro entity.
	    /// </summary>
	    public virtual ICobrosRubroService CobrosRubroService
	    {
	        get
	        {
	            if (this.cobrosrubroservice == null)
	            {
	                ICobrosRubroAssembler assembler = new CobrosRubroAssembler();
	                ICobrosRubroRepository repository = new CobrosRubroRepository(this.UnitOfWork);
	
	                this.cobrosrubroservice = new CobrosRubroService(assembler, repository);
	            }
	            return this.cobrosrubroservice;
	        }
	    }
	        
	    #region CobrosRubros CRUD Operations
	
	    /// <summary>
	    /// Returns all cobrosrubros.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CobrosRubroDto> ReadCobrosRubros()	
	    {
	        return this.CobrosRubroService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cobrosrubros from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CobrosRubroDto> ReadCobrosRubrosPaged(int startIndex, int pageSize)
	    {
	        return this.CobrosRubroService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all cobrosrubros filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CobrosRubroDto> ReadCobrosRubrosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CobrosRubroService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cobrosrubros from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CobrosRubroDto> ReadCobrosRubrosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CobrosRubroService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a cobrosrubro with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CobrosRubroDto ReadCobrosRubro(string dtoKey)
	    {
	        return this.CobrosRubroService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all cobrosrubros count.
	    /// </summary>
	    /// <returns></returns>
	    public int CobrosRubrosCount()
	    {
	        return this.CobrosRubroService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all cobrosrubros count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CobrosRubrosCountFiltered(string filterExpression)
	    {
	        return this.CobrosRubroService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new cobrosrubro from the given dto object into the database.
	    /// </summary>
	    /// <param name="cobrosrubro">The dto object.</param>
	    /// <returns>The dto key of the newly created cobrosrubro.</returns>
	    public string CreateCobrosRubro(CobrosRubroDto cobrosrubro)
	    {
	        string key = this.CobrosRubroService.Add(cobrosrubro);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing cobrosrubro in the database from the given dto object.
	    /// </summary>
	    /// <param name="cobrosrubro">The dto object.</param>
	    public void UpdateCobrosRubro(CobrosRubroDto cobrosrubro)
	    {
	        this.CobrosRubroService.Update(cobrosrubro);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update cobrosrubros in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cobrosrubros">The dto object list.</param>
	    public void UpdateCobrosRubros(IEnumerable<CobrosRubroDto> cobrosrubros)
	    {
	        if (cobrosrubros == null)
	        {
	            return;
	        }
	
	        foreach (CobrosRubroDto cobrosrubro in cobrosrubros)
	        {
	            if (cobrosrubro == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCobrosRubro(cobrosrubro);
	        }
	    }
	
	    /// <summary>
	    /// Deletes cobrosrubro from the database by the given dto object.
	    /// </summary>
	    /// <param name="cobrosrubro">The dto object.</param>
	    public void DeleteCobrosRubro(CobrosRubroDto cobrosrubro)
	    {
	        this.CobrosRubroService.Delete(cobrosrubro);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete cobrosrubros from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cobrosrubros">The dto object list.</param>
	    public void DeleteCobrosRubros(IEnumerable<CobrosRubroDto> cobrosrubros)
	    {
	        if (cobrosrubros == null)
	        {
	            return;
	        }
	
	        foreach (CobrosRubroDto cobrosrubro in cobrosrubros)
	        {
	            if (cobrosrubro == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCobrosRubro(cobrosrubro);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against CobroTransaccion entity.
	    /// </summary>
	    private ICobroTransaccionService cobrotransaccionservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against CobroTransaccion entity.
	    /// </summary>
	    public virtual ICobroTransaccionService CobroTransaccionService
	    {
	        get
	        {
	            if (this.cobrotransaccionservice == null)
	            {
	                ICobroTransaccionAssembler assembler = new CobroTransaccionAssembler();
	                ICobroTransaccionRepository repository = new CobroTransaccionRepository(this.UnitOfWork);
	
	                this.cobrotransaccionservice = new CobroTransaccionService(assembler, repository);
	            }
	            return this.cobrotransaccionservice;
	        }
	    }
	        
	    #region CobroTransaccions CRUD Operations
	
	    /// <summary>
	    /// Returns all cobrotransaccions.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CobroTransaccionDto> ReadCobroTransaccions()	
	    {
	        return this.CobroTransaccionService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cobrotransaccions from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CobroTransaccionDto> ReadCobroTransaccionsPaged(int startIndex, int pageSize)
	    {
	        return this.CobroTransaccionService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all cobrotransaccions filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CobroTransaccionDto> ReadCobroTransaccionsFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CobroTransaccionService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cobrotransaccions from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CobroTransaccionDto> ReadCobroTransaccionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CobroTransaccionService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a cobrotransaccion with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CobroTransaccionDto ReadCobroTransaccion(string dtoKey)
	    {
	        return this.CobroTransaccionService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all cobrotransaccions count.
	    /// </summary>
	    /// <returns></returns>
	    public int CobroTransaccionsCount()
	    {
	        return this.CobroTransaccionService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all cobrotransaccions count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CobroTransaccionsCountFiltered(string filterExpression)
	    {
	        return this.CobroTransaccionService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new cobrotransaccion from the given dto object into the database.
	    /// </summary>
	    /// <param name="cobrotransaccion">The dto object.</param>
	    /// <returns>The dto key of the newly created cobrotransaccion.</returns>
	    public string CreateCobroTransaccion(CobroTransaccionDto cobrotransaccion)
	    {
	        string key = this.CobroTransaccionService.Add(cobrotransaccion);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing cobrotransaccion in the database from the given dto object.
	    /// </summary>
	    /// <param name="cobrotransaccion">The dto object.</param>
	    public void UpdateCobroTransaccion(CobroTransaccionDto cobrotransaccion)
	    {
	        this.CobroTransaccionService.Update(cobrotransaccion);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update cobrotransaccions in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cobrotransaccions">The dto object list.</param>
	    public void UpdateCobroTransaccions(IEnumerable<CobroTransaccionDto> cobrotransaccions)
	    {
	        if (cobrotransaccions == null)
	        {
	            return;
	        }
	
	        foreach (CobroTransaccionDto cobrotransaccion in cobrotransaccions)
	        {
	            if (cobrotransaccion == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCobroTransaccion(cobrotransaccion);
	        }
	    }
	
	    /// <summary>
	    /// Deletes cobrotransaccion from the database by the given dto object.
	    /// </summary>
	    /// <param name="cobrotransaccion">The dto object.</param>
	    public void DeleteCobroTransaccion(CobroTransaccionDto cobrotransaccion)
	    {
	        this.CobroTransaccionService.Delete(cobrotransaccion);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete cobrotransaccions from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cobrotransaccions">The dto object list.</param>
	    public void DeleteCobroTransaccions(IEnumerable<CobroTransaccionDto> cobrotransaccions)
	    {
	        if (cobrotransaccions == null)
	        {
	            return;
	        }
	
	        foreach (CobroTransaccionDto cobrotransaccion in cobrotransaccions)
	        {
	            if (cobrotransaccion == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCobroTransaccion(cobrotransaccion);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Coeficiente entity.
	    /// </summary>
	    private ICoeficienteService coeficienteservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Coeficiente entity.
	    /// </summary>
	    public virtual ICoeficienteService CoeficienteService
	    {
	        get
	        {
	            if (this.coeficienteservice == null)
	            {
	                ICoeficienteAssembler assembler = new CoeficienteAssembler();
	                ICoeficienteRepository repository = new CoeficienteRepository(this.UnitOfWork);
	
	                this.coeficienteservice = new CoeficienteService(assembler, repository);
	            }
	            return this.coeficienteservice;
	        }
	    }
	        
	    #region Coeficientes CRUD Operations
	
	    /// <summary>
	    /// Returns all coeficientes.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CoeficienteDto> ReadCoeficientes()	
	    {
	        return this.CoeficienteService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of coeficientes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CoeficienteDto> ReadCoeficientesPaged(int startIndex, int pageSize)
	    {
	        return this.CoeficienteService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all coeficientes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CoeficienteDto> ReadCoeficientesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CoeficienteService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of coeficientes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CoeficienteDto> ReadCoeficientesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CoeficienteService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a coeficiente with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CoeficienteDto ReadCoeficiente(string dtoKey)
	    {
	        return this.CoeficienteService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all coeficientes count.
	    /// </summary>
	    /// <returns></returns>
	    public int CoeficientesCount()
	    {
	        return this.CoeficienteService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all coeficientes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CoeficientesCountFiltered(string filterExpression)
	    {
	        return this.CoeficienteService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new coeficiente from the given dto object into the database.
	    /// </summary>
	    /// <param name="coeficiente">The dto object.</param>
	    /// <returns>The dto key of the newly created coeficiente.</returns>
	    public string CreateCoeficiente(CoeficienteDto coeficiente)
	    {
	        string key = this.CoeficienteService.Add(coeficiente);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing coeficiente in the database from the given dto object.
	    /// </summary>
	    /// <param name="coeficiente">The dto object.</param>
	    public void UpdateCoeficiente(CoeficienteDto coeficiente)
	    {
	        this.CoeficienteService.Update(coeficiente);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update coeficientes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="coeficientes">The dto object list.</param>
	    public void UpdateCoeficientes(IEnumerable<CoeficienteDto> coeficientes)
	    {
	        if (coeficientes == null)
	        {
	            return;
	        }
	
	        foreach (CoeficienteDto coeficiente in coeficientes)
	        {
	            if (coeficiente == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCoeficiente(coeficiente);
	        }
	    }
	
	    /// <summary>
	    /// Deletes coeficiente from the database by the given dto object.
	    /// </summary>
	    /// <param name="coeficiente">The dto object.</param>
	    public void DeleteCoeficiente(CoeficienteDto coeficiente)
	    {
	        this.CoeficienteService.Delete(coeficiente);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete coeficientes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="coeficientes">The dto object list.</param>
	    public void DeleteCoeficientes(IEnumerable<CoeficienteDto> coeficientes)
	    {
	        if (coeficientes == null)
	        {
	            return;
	        }
	
	        foreach (CoeficienteDto coeficiente in coeficientes)
	        {
	            if (coeficiente == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCoeficiente(coeficiente);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against CoeficienteElemento entity.
	    /// </summary>
	    private ICoeficienteElementoService coeficienteelementoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against CoeficienteElemento entity.
	    /// </summary>
	    public virtual ICoeficienteElementoService CoeficienteElementoService
	    {
	        get
	        {
	            if (this.coeficienteelementoservice == null)
	            {
	                ICoeficienteElementoAssembler assembler = new CoeficienteElementoAssembler();
	                ICoeficienteElementoRepository repository = new CoeficienteElementoRepository(this.UnitOfWork);
	
	                this.coeficienteelementoservice = new CoeficienteElementoService(assembler, repository);
	            }
	            return this.coeficienteelementoservice;
	        }
	    }
	        
	    #region CoeficienteElementos CRUD Operations
	
	    /// <summary>
	    /// Returns all coeficienteelementos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CoeficienteElementoDto> ReadCoeficienteElementos()	
	    {
	        return this.CoeficienteElementoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of coeficienteelementos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CoeficienteElementoDto> ReadCoeficienteElementosPaged(int startIndex, int pageSize)
	    {
	        return this.CoeficienteElementoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all coeficienteelementos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CoeficienteElementoDto> ReadCoeficienteElementosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CoeficienteElementoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of coeficienteelementos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CoeficienteElementoDto> ReadCoeficienteElementosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CoeficienteElementoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a coeficienteelemento with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CoeficienteElementoDto ReadCoeficienteElemento(string dtoKey)
	    {
	        return this.CoeficienteElementoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all coeficienteelementos count.
	    /// </summary>
	    /// <returns></returns>
	    public int CoeficienteElementosCount()
	    {
	        return this.CoeficienteElementoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all coeficienteelementos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CoeficienteElementosCountFiltered(string filterExpression)
	    {
	        return this.CoeficienteElementoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new coeficienteelemento from the given dto object into the database.
	    /// </summary>
	    /// <param name="coeficienteelemento">The dto object.</param>
	    /// <returns>The dto key of the newly created coeficienteelemento.</returns>
	    public string CreateCoeficienteElemento(CoeficienteElementoDto coeficienteelemento)
	    {
	        string key = this.CoeficienteElementoService.Add(coeficienteelemento);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing coeficienteelemento in the database from the given dto object.
	    /// </summary>
	    /// <param name="coeficienteelemento">The dto object.</param>
	    public void UpdateCoeficienteElemento(CoeficienteElementoDto coeficienteelemento)
	    {
	        this.CoeficienteElementoService.Update(coeficienteelemento);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update coeficienteelementos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="coeficienteelementos">The dto object list.</param>
	    public void UpdateCoeficienteElementos(IEnumerable<CoeficienteElementoDto> coeficienteelementos)
	    {
	        if (coeficienteelementos == null)
	        {
	            return;
	        }
	
	        foreach (CoeficienteElementoDto coeficienteelemento in coeficienteelementos)
	        {
	            if (coeficienteelemento == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCoeficienteElemento(coeficienteelemento);
	        }
	    }
	
	    /// <summary>
	    /// Deletes coeficienteelemento from the database by the given dto object.
	    /// </summary>
	    /// <param name="coeficienteelemento">The dto object.</param>
	    public void DeleteCoeficienteElemento(CoeficienteElementoDto coeficienteelemento)
	    {
	        this.CoeficienteElementoService.Delete(coeficienteelemento);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete coeficienteelementos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="coeficienteelementos">The dto object list.</param>
	    public void DeleteCoeficienteElementos(IEnumerable<CoeficienteElementoDto> coeficienteelementos)
	    {
	        if (coeficienteelementos == null)
	        {
	            return;
	        }
	
	        foreach (CoeficienteElementoDto coeficienteelemento in coeficienteelementos)
	        {
	            if (coeficienteelemento == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCoeficienteElemento(coeficienteelemento);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Comando entity.
	    /// </summary>
	    private IComandoService comandoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Comando entity.
	    /// </summary>
	    public virtual IComandoService ComandoService
	    {
	        get
	        {
	            if (this.comandoservice == null)
	            {
	                IComandoAssembler assembler = new ComandoAssembler();
	                IComandoRepository repository = new ComandoRepository(this.UnitOfWork);
	
	                this.comandoservice = new ComandoService(assembler, repository);
	            }
	            return this.comandoservice;
	        }
	    }
	        
	    #region Comandos CRUD Operations
	
	    /// <summary>
	    /// Returns all comandos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ComandoDto> ReadComandos()	
	    {
	        return this.ComandoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of comandos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ComandoDto> ReadComandosPaged(int startIndex, int pageSize)
	    {
	        return this.ComandoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all comandos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ComandoDto> ReadComandosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ComandoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of comandos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ComandoDto> ReadComandosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ComandoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a comando with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ComandoDto ReadComando(string dtoKey)
	    {
	        return this.ComandoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all comandos count.
	    /// </summary>
	    /// <returns></returns>
	    public int ComandosCount()
	    {
	        return this.ComandoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all comandos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ComandosCountFiltered(string filterExpression)
	    {
	        return this.ComandoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new comando from the given dto object into the database.
	    /// </summary>
	    /// <param name="comando">The dto object.</param>
	    /// <returns>The dto key of the newly created comando.</returns>
	    public string CreateComando(ComandoDto comando)
	    {
	        string key = this.ComandoService.Add(comando);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing comando in the database from the given dto object.
	    /// </summary>
	    /// <param name="comando">The dto object.</param>
	    public void UpdateComando(ComandoDto comando)
	    {
	        this.ComandoService.Update(comando);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update comandos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="comandos">The dto object list.</param>
	    public void UpdateComandos(IEnumerable<ComandoDto> comandos)
	    {
	        if (comandos == null)
	        {
	            return;
	        }
	
	        foreach (ComandoDto comando in comandos)
	        {
	            if (comando == null)
	            {
	                continue;
	            }
	            
	            this.UpdateComando(comando);
	        }
	    }
	
	    /// <summary>
	    /// Deletes comando from the database by the given dto object.
	    /// </summary>
	    /// <param name="comando">The dto object.</param>
	    public void DeleteComando(ComandoDto comando)
	    {
	        this.ComandoService.Delete(comando);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete comandos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="comandos">The dto object list.</param>
	    public void DeleteComandos(IEnumerable<ComandoDto> comandos)
	    {
	        if (comandos == null)
	        {
	            return;
	        }
	
	        foreach (ComandoDto comando in comandos)
	        {
	            if (comando == null)
	            {
	                continue;
	            }
	            
	            this.DeleteComando(comando);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Concepto entity.
	    /// </summary>
	    private IConceptoService conceptoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Concepto entity.
	    /// </summary>
	    public virtual IConceptoService ConceptoService
	    {
	        get
	        {
	            if (this.conceptoservice == null)
	            {
	                IConceptoAssembler assembler = new ConceptoAssembler();
	                IConceptoRepository repository = new ConceptoRepository(this.UnitOfWork);
	
	                this.conceptoservice = new ConceptoService(assembler, repository);
	            }
	            return this.conceptoservice;
	        }
	    }
	        
	    #region Conceptos CRUD Operations
	
	    /// <summary>
	    /// Returns all conceptos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ConceptoDto> ReadConceptos()	
	    {
	        return this.ConceptoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of conceptos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ConceptoDto> ReadConceptosPaged(int startIndex, int pageSize)
	    {
	        return this.ConceptoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all conceptos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ConceptoDto> ReadConceptosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ConceptoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of conceptos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ConceptoDto> ReadConceptosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ConceptoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a concepto with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ConceptoDto ReadConcepto(string dtoKey)
	    {
	        return this.ConceptoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all conceptos count.
	    /// </summary>
	    /// <returns></returns>
	    public int ConceptosCount()
	    {
	        return this.ConceptoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all conceptos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ConceptosCountFiltered(string filterExpression)
	    {
	        return this.ConceptoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new concepto from the given dto object into the database.
	    /// </summary>
	    /// <param name="concepto">The dto object.</param>
	    /// <returns>The dto key of the newly created concepto.</returns>
	    public string CreateConcepto(ConceptoDto concepto)
	    {
	        string key = this.ConceptoService.Add(concepto);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing concepto in the database from the given dto object.
	    /// </summary>
	    /// <param name="concepto">The dto object.</param>
	    public void UpdateConcepto(ConceptoDto concepto)
	    {
	        this.ConceptoService.Update(concepto);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update conceptos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="conceptos">The dto object list.</param>
	    public void UpdateConceptos(IEnumerable<ConceptoDto> conceptos)
	    {
	        if (conceptos == null)
	        {
	            return;
	        }
	
	        foreach (ConceptoDto concepto in conceptos)
	        {
	            if (concepto == null)
	            {
	                continue;
	            }
	            
	            this.UpdateConcepto(concepto);
	        }
	    }
	
	    /// <summary>
	    /// Deletes concepto from the database by the given dto object.
	    /// </summary>
	    /// <param name="concepto">The dto object.</param>
	    public void DeleteConcepto(ConceptoDto concepto)
	    {
	        this.ConceptoService.Delete(concepto);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete conceptos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="conceptos">The dto object list.</param>
	    public void DeleteConceptos(IEnumerable<ConceptoDto> conceptos)
	    {
	        if (conceptos == null)
	        {
	            return;
	        }
	
	        foreach (ConceptoDto concepto in conceptos)
	        {
	            if (concepto == null)
	            {
	                continue;
	            }
	            
	            this.DeleteConcepto(concepto);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against ConceptosDocumento entity.
	    /// </summary>
	    private IConceptosDocumentoService conceptosdocumentoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against ConceptosDocumento entity.
	    /// </summary>
	    public virtual IConceptosDocumentoService ConceptosDocumentoService
	    {
	        get
	        {
	            if (this.conceptosdocumentoservice == null)
	            {
	                IConceptosDocumentoAssembler assembler = new ConceptosDocumentoAssembler();
	                IConceptosDocumentoRepository repository = new ConceptosDocumentoRepository(this.UnitOfWork);
	
	                this.conceptosdocumentoservice = new ConceptosDocumentoService(assembler, repository);
	            }
	            return this.conceptosdocumentoservice;
	        }
	    }
	        
	    #region ConceptosDocumentos CRUD Operations
	
	    /// <summary>
	    /// Returns all conceptosdocumentos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ConceptosDocumentoDto> ReadConceptosDocumentos()	
	    {
	        return this.ConceptosDocumentoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of conceptosdocumentos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ConceptosDocumentoDto> ReadConceptosDocumentosPaged(int startIndex, int pageSize)
	    {
	        return this.ConceptosDocumentoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all conceptosdocumentos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ConceptosDocumentoDto> ReadConceptosDocumentosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ConceptosDocumentoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of conceptosdocumentos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ConceptosDocumentoDto> ReadConceptosDocumentosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ConceptosDocumentoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a conceptosdocumento with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ConceptosDocumentoDto ReadConceptosDocumento(string dtoKey)
	    {
	        return this.ConceptosDocumentoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all conceptosdocumentos count.
	    /// </summary>
	    /// <returns></returns>
	    public int ConceptosDocumentosCount()
	    {
	        return this.ConceptosDocumentoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all conceptosdocumentos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ConceptosDocumentosCountFiltered(string filterExpression)
	    {
	        return this.ConceptosDocumentoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new conceptosdocumento from the given dto object into the database.
	    /// </summary>
	    /// <param name="conceptosdocumento">The dto object.</param>
	    /// <returns>The dto key of the newly created conceptosdocumento.</returns>
	    public string CreateConceptosDocumento(ConceptosDocumentoDto conceptosdocumento)
	    {
	        string key = this.ConceptosDocumentoService.Add(conceptosdocumento);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing conceptosdocumento in the database from the given dto object.
	    /// </summary>
	    /// <param name="conceptosdocumento">The dto object.</param>
	    public void UpdateConceptosDocumento(ConceptosDocumentoDto conceptosdocumento)
	    {
	        this.ConceptosDocumentoService.Update(conceptosdocumento);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update conceptosdocumentos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="conceptosdocumentos">The dto object list.</param>
	    public void UpdateConceptosDocumentos(IEnumerable<ConceptosDocumentoDto> conceptosdocumentos)
	    {
	        if (conceptosdocumentos == null)
	        {
	            return;
	        }
	
	        foreach (ConceptosDocumentoDto conceptosdocumento in conceptosdocumentos)
	        {
	            if (conceptosdocumento == null)
	            {
	                continue;
	            }
	            
	            this.UpdateConceptosDocumento(conceptosdocumento);
	        }
	    }
	
	    /// <summary>
	    /// Deletes conceptosdocumento from the database by the given dto object.
	    /// </summary>
	    /// <param name="conceptosdocumento">The dto object.</param>
	    public void DeleteConceptosDocumento(ConceptosDocumentoDto conceptosdocumento)
	    {
	        this.ConceptosDocumentoService.Delete(conceptosdocumento);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete conceptosdocumentos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="conceptosdocumentos">The dto object list.</param>
	    public void DeleteConceptosDocumentos(IEnumerable<ConceptosDocumentoDto> conceptosdocumentos)
	    {
	        if (conceptosdocumentos == null)
	        {
	            return;
	        }
	
	        foreach (ConceptosDocumentoDto conceptosdocumento in conceptosdocumentos)
	        {
	            if (conceptosdocumento == null)
	            {
	                continue;
	            }
	            
	            this.DeleteConceptosDocumento(conceptosdocumento);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against ConceptosEmision entity.
	    /// </summary>
	    private IConceptosEmisionService conceptosemisionservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against ConceptosEmision entity.
	    /// </summary>
	    public virtual IConceptosEmisionService ConceptosEmisionService
	    {
	        get
	        {
	            if (this.conceptosemisionservice == null)
	            {
	                IConceptosEmisionAssembler assembler = new ConceptosEmisionAssembler();
	                IConceptosEmisionRepository repository = new ConceptosEmisionRepository(this.UnitOfWork);
	
	                this.conceptosemisionservice = new ConceptosEmisionService(assembler, repository);
	            }
	            return this.conceptosemisionservice;
	        }
	    }
	        
	    #region ConceptosEmisions CRUD Operations
	
	    /// <summary>
	    /// Returns all conceptosemisions.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ConceptosEmisionDto> ReadConceptosEmisions()	
	    {
	        return this.ConceptosEmisionService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of conceptosemisions from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ConceptosEmisionDto> ReadConceptosEmisionsPaged(int startIndex, int pageSize)
	    {
	        return this.ConceptosEmisionService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all conceptosemisions filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ConceptosEmisionDto> ReadConceptosEmisionsFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ConceptosEmisionService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of conceptosemisions from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ConceptosEmisionDto> ReadConceptosEmisionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ConceptosEmisionService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a conceptosemision with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ConceptosEmisionDto ReadConceptosEmision(string dtoKey)
	    {
	        return this.ConceptosEmisionService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all conceptosemisions count.
	    /// </summary>
	    /// <returns></returns>
	    public int ConceptosEmisionsCount()
	    {
	        return this.ConceptosEmisionService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all conceptosemisions count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ConceptosEmisionsCountFiltered(string filterExpression)
	    {
	        return this.ConceptosEmisionService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new conceptosemision from the given dto object into the database.
	    /// </summary>
	    /// <param name="conceptosemision">The dto object.</param>
	    /// <returns>The dto key of the newly created conceptosemision.</returns>
	    public string CreateConceptosEmision(ConceptosEmisionDto conceptosemision)
	    {
	        string key = this.ConceptosEmisionService.Add(conceptosemision);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing conceptosemision in the database from the given dto object.
	    /// </summary>
	    /// <param name="conceptosemision">The dto object.</param>
	    public void UpdateConceptosEmision(ConceptosEmisionDto conceptosemision)
	    {
	        this.ConceptosEmisionService.Update(conceptosemision);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update conceptosemisions in the database from the given dto object list.
	    /// </summary>
	    /// <param name="conceptosemisions">The dto object list.</param>
	    public void UpdateConceptosEmisions(IEnumerable<ConceptosEmisionDto> conceptosemisions)
	    {
	        if (conceptosemisions == null)
	        {
	            return;
	        }
	
	        foreach (ConceptosEmisionDto conceptosemision in conceptosemisions)
	        {
	            if (conceptosemision == null)
	            {
	                continue;
	            }
	            
	            this.UpdateConceptosEmision(conceptosemision);
	        }
	    }
	
	    /// <summary>
	    /// Deletes conceptosemision from the database by the given dto object.
	    /// </summary>
	    /// <param name="conceptosemision">The dto object.</param>
	    public void DeleteConceptosEmision(ConceptosEmisionDto conceptosemision)
	    {
	        this.ConceptosEmisionService.Delete(conceptosemision);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete conceptosemisions from the database by the given dto object list.
	    /// </summary>
	    /// <param name="conceptosemisions">The dto object list.</param>
	    public void DeleteConceptosEmisions(IEnumerable<ConceptosEmisionDto> conceptosemisions)
	    {
	        if (conceptosemisions == null)
	        {
	            return;
	        }
	
	        foreach (ConceptosEmisionDto conceptosemision in conceptosemisions)
	        {
	            if (conceptosemision == null)
	            {
	                continue;
	            }
	            
	            this.DeleteConceptosEmision(conceptosemision);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against ConceptosRubro entity.
	    /// </summary>
	    private IConceptosRubroService conceptosrubroservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against ConceptosRubro entity.
	    /// </summary>
	    public virtual IConceptosRubroService ConceptosRubroService
	    {
	        get
	        {
	            if (this.conceptosrubroservice == null)
	            {
	                IConceptosRubroAssembler assembler = new ConceptosRubroAssembler();
	                IConceptosRubroRepository repository = new ConceptosRubroRepository(this.UnitOfWork);
	
	                this.conceptosrubroservice = new ConceptosRubroService(assembler, repository);
	            }
	            return this.conceptosrubroservice;
	        }
	    }
	        
	    #region ConceptosRubros CRUD Operations
	
	    /// <summary>
	    /// Returns all conceptosrubros.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ConceptosRubroDto> ReadConceptosRubros()	
	    {
	        return this.ConceptosRubroService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of conceptosrubros from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ConceptosRubroDto> ReadConceptosRubrosPaged(int startIndex, int pageSize)
	    {
	        return this.ConceptosRubroService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all conceptosrubros filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ConceptosRubroDto> ReadConceptosRubrosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ConceptosRubroService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of conceptosrubros from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ConceptosRubroDto> ReadConceptosRubrosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ConceptosRubroService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a conceptosrubro with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ConceptosRubroDto ReadConceptosRubro(string dtoKey)
	    {
	        return this.ConceptosRubroService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all conceptosrubros count.
	    /// </summary>
	    /// <returns></returns>
	    public int ConceptosRubrosCount()
	    {
	        return this.ConceptosRubroService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all conceptosrubros count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ConceptosRubrosCountFiltered(string filterExpression)
	    {
	        return this.ConceptosRubroService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new conceptosrubro from the given dto object into the database.
	    /// </summary>
	    /// <param name="conceptosrubro">The dto object.</param>
	    /// <returns>The dto key of the newly created conceptosrubro.</returns>
	    public string CreateConceptosRubro(ConceptosRubroDto conceptosrubro)
	    {
	        string key = this.ConceptosRubroService.Add(conceptosrubro);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing conceptosrubro in the database from the given dto object.
	    /// </summary>
	    /// <param name="conceptosrubro">The dto object.</param>
	    public void UpdateConceptosRubro(ConceptosRubroDto conceptosrubro)
	    {
	        this.ConceptosRubroService.Update(conceptosrubro);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update conceptosrubros in the database from the given dto object list.
	    /// </summary>
	    /// <param name="conceptosrubros">The dto object list.</param>
	    public void UpdateConceptosRubros(IEnumerable<ConceptosRubroDto> conceptosrubros)
	    {
	        if (conceptosrubros == null)
	        {
	            return;
	        }
	
	        foreach (ConceptosRubroDto conceptosrubro in conceptosrubros)
	        {
	            if (conceptosrubro == null)
	            {
	                continue;
	            }
	            
	            this.UpdateConceptosRubro(conceptosrubro);
	        }
	    }
	
	    /// <summary>
	    /// Deletes conceptosrubro from the database by the given dto object.
	    /// </summary>
	    /// <param name="conceptosrubro">The dto object.</param>
	    public void DeleteConceptosRubro(ConceptosRubroDto conceptosrubro)
	    {
	        this.ConceptosRubroService.Delete(conceptosrubro);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete conceptosrubros from the database by the given dto object list.
	    /// </summary>
	    /// <param name="conceptosrubros">The dto object list.</param>
	    public void DeleteConceptosRubros(IEnumerable<ConceptosRubroDto> conceptosrubros)
	    {
	        if (conceptosrubros == null)
	        {
	            return;
	        }
	
	        foreach (ConceptosRubroDto conceptosrubro in conceptosrubros)
	        {
	            if (conceptosrubro == null)
	            {
	                continue;
	            }
	            
	            this.DeleteConceptosRubro(conceptosrubro);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Contribuyente entity.
	    /// </summary>
	    private IContribuyenteService contribuyenteservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Contribuyente entity.
	    /// </summary>
	    public virtual IContribuyenteService ContribuyenteService
	    {
	        get
	        {
	            if (this.contribuyenteservice == null)
	            {
	                IContribuyenteAssembler assembler = new ContribuyenteAssembler();
	                IContribuyenteRepository repository = new ContribuyenteRepository(this.UnitOfWork);
	
	                this.contribuyenteservice = new ContribuyenteService(assembler, repository);
	            }
	            return this.contribuyenteservice;
	        }
	    }
	        
	    #region Contribuyentes CRUD Operations
	
	    /// <summary>
	    /// Returns all contribuyentes.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ContribuyenteDto> ReadContribuyentes()	
	    {
	        return this.ContribuyenteService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of contribuyentes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ContribuyenteDto> ReadContribuyentesPaged(int startIndex, int pageSize)
	    {
	        return this.ContribuyenteService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all contribuyentes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ContribuyenteDto> ReadContribuyentesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ContribuyenteService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of contribuyentes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ContribuyenteDto> ReadContribuyentesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ContribuyenteService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a contribuyente with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ContribuyenteDto ReadContribuyente(string dtoKey)
	    {
	        return this.ContribuyenteService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all contribuyentes count.
	    /// </summary>
	    /// <returns></returns>
	    public int ContribuyentesCount()
	    {
	        return this.ContribuyenteService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all contribuyentes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ContribuyentesCountFiltered(string filterExpression)
	    {
	        return this.ContribuyenteService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new contribuyente from the given dto object into the database.
	    /// </summary>
	    /// <param name="contribuyente">The dto object.</param>
	    /// <returns>The dto key of the newly created contribuyente.</returns>
	    public string CreateContribuyente(ContribuyenteDto contribuyente)
	    {
	        string key = this.ContribuyenteService.Add(contribuyente);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing contribuyente in the database from the given dto object.
	    /// </summary>
	    /// <param name="contribuyente">The dto object.</param>
	    public void UpdateContribuyente(ContribuyenteDto contribuyente)
	    {
	        this.ContribuyenteService.Update(contribuyente);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update contribuyentes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="contribuyentes">The dto object list.</param>
	    public void UpdateContribuyentes(IEnumerable<ContribuyenteDto> contribuyentes)
	    {
	        if (contribuyentes == null)
	        {
	            return;
	        }
	
	        foreach (ContribuyenteDto contribuyente in contribuyentes)
	        {
	            if (contribuyente == null)
	            {
	                continue;
	            }
	            
	            this.UpdateContribuyente(contribuyente);
	        }
	    }
	
	    /// <summary>
	    /// Deletes contribuyente from the database by the given dto object.
	    /// </summary>
	    /// <param name="contribuyente">The dto object.</param>
	    public void DeleteContribuyente(ContribuyenteDto contribuyente)
	    {
	        this.ContribuyenteService.Delete(contribuyente);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete contribuyentes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="contribuyentes">The dto object list.</param>
	    public void DeleteContribuyentes(IEnumerable<ContribuyenteDto> contribuyentes)
	    {
	        if (contribuyentes == null)
	        {
	            return;
	        }
	
	        foreach (ContribuyenteDto contribuyente in contribuyentes)
	        {
	            if (contribuyente == null)
	            {
	                continue;
	            }
	            
	            this.DeleteContribuyente(contribuyente);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against ContribuyentesRebaja entity.
	    /// </summary>
	    private IContribuyentesRebajaService contribuyentesrebajaservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against ContribuyentesRebaja entity.
	    /// </summary>
	    public virtual IContribuyentesRebajaService ContribuyentesRebajaService
	    {
	        get
	        {
	            if (this.contribuyentesrebajaservice == null)
	            {
	                IContribuyentesRebajaAssembler assembler = new ContribuyentesRebajaAssembler();
	                IContribuyentesRebajaRepository repository = new ContribuyentesRebajaRepository(this.UnitOfWork);
	
	                this.contribuyentesrebajaservice = new ContribuyentesRebajaService(assembler, repository);
	            }
	            return this.contribuyentesrebajaservice;
	        }
	    }
	        
	    #region ContribuyentesRebajas CRUD Operations
	
	    /// <summary>
	    /// Returns all contribuyentesrebajas.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ContribuyentesRebajaDto> ReadContribuyentesRebajas()	
	    {
	        return this.ContribuyentesRebajaService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of contribuyentesrebajas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ContribuyentesRebajaDto> ReadContribuyentesRebajasPaged(int startIndex, int pageSize)
	    {
	        return this.ContribuyentesRebajaService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all contribuyentesrebajas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ContribuyentesRebajaDto> ReadContribuyentesRebajasFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ContribuyentesRebajaService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of contribuyentesrebajas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ContribuyentesRebajaDto> ReadContribuyentesRebajasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ContribuyentesRebajaService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a contribuyentesrebaja with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ContribuyentesRebajaDto ReadContribuyentesRebaja(string dtoKey)
	    {
	        return this.ContribuyentesRebajaService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all contribuyentesrebajas count.
	    /// </summary>
	    /// <returns></returns>
	    public int ContribuyentesRebajasCount()
	    {
	        return this.ContribuyentesRebajaService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all contribuyentesrebajas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ContribuyentesRebajasCountFiltered(string filterExpression)
	    {
	        return this.ContribuyentesRebajaService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new contribuyentesrebaja from the given dto object into the database.
	    /// </summary>
	    /// <param name="contribuyentesrebaja">The dto object.</param>
	    /// <returns>The dto key of the newly created contribuyentesrebaja.</returns>
	    public string CreateContribuyentesRebaja(ContribuyentesRebajaDto contribuyentesrebaja)
	    {
	        string key = this.ContribuyentesRebajaService.Add(contribuyentesrebaja);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing contribuyentesrebaja in the database from the given dto object.
	    /// </summary>
	    /// <param name="contribuyentesrebaja">The dto object.</param>
	    public void UpdateContribuyentesRebaja(ContribuyentesRebajaDto contribuyentesrebaja)
	    {
	        this.ContribuyentesRebajaService.Update(contribuyentesrebaja);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update contribuyentesrebajas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="contribuyentesrebajas">The dto object list.</param>
	    public void UpdateContribuyentesRebajas(IEnumerable<ContribuyentesRebajaDto> contribuyentesrebajas)
	    {
	        if (contribuyentesrebajas == null)
	        {
	            return;
	        }
	
	        foreach (ContribuyentesRebajaDto contribuyentesrebaja in contribuyentesrebajas)
	        {
	            if (contribuyentesrebaja == null)
	            {
	                continue;
	            }
	            
	            this.UpdateContribuyentesRebaja(contribuyentesrebaja);
	        }
	    }
	
	    /// <summary>
	    /// Deletes contribuyentesrebaja from the database by the given dto object.
	    /// </summary>
	    /// <param name="contribuyentesrebaja">The dto object.</param>
	    public void DeleteContribuyentesRebaja(ContribuyentesRebajaDto contribuyentesrebaja)
	    {
	        this.ContribuyentesRebajaService.Delete(contribuyentesrebaja);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete contribuyentesrebajas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="contribuyentesrebajas">The dto object list.</param>
	    public void DeleteContribuyentesRebajas(IEnumerable<ContribuyentesRebajaDto> contribuyentesrebajas)
	    {
	        if (contribuyentesrebajas == null)
	        {
	            return;
	        }
	
	        foreach (ContribuyentesRebajaDto contribuyentesrebaja in contribuyentesrebajas)
	        {
	            if (contribuyentesrebaja == null)
	            {
	                continue;
	            }
	            
	            this.DeleteContribuyentesRebaja(contribuyentesrebaja);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Convenio entity.
	    /// </summary>
	    private IConvenioService convenioservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Convenio entity.
	    /// </summary>
	    public virtual IConvenioService ConvenioService
	    {
	        get
	        {
	            if (this.convenioservice == null)
	            {
	                IConvenioAssembler assembler = new ConvenioAssembler();
	                IConvenioRepository repository = new ConvenioRepository(this.UnitOfWork);
	
	                this.convenioservice = new ConvenioService(assembler, repository);
	            }
	            return this.convenioservice;
	        }
	    }
	        
	    #region Convenios CRUD Operations
	
	    /// <summary>
	    /// Returns all convenios.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ConvenioDto> ReadConvenios()	
	    {
	        return this.ConvenioService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of convenios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ConvenioDto> ReadConveniosPaged(int startIndex, int pageSize)
	    {
	        return this.ConvenioService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all convenios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ConvenioDto> ReadConveniosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ConvenioService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of convenios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ConvenioDto> ReadConveniosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ConvenioService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a convenio with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ConvenioDto ReadConvenio(string dtoKey)
	    {
	        return this.ConvenioService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all convenios count.
	    /// </summary>
	    /// <returns></returns>
	    public int ConveniosCount()
	    {
	        return this.ConvenioService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all convenios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ConveniosCountFiltered(string filterExpression)
	    {
	        return this.ConvenioService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new convenio from the given dto object into the database.
	    /// </summary>
	    /// <param name="convenio">The dto object.</param>
	    /// <returns>The dto key of the newly created convenio.</returns>
	    public string CreateConvenio(ConvenioDto convenio)
	    {
	        string key = this.ConvenioService.Add(convenio);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing convenio in the database from the given dto object.
	    /// </summary>
	    /// <param name="convenio">The dto object.</param>
	    public void UpdateConvenio(ConvenioDto convenio)
	    {
	        this.ConvenioService.Update(convenio);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update convenios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="convenios">The dto object list.</param>
	    public void UpdateConvenios(IEnumerable<ConvenioDto> convenios)
	    {
	        if (convenios == null)
	        {
	            return;
	        }
	
	        foreach (ConvenioDto convenio in convenios)
	        {
	            if (convenio == null)
	            {
	                continue;
	            }
	            
	            this.UpdateConvenio(convenio);
	        }
	    }
	
	    /// <summary>
	    /// Deletes convenio from the database by the given dto object.
	    /// </summary>
	    /// <param name="convenio">The dto object.</param>
	    public void DeleteConvenio(ConvenioDto convenio)
	    {
	        this.ConvenioService.Delete(convenio);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete convenios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="convenios">The dto object list.</param>
	    public void DeleteConvenios(IEnumerable<ConvenioDto> convenios)
	    {
	        if (convenios == null)
	        {
	            return;
	        }
	
	        foreach (ConvenioDto convenio in convenios)
	        {
	            if (convenio == null)
	            {
	                continue;
	            }
	            
	            this.DeleteConvenio(convenio);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against ConveniosDividendo entity.
	    /// </summary>
	    private IConveniosDividendoService conveniosdividendoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against ConveniosDividendo entity.
	    /// </summary>
	    public virtual IConveniosDividendoService ConveniosDividendoService
	    {
	        get
	        {
	            if (this.conveniosdividendoservice == null)
	            {
	                IConveniosDividendoAssembler assembler = new ConveniosDividendoAssembler();
	                IConveniosDividendoRepository repository = new ConveniosDividendoRepository(this.UnitOfWork);
	
	                this.conveniosdividendoservice = new ConveniosDividendoService(assembler, repository);
	            }
	            return this.conveniosdividendoservice;
	        }
	    }
	        
	    #region ConveniosDividendos CRUD Operations
	
	    /// <summary>
	    /// Returns all conveniosdividendos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ConveniosDividendoDto> ReadConveniosDividendos()	
	    {
	        return this.ConveniosDividendoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of conveniosdividendos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ConveniosDividendoDto> ReadConveniosDividendosPaged(int startIndex, int pageSize)
	    {
	        return this.ConveniosDividendoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all conveniosdividendos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ConveniosDividendoDto> ReadConveniosDividendosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ConveniosDividendoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of conveniosdividendos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ConveniosDividendoDto> ReadConveniosDividendosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ConveniosDividendoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a conveniosdividendo with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ConveniosDividendoDto ReadConveniosDividendo(string dtoKey)
	    {
	        return this.ConveniosDividendoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all conveniosdividendos count.
	    /// </summary>
	    /// <returns></returns>
	    public int ConveniosDividendosCount()
	    {
	        return this.ConveniosDividendoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all conveniosdividendos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ConveniosDividendosCountFiltered(string filterExpression)
	    {
	        return this.ConveniosDividendoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new conveniosdividendo from the given dto object into the database.
	    /// </summary>
	    /// <param name="conveniosdividendo">The dto object.</param>
	    /// <returns>The dto key of the newly created conveniosdividendo.</returns>
	    public string CreateConveniosDividendo(ConveniosDividendoDto conveniosdividendo)
	    {
	        string key = this.ConveniosDividendoService.Add(conveniosdividendo);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing conveniosdividendo in the database from the given dto object.
	    /// </summary>
	    /// <param name="conveniosdividendo">The dto object.</param>
	    public void UpdateConveniosDividendo(ConveniosDividendoDto conveniosdividendo)
	    {
	        this.ConveniosDividendoService.Update(conveniosdividendo);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update conveniosdividendos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="conveniosdividendos">The dto object list.</param>
	    public void UpdateConveniosDividendos(IEnumerable<ConveniosDividendoDto> conveniosdividendos)
	    {
	        if (conveniosdividendos == null)
	        {
	            return;
	        }
	
	        foreach (ConveniosDividendoDto conveniosdividendo in conveniosdividendos)
	        {
	            if (conveniosdividendo == null)
	            {
	                continue;
	            }
	            
	            this.UpdateConveniosDividendo(conveniosdividendo);
	        }
	    }
	
	    /// <summary>
	    /// Deletes conveniosdividendo from the database by the given dto object.
	    /// </summary>
	    /// <param name="conveniosdividendo">The dto object.</param>
	    public void DeleteConveniosDividendo(ConveniosDividendoDto conveniosdividendo)
	    {
	        this.ConveniosDividendoService.Delete(conveniosdividendo);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete conveniosdividendos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="conveniosdividendos">The dto object list.</param>
	    public void DeleteConveniosDividendos(IEnumerable<ConveniosDividendoDto> conveniosdividendos)
	    {
	        if (conveniosdividendos == null)
	        {
	            return;
	        }
	
	        foreach (ConveniosDividendoDto conveniosdividendo in conveniosdividendos)
	        {
	            if (conveniosdividendo == null)
	            {
	                continue;
	            }
	            
	            this.DeleteConveniosDividendo(conveniosdividendo);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against ConvenioTransaccion entity.
	    /// </summary>
	    private IConvenioTransaccionService conveniotransaccionservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against ConvenioTransaccion entity.
	    /// </summary>
	    public virtual IConvenioTransaccionService ConvenioTransaccionService
	    {
	        get
	        {
	            if (this.conveniotransaccionservice == null)
	            {
	                IConvenioTransaccionAssembler assembler = new ConvenioTransaccionAssembler();
	                IConvenioTransaccionRepository repository = new ConvenioTransaccionRepository(this.UnitOfWork);
	
	                this.conveniotransaccionservice = new ConvenioTransaccionService(assembler, repository);
	            }
	            return this.conveniotransaccionservice;
	        }
	    }
	        
	    #region ConvenioTransaccions CRUD Operations
	
	    /// <summary>
	    /// Returns all conveniotransaccions.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ConvenioTransaccionDto> ReadConvenioTransaccions()	
	    {
	        return this.ConvenioTransaccionService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of conveniotransaccions from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ConvenioTransaccionDto> ReadConvenioTransaccionsPaged(int startIndex, int pageSize)
	    {
	        return this.ConvenioTransaccionService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all conveniotransaccions filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ConvenioTransaccionDto> ReadConvenioTransaccionsFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ConvenioTransaccionService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of conveniotransaccions from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ConvenioTransaccionDto> ReadConvenioTransaccionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ConvenioTransaccionService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a conveniotransaccion with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ConvenioTransaccionDto ReadConvenioTransaccion(string dtoKey)
	    {
	        return this.ConvenioTransaccionService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all conveniotransaccions count.
	    /// </summary>
	    /// <returns></returns>
	    public int ConvenioTransaccionsCount()
	    {
	        return this.ConvenioTransaccionService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all conveniotransaccions count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ConvenioTransaccionsCountFiltered(string filterExpression)
	    {
	        return this.ConvenioTransaccionService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new conveniotransaccion from the given dto object into the database.
	    /// </summary>
	    /// <param name="conveniotransaccion">The dto object.</param>
	    /// <returns>The dto key of the newly created conveniotransaccion.</returns>
	    public string CreateConvenioTransaccion(ConvenioTransaccionDto conveniotransaccion)
	    {
	        string key = this.ConvenioTransaccionService.Add(conveniotransaccion);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing conveniotransaccion in the database from the given dto object.
	    /// </summary>
	    /// <param name="conveniotransaccion">The dto object.</param>
	    public void UpdateConvenioTransaccion(ConvenioTransaccionDto conveniotransaccion)
	    {
	        this.ConvenioTransaccionService.Update(conveniotransaccion);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update conveniotransaccions in the database from the given dto object list.
	    /// </summary>
	    /// <param name="conveniotransaccions">The dto object list.</param>
	    public void UpdateConvenioTransaccions(IEnumerable<ConvenioTransaccionDto> conveniotransaccions)
	    {
	        if (conveniotransaccions == null)
	        {
	            return;
	        }
	
	        foreach (ConvenioTransaccionDto conveniotransaccion in conveniotransaccions)
	        {
	            if (conveniotransaccion == null)
	            {
	                continue;
	            }
	            
	            this.UpdateConvenioTransaccion(conveniotransaccion);
	        }
	    }
	
	    /// <summary>
	    /// Deletes conveniotransaccion from the database by the given dto object.
	    /// </summary>
	    /// <param name="conveniotransaccion">The dto object.</param>
	    public void DeleteConvenioTransaccion(ConvenioTransaccionDto conveniotransaccion)
	    {
	        this.ConvenioTransaccionService.Delete(conveniotransaccion);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete conveniotransaccions from the database by the given dto object list.
	    /// </summary>
	    /// <param name="conveniotransaccions">The dto object list.</param>
	    public void DeleteConvenioTransaccions(IEnumerable<ConvenioTransaccionDto> conveniotransaccions)
	    {
	        if (conveniotransaccions == null)
	        {
	            return;
	        }
	
	        foreach (ConvenioTransaccionDto conveniotransaccion in conveniotransaccions)
	        {
	            if (conveniotransaccion == null)
	            {
	                continue;
	            }
	            
	            this.DeleteConvenioTransaccion(conveniotransaccion);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against CuentaBancaria entity.
	    /// </summary>
	    private ICuentaBancariaService cuentabancariaservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against CuentaBancaria entity.
	    /// </summary>
	    public virtual ICuentaBancariaService CuentaBancariaService
	    {
	        get
	        {
	            if (this.cuentabancariaservice == null)
	            {
	                ICuentaBancariaAssembler assembler = new CuentaBancariaAssembler();
	                ICuentaBancariaRepository repository = new CuentaBancariaRepository(this.UnitOfWork);
	
	                this.cuentabancariaservice = new CuentaBancariaService(assembler, repository);
	            }
	            return this.cuentabancariaservice;
	        }
	    }
	        
	    #region CuentaBancarias CRUD Operations
	
	    /// <summary>
	    /// Returns all cuentabancarias.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<CuentaBancariaDto> ReadCuentaBancarias()	
	    {
	        return this.CuentaBancariaService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cuentabancarias from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<CuentaBancariaDto> ReadCuentaBancariasPaged(int startIndex, int pageSize)
	    {
	        return this.CuentaBancariaService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all cuentabancarias filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CuentaBancariaDto> ReadCuentaBancariasFiltered(string sortExpression, string filterExpression)
	    {
	        return this.CuentaBancariaService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of cuentabancarias from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<CuentaBancariaDto> ReadCuentaBancariasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.CuentaBancariaService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a cuentabancaria with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public CuentaBancariaDto ReadCuentaBancaria(string dtoKey)
	    {
	        return this.CuentaBancariaService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all cuentabancarias count.
	    /// </summary>
	    /// <returns></returns>
	    public int CuentaBancariasCount()
	    {
	        return this.CuentaBancariaService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all cuentabancarias count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int CuentaBancariasCountFiltered(string filterExpression)
	    {
	        return this.CuentaBancariaService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new cuentabancaria from the given dto object into the database.
	    /// </summary>
	    /// <param name="cuentabancaria">The dto object.</param>
	    /// <returns>The dto key of the newly created cuentabancaria.</returns>
	    public string CreateCuentaBancaria(CuentaBancariaDto cuentabancaria)
	    {
	        string key = this.CuentaBancariaService.Add(cuentabancaria);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing cuentabancaria in the database from the given dto object.
	    /// </summary>
	    /// <param name="cuentabancaria">The dto object.</param>
	    public void UpdateCuentaBancaria(CuentaBancariaDto cuentabancaria)
	    {
	        this.CuentaBancariaService.Update(cuentabancaria);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update cuentabancarias in the database from the given dto object list.
	    /// </summary>
	    /// <param name="cuentabancarias">The dto object list.</param>
	    public void UpdateCuentaBancarias(IEnumerable<CuentaBancariaDto> cuentabancarias)
	    {
	        if (cuentabancarias == null)
	        {
	            return;
	        }
	
	        foreach (CuentaBancariaDto cuentabancaria in cuentabancarias)
	        {
	            if (cuentabancaria == null)
	            {
	                continue;
	            }
	            
	            this.UpdateCuentaBancaria(cuentabancaria);
	        }
	    }
	
	    /// <summary>
	    /// Deletes cuentabancaria from the database by the given dto object.
	    /// </summary>
	    /// <param name="cuentabancaria">The dto object.</param>
	    public void DeleteCuentaBancaria(CuentaBancariaDto cuentabancaria)
	    {
	        this.CuentaBancariaService.Delete(cuentabancaria);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete cuentabancarias from the database by the given dto object list.
	    /// </summary>
	    /// <param name="cuentabancarias">The dto object list.</param>
	    public void DeleteCuentaBancarias(IEnumerable<CuentaBancariaDto> cuentabancarias)
	    {
	        if (cuentabancarias == null)
	        {
	            return;
	        }
	
	        foreach (CuentaBancariaDto cuentabancaria in cuentabancarias)
	        {
	            if (cuentabancaria == null)
	            {
	                continue;
	            }
	            
	            this.DeleteCuentaBancaria(cuentabancaria);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Funcion entity.
	    /// </summary>
	    private IFuncionService funcionservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Funcion entity.
	    /// </summary>
	    public virtual IFuncionService FuncionService
	    {
	        get
	        {
	            if (this.funcionservice == null)
	            {
	                IFuncionAssembler assembler = new FuncionAssembler();
	                IFuncionRepository repository = new FuncionRepository(this.UnitOfWork);
	
	                this.funcionservice = new FuncionService(assembler, repository);
	            }
	            return this.funcionservice;
	        }
	    }
	        
	    #region Funcions CRUD Operations
	
	    /// <summary>
	    /// Returns all funcions.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<FuncionDto> ReadFuncions()	
	    {
	        return this.FuncionService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of funcions from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<FuncionDto> ReadFuncionsPaged(int startIndex, int pageSize)
	    {
	        return this.FuncionService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all funcions filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<FuncionDto> ReadFuncionsFiltered(string sortExpression, string filterExpression)
	    {
	        return this.FuncionService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of funcions from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<FuncionDto> ReadFuncionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.FuncionService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a funcion with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public FuncionDto ReadFuncion(string dtoKey)
	    {
	        return this.FuncionService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all funcions count.
	    /// </summary>
	    /// <returns></returns>
	    public int FuncionsCount()
	    {
	        return this.FuncionService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all funcions count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int FuncionsCountFiltered(string filterExpression)
	    {
	        return this.FuncionService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new funcion from the given dto object into the database.
	    /// </summary>
	    /// <param name="funcion">The dto object.</param>
	    /// <returns>The dto key of the newly created funcion.</returns>
	    public string CreateFuncion(FuncionDto funcion)
	    {
	        string key = this.FuncionService.Add(funcion);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing funcion in the database from the given dto object.
	    /// </summary>
	    /// <param name="funcion">The dto object.</param>
	    public void UpdateFuncion(FuncionDto funcion)
	    {
	        this.FuncionService.Update(funcion);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update funcions in the database from the given dto object list.
	    /// </summary>
	    /// <param name="funcions">The dto object list.</param>
	    public void UpdateFuncions(IEnumerable<FuncionDto> funcions)
	    {
	        if (funcions == null)
	        {
	            return;
	        }
	
	        foreach (FuncionDto funcion in funcions)
	        {
	            if (funcion == null)
	            {
	                continue;
	            }
	            
	            this.UpdateFuncion(funcion);
	        }
	    }
	
	    /// <summary>
	    /// Deletes funcion from the database by the given dto object.
	    /// </summary>
	    /// <param name="funcion">The dto object.</param>
	    public void DeleteFuncion(FuncionDto funcion)
	    {
	        this.FuncionService.Delete(funcion);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete funcions from the database by the given dto object list.
	    /// </summary>
	    /// <param name="funcions">The dto object list.</param>
	    public void DeleteFuncions(IEnumerable<FuncionDto> funcions)
	    {
	        if (funcions == null)
	        {
	            return;
	        }
	
	        foreach (FuncionDto funcion in funcions)
	        {
	            if (funcion == null)
	            {
	                continue;
	            }
	            
	            this.DeleteFuncion(funcion);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Mejora entity.
	    /// </summary>
	    private IMejoraService mejoraservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Mejora entity.
	    /// </summary>
	    public virtual IMejoraService MejoraService
	    {
	        get
	        {
	            if (this.mejoraservice == null)
	            {
	                IMejoraAssembler assembler = new MejoraAssembler();
	                IMejoraRepository repository = new MejoraRepository(this.UnitOfWork);
	
	                this.mejoraservice = new MejoraService(assembler, repository);
	            }
	            return this.mejoraservice;
	        }
	    }
	        
	    #region Mejoras CRUD Operations
	
	    /// <summary>
	    /// Returns all mejoras.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<MejoraDto> ReadMejoras()	
	    {
	        return this.MejoraService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of mejoras from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<MejoraDto> ReadMejorasPaged(int startIndex, int pageSize)
	    {
	        return this.MejoraService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all mejoras filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<MejoraDto> ReadMejorasFiltered(string sortExpression, string filterExpression)
	    {
	        return this.MejoraService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of mejoras from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<MejoraDto> ReadMejorasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.MejoraService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a mejora with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public MejoraDto ReadMejora(string dtoKey)
	    {
	        return this.MejoraService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all mejoras count.
	    /// </summary>
	    /// <returns></returns>
	    public int MejorasCount()
	    {
	        return this.MejoraService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all mejoras count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int MejorasCountFiltered(string filterExpression)
	    {
	        return this.MejoraService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new mejora from the given dto object into the database.
	    /// </summary>
	    /// <param name="mejora">The dto object.</param>
	    /// <returns>The dto key of the newly created mejora.</returns>
	    public string CreateMejora(MejoraDto mejora)
	    {
	        string key = this.MejoraService.Add(mejora);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing mejora in the database from the given dto object.
	    /// </summary>
	    /// <param name="mejora">The dto object.</param>
	    public void UpdateMejora(MejoraDto mejora)
	    {
	        this.MejoraService.Update(mejora);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update mejoras in the database from the given dto object list.
	    /// </summary>
	    /// <param name="mejoras">The dto object list.</param>
	    public void UpdateMejoras(IEnumerable<MejoraDto> mejoras)
	    {
	        if (mejoras == null)
	        {
	            return;
	        }
	
	        foreach (MejoraDto mejora in mejoras)
	        {
	            if (mejora == null)
	            {
	                continue;
	            }
	            
	            this.UpdateMejora(mejora);
	        }
	    }
	
	    /// <summary>
	    /// Deletes mejora from the database by the given dto object.
	    /// </summary>
	    /// <param name="mejora">The dto object.</param>
	    public void DeleteMejora(MejoraDto mejora)
	    {
	        this.MejoraService.Delete(mejora);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete mejoras from the database by the given dto object list.
	    /// </summary>
	    /// <param name="mejoras">The dto object list.</param>
	    public void DeleteMejoras(IEnumerable<MejoraDto> mejoras)
	    {
	        if (mejoras == null)
	        {
	            return;
	        }
	
	        foreach (MejoraDto mejora in mejoras)
	        {
	            if (mejora == null)
	            {
	                continue;
	            }
	            
	            this.DeleteMejora(mejora);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against MejoraElemento entity.
	    /// </summary>
	    private IMejoraElementoService mejoraelementoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against MejoraElemento entity.
	    /// </summary>
	    public virtual IMejoraElementoService MejoraElementoService
	    {
	        get
	        {
	            if (this.mejoraelementoservice == null)
	            {
	                IMejoraElementoAssembler assembler = new MejoraElementoAssembler();
	                IMejoraElementoRepository repository = new MejoraElementoRepository(this.UnitOfWork);
	
	                this.mejoraelementoservice = new MejoraElementoService(assembler, repository);
	            }
	            return this.mejoraelementoservice;
	        }
	    }
	        
	    #region MejoraElementos CRUD Operations
	
	    /// <summary>
	    /// Returns all mejoraelementos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<MejoraElementoDto> ReadMejoraElementos()	
	    {
	        return this.MejoraElementoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of mejoraelementos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<MejoraElementoDto> ReadMejoraElementosPaged(int startIndex, int pageSize)
	    {
	        return this.MejoraElementoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all mejoraelementos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<MejoraElementoDto> ReadMejoraElementosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.MejoraElementoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of mejoraelementos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<MejoraElementoDto> ReadMejoraElementosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.MejoraElementoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a mejoraelemento with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public MejoraElementoDto ReadMejoraElemento(string dtoKey)
	    {
	        return this.MejoraElementoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all mejoraelementos count.
	    /// </summary>
	    /// <returns></returns>
	    public int MejoraElementosCount()
	    {
	        return this.MejoraElementoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all mejoraelementos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int MejoraElementosCountFiltered(string filterExpression)
	    {
	        return this.MejoraElementoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new mejoraelemento from the given dto object into the database.
	    /// </summary>
	    /// <param name="mejoraelemento">The dto object.</param>
	    /// <returns>The dto key of the newly created mejoraelemento.</returns>
	    public string CreateMejoraElemento(MejoraElementoDto mejoraelemento)
	    {
	        string key = this.MejoraElementoService.Add(mejoraelemento);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing mejoraelemento in the database from the given dto object.
	    /// </summary>
	    /// <param name="mejoraelemento">The dto object.</param>
	    public void UpdateMejoraElemento(MejoraElementoDto mejoraelemento)
	    {
	        this.MejoraElementoService.Update(mejoraelemento);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update mejoraelementos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="mejoraelementos">The dto object list.</param>
	    public void UpdateMejoraElementos(IEnumerable<MejoraElementoDto> mejoraelementos)
	    {
	        if (mejoraelementos == null)
	        {
	            return;
	        }
	
	        foreach (MejoraElementoDto mejoraelemento in mejoraelementos)
	        {
	            if (mejoraelemento == null)
	            {
	                continue;
	            }
	            
	            this.UpdateMejoraElemento(mejoraelemento);
	        }
	    }
	
	    /// <summary>
	    /// Deletes mejoraelemento from the database by the given dto object.
	    /// </summary>
	    /// <param name="mejoraelemento">The dto object.</param>
	    public void DeleteMejoraElemento(MejoraElementoDto mejoraelemento)
	    {
	        this.MejoraElementoService.Delete(mejoraelemento);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete mejoraelementos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="mejoraelementos">The dto object list.</param>
	    public void DeleteMejoraElementos(IEnumerable<MejoraElementoDto> mejoraelementos)
	    {
	        if (mejoraelementos == null)
	        {
	            return;
	        }
	
	        foreach (MejoraElementoDto mejoraelemento in mejoraelementos)
	        {
	            if (mejoraelemento == null)
	            {
	                continue;
	            }
	            
	            this.DeleteMejoraElemento(mejoraelemento);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Modulo entity.
	    /// </summary>
	    private IModuloService moduloservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Modulo entity.
	    /// </summary>
	    public virtual IModuloService ModuloService
	    {
	        get
	        {
	            if (this.moduloservice == null)
	            {
	                IModuloAssembler assembler = new ModuloAssembler();
	                IModuloRepository repository = new ModuloRepository(this.UnitOfWork);
	
	                this.moduloservice = new ModuloService(assembler, repository);
	            }
	            return this.moduloservice;
	        }
	    }
	        
	    #region Modulos CRUD Operations
	
	    /// <summary>
	    /// Returns all modulos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ModuloDto> ReadModulos()	
	    {
	        return this.ModuloService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of modulos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ModuloDto> ReadModulosPaged(int startIndex, int pageSize)
	    {
	        return this.ModuloService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all modulos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ModuloDto> ReadModulosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ModuloService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of modulos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ModuloDto> ReadModulosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ModuloService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a modulo with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ModuloDto ReadModulo(string dtoKey)
	    {
	        return this.ModuloService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all modulos count.
	    /// </summary>
	    /// <returns></returns>
	    public int ModulosCount()
	    {
	        return this.ModuloService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all modulos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ModulosCountFiltered(string filterExpression)
	    {
	        return this.ModuloService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new modulo from the given dto object into the database.
	    /// </summary>
	    /// <param name="modulo">The dto object.</param>
	    /// <returns>The dto key of the newly created modulo.</returns>
	    public string CreateModulo(ModuloDto modulo)
	    {
	        string key = this.ModuloService.Add(modulo);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing modulo in the database from the given dto object.
	    /// </summary>
	    /// <param name="modulo">The dto object.</param>
	    public void UpdateModulo(ModuloDto modulo)
	    {
	        this.ModuloService.Update(modulo);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update modulos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="modulos">The dto object list.</param>
	    public void UpdateModulos(IEnumerable<ModuloDto> modulos)
	    {
	        if (modulos == null)
	        {
	            return;
	        }
	
	        foreach (ModuloDto modulo in modulos)
	        {
	            if (modulo == null)
	            {
	                continue;
	            }
	            
	            this.UpdateModulo(modulo);
	        }
	    }
	
	    /// <summary>
	    /// Deletes modulo from the database by the given dto object.
	    /// </summary>
	    /// <param name="modulo">The dto object.</param>
	    public void DeleteModulo(ModuloDto modulo)
	    {
	        this.ModuloService.Delete(modulo);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete modulos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="modulos">The dto object list.</param>
	    public void DeleteModulos(IEnumerable<ModuloDto> modulos)
	    {
	        if (modulos == null)
	        {
	            return;
	        }
	
	        foreach (ModuloDto modulo in modulos)
	        {
	            if (modulo == null)
	            {
	                continue;
	            }
	            
	            this.DeleteModulo(modulo);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against ModuloUsuario entity.
	    /// </summary>
	    private IModuloUsuarioService modulousuarioservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against ModuloUsuario entity.
	    /// </summary>
	    public virtual IModuloUsuarioService ModuloUsuarioService
	    {
	        get
	        {
	            if (this.modulousuarioservice == null)
	            {
	                IModuloUsuarioAssembler assembler = new ModuloUsuarioAssembler();
	                IModuloUsuarioRepository repository = new ModuloUsuarioRepository(this.UnitOfWork);
	
	                this.modulousuarioservice = new ModuloUsuarioService(assembler, repository);
	            }
	            return this.modulousuarioservice;
	        }
	    }
	        
	    #region ModuloUsuarios CRUD Operations
	
	    /// <summary>
	    /// Returns all modulousuarios.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ModuloUsuarioDto> ReadModuloUsuarios()	
	    {
	        return this.ModuloUsuarioService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of modulousuarios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ModuloUsuarioDto> ReadModuloUsuariosPaged(int startIndex, int pageSize)
	    {
	        return this.ModuloUsuarioService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all modulousuarios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ModuloUsuarioDto> ReadModuloUsuariosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ModuloUsuarioService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of modulousuarios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ModuloUsuarioDto> ReadModuloUsuariosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ModuloUsuarioService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a modulousuario with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ModuloUsuarioDto ReadModuloUsuario(string dtoKey)
	    {
	        return this.ModuloUsuarioService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all modulousuarios count.
	    /// </summary>
	    /// <returns></returns>
	    public int ModuloUsuariosCount()
	    {
	        return this.ModuloUsuarioService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all modulousuarios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ModuloUsuariosCountFiltered(string filterExpression)
	    {
	        return this.ModuloUsuarioService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new modulousuario from the given dto object into the database.
	    /// </summary>
	    /// <param name="modulousuario">The dto object.</param>
	    /// <returns>The dto key of the newly created modulousuario.</returns>
	    public string CreateModuloUsuario(ModuloUsuarioDto modulousuario)
	    {
	        string key = this.ModuloUsuarioService.Add(modulousuario);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing modulousuario in the database from the given dto object.
	    /// </summary>
	    /// <param name="modulousuario">The dto object.</param>
	    public void UpdateModuloUsuario(ModuloUsuarioDto modulousuario)
	    {
	        this.ModuloUsuarioService.Update(modulousuario);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update modulousuarios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="modulousuarios">The dto object list.</param>
	    public void UpdateModuloUsuarios(IEnumerable<ModuloUsuarioDto> modulousuarios)
	    {
	        if (modulousuarios == null)
	        {
	            return;
	        }
	
	        foreach (ModuloUsuarioDto modulousuario in modulousuarios)
	        {
	            if (modulousuario == null)
	            {
	                continue;
	            }
	            
	            this.UpdateModuloUsuario(modulousuario);
	        }
	    }
	
	    /// <summary>
	    /// Deletes modulousuario from the database by the given dto object.
	    /// </summary>
	    /// <param name="modulousuario">The dto object.</param>
	    public void DeleteModuloUsuario(ModuloUsuarioDto modulousuario)
	    {
	        this.ModuloUsuarioService.Delete(modulousuario);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete modulousuarios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="modulousuarios">The dto object list.</param>
	    public void DeleteModuloUsuarios(IEnumerable<ModuloUsuarioDto> modulousuarios)
	    {
	        if (modulousuarios == null)
	        {
	            return;
	        }
	
	        foreach (ModuloUsuarioDto modulousuario in modulousuarios)
	        {
	            if (modulousuario == null)
	            {
	                continue;
	            }
	            
	            this.DeleteModuloUsuario(modulousuario);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Patente entity.
	    /// </summary>
	    private IPatenteService patenteservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Patente entity.
	    /// </summary>
	    public virtual IPatenteService PatenteService
	    {
	        get
	        {
	            if (this.patenteservice == null)
	            {
	                IPatenteAssembler assembler = new PatenteAssembler();
	                IPatenteRepository repository = new PatenteRepository(this.UnitOfWork);
	
	                this.patenteservice = new PatenteService(assembler, repository);
	            }
	            return this.patenteservice;
	        }
	    }
	        
	    #region Patentes CRUD Operations
	
	    /// <summary>
	    /// Returns all patentes.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<PatenteDto> ReadPatentes()	
	    {
	        return this.PatenteService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of patentes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<PatenteDto> ReadPatentesPaged(int startIndex, int pageSize)
	    {
	        return this.PatenteService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all patentes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PatenteDto> ReadPatentesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.PatenteService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of patentes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PatenteDto> ReadPatentesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.PatenteService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a patente with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public PatenteDto ReadPatente(string dtoKey)
	    {
	        return this.PatenteService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all patentes count.
	    /// </summary>
	    /// <returns></returns>
	    public int PatentesCount()
	    {
	        return this.PatenteService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all patentes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int PatentesCountFiltered(string filterExpression)
	    {
	        return this.PatenteService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new patente from the given dto object into the database.
	    /// </summary>
	    /// <param name="patente">The dto object.</param>
	    /// <returns>The dto key of the newly created patente.</returns>
	    public string CreatePatente(PatenteDto patente)
	    {
	        string key = this.PatenteService.Add(patente);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing patente in the database from the given dto object.
	    /// </summary>
	    /// <param name="patente">The dto object.</param>
	    public void UpdatePatente(PatenteDto patente)
	    {
	        this.PatenteService.Update(patente);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update patentes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="patentes">The dto object list.</param>
	    public void UpdatePatentes(IEnumerable<PatenteDto> patentes)
	    {
	        if (patentes == null)
	        {
	            return;
	        }
	
	        foreach (PatenteDto patente in patentes)
	        {
	            if (patente == null)
	            {
	                continue;
	            }
	            
	            this.UpdatePatente(patente);
	        }
	    }
	
	    /// <summary>
	    /// Deletes patente from the database by the given dto object.
	    /// </summary>
	    /// <param name="patente">The dto object.</param>
	    public void DeletePatente(PatenteDto patente)
	    {
	        this.PatenteService.Delete(patente);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete patentes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="patentes">The dto object list.</param>
	    public void DeletePatentes(IEnumerable<PatenteDto> patentes)
	    {
	        if (patentes == null)
	        {
	            return;
	        }
	
	        foreach (PatenteDto patente in patentes)
	        {
	            if (patente == null)
	            {
	                continue;
	            }
	            
	            this.DeletePatente(patente);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against PatentesComponente entity.
	    /// </summary>
	    private IPatentesComponenteService patentescomponenteservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against PatentesComponente entity.
	    /// </summary>
	    public virtual IPatentesComponenteService PatentesComponenteService
	    {
	        get
	        {
	            if (this.patentescomponenteservice == null)
	            {
	                IPatentesComponenteAssembler assembler = new PatentesComponenteAssembler();
	                IPatentesComponenteRepository repository = new PatentesComponenteRepository(this.UnitOfWork);
	
	                this.patentescomponenteservice = new PatentesComponenteService(assembler, repository);
	            }
	            return this.patentescomponenteservice;
	        }
	    }
	        
	    #region PatentesComponentes CRUD Operations
	
	    /// <summary>
	    /// Returns all patentescomponentes.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<PatentesComponenteDto> ReadPatentesComponentes()	
	    {
	        return this.PatentesComponenteService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of patentescomponentes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<PatentesComponenteDto> ReadPatentesComponentesPaged(int startIndex, int pageSize)
	    {
	        return this.PatentesComponenteService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all patentescomponentes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PatentesComponenteDto> ReadPatentesComponentesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.PatentesComponenteService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of patentescomponentes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PatentesComponenteDto> ReadPatentesComponentesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.PatentesComponenteService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a patentescomponente with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public PatentesComponenteDto ReadPatentesComponente(string dtoKey)
	    {
	        return this.PatentesComponenteService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all patentescomponentes count.
	    /// </summary>
	    /// <returns></returns>
	    public int PatentesComponentesCount()
	    {
	        return this.PatentesComponenteService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all patentescomponentes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int PatentesComponentesCountFiltered(string filterExpression)
	    {
	        return this.PatentesComponenteService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new patentescomponente from the given dto object into the database.
	    /// </summary>
	    /// <param name="patentescomponente">The dto object.</param>
	    /// <returns>The dto key of the newly created patentescomponente.</returns>
	    public string CreatePatentesComponente(PatentesComponenteDto patentescomponente)
	    {
	        string key = this.PatentesComponenteService.Add(patentescomponente);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing patentescomponente in the database from the given dto object.
	    /// </summary>
	    /// <param name="patentescomponente">The dto object.</param>
	    public void UpdatePatentesComponente(PatentesComponenteDto patentescomponente)
	    {
	        this.PatentesComponenteService.Update(patentescomponente);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update patentescomponentes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="patentescomponentes">The dto object list.</param>
	    public void UpdatePatentesComponentes(IEnumerable<PatentesComponenteDto> patentescomponentes)
	    {
	        if (patentescomponentes == null)
	        {
	            return;
	        }
	
	        foreach (PatentesComponenteDto patentescomponente in patentescomponentes)
	        {
	            if (patentescomponente == null)
	            {
	                continue;
	            }
	            
	            this.UpdatePatentesComponente(patentescomponente);
	        }
	    }
	
	    /// <summary>
	    /// Deletes patentescomponente from the database by the given dto object.
	    /// </summary>
	    /// <param name="patentescomponente">The dto object.</param>
	    public void DeletePatentesComponente(PatentesComponenteDto patentescomponente)
	    {
	        this.PatentesComponenteService.Delete(patentescomponente);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete patentescomponentes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="patentescomponentes">The dto object list.</param>
	    public void DeletePatentesComponentes(IEnumerable<PatentesComponenteDto> patentescomponentes)
	    {
	        if (patentescomponentes == null)
	        {
	            return;
	        }
	
	        foreach (PatentesComponenteDto patentescomponente in patentescomponentes)
	        {
	            if (patentescomponente == null)
	            {
	                continue;
	            }
	            
	            this.DeletePatentesComponente(patentescomponente);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Planilla entity.
	    /// </summary>
	    private IPlanillaService planillaservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Planilla entity.
	    /// </summary>
	    public virtual IPlanillaService PlanillaService
	    {
	        get
	        {
	            if (this.planillaservice == null)
	            {
	                IPlanillaAssembler assembler = new PlanillaAssembler();
	                IPlanillaRepository repository = new PlanillaRepository(this.UnitOfWork);
	
	                this.planillaservice = new PlanillaService(assembler, repository);
	            }
	            return this.planillaservice;
	        }
	    }
	        
	    #region Planillas CRUD Operations
	
	    /// <summary>
	    /// Returns all planillas.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<PlanillaDto> ReadPlanillas()	
	    {
	        return this.PlanillaService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of planillas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<PlanillaDto> ReadPlanillasPaged(int startIndex, int pageSize)
	    {
	        return this.PlanillaService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all planillas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PlanillaDto> ReadPlanillasFiltered(string sortExpression, string filterExpression)
	    {
	        return this.PlanillaService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of planillas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PlanillaDto> ReadPlanillasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.PlanillaService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a planilla with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public PlanillaDto ReadPlanilla(string dtoKey)
	    {
	        return this.PlanillaService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all planillas count.
	    /// </summary>
	    /// <returns></returns>
	    public int PlanillasCount()
	    {
	        return this.PlanillaService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all planillas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int PlanillasCountFiltered(string filterExpression)
	    {
	        return this.PlanillaService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new planilla from the given dto object into the database.
	    /// </summary>
	    /// <param name="planilla">The dto object.</param>
	    /// <returns>The dto key of the newly created planilla.</returns>
	    public string CreatePlanilla(PlanillaDto planilla)
	    {
	        string key = this.PlanillaService.Add(planilla);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing planilla in the database from the given dto object.
	    /// </summary>
	    /// <param name="planilla">The dto object.</param>
	    public void UpdatePlanilla(PlanillaDto planilla)
	    {
	        this.PlanillaService.Update(planilla);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update planillas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="planillas">The dto object list.</param>
	    public void UpdatePlanillas(IEnumerable<PlanillaDto> planillas)
	    {
	        if (planillas == null)
	        {
	            return;
	        }
	
	        foreach (PlanillaDto planilla in planillas)
	        {
	            if (planilla == null)
	            {
	                continue;
	            }
	            
	            this.UpdatePlanilla(planilla);
	        }
	    }
	
	    /// <summary>
	    /// Deletes planilla from the database by the given dto object.
	    /// </summary>
	    /// <param name="planilla">The dto object.</param>
	    public void DeletePlanilla(PlanillaDto planilla)
	    {
	        this.PlanillaService.Delete(planilla);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete planillas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="planillas">The dto object list.</param>
	    public void DeletePlanillas(IEnumerable<PlanillaDto> planillas)
	    {
	        if (planillas == null)
	        {
	            return;
	        }
	
	        foreach (PlanillaDto planilla in planillas)
	        {
	            if (planilla == null)
	            {
	                continue;
	            }
	            
	            this.DeletePlanilla(planilla);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against PlanillaAtributo entity.
	    /// </summary>
	    private IPlanillaAtributoService planillaatributoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against PlanillaAtributo entity.
	    /// </summary>
	    public virtual IPlanillaAtributoService PlanillaAtributoService
	    {
	        get
	        {
	            if (this.planillaatributoservice == null)
	            {
	                IPlanillaAtributoAssembler assembler = new PlanillaAtributoAssembler();
	                IPlanillaAtributoRepository repository = new PlanillaAtributoRepository(this.UnitOfWork);
	
	                this.planillaatributoservice = new PlanillaAtributoService(assembler, repository);
	            }
	            return this.planillaatributoservice;
	        }
	    }
	        
	    #region PlanillaAtributos CRUD Operations
	
	    /// <summary>
	    /// Returns all planillaatributos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<PlanillaAtributoDto> ReadPlanillaAtributos()	
	    {
	        return this.PlanillaAtributoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of planillaatributos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<PlanillaAtributoDto> ReadPlanillaAtributosPaged(int startIndex, int pageSize)
	    {
	        return this.PlanillaAtributoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all planillaatributos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PlanillaAtributoDto> ReadPlanillaAtributosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.PlanillaAtributoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of planillaatributos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PlanillaAtributoDto> ReadPlanillaAtributosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.PlanillaAtributoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a planillaatributo with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public PlanillaAtributoDto ReadPlanillaAtributo(string dtoKey)
	    {
	        return this.PlanillaAtributoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all planillaatributos count.
	    /// </summary>
	    /// <returns></returns>
	    public int PlanillaAtributosCount()
	    {
	        return this.PlanillaAtributoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all planillaatributos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int PlanillaAtributosCountFiltered(string filterExpression)
	    {
	        return this.PlanillaAtributoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new planillaatributo from the given dto object into the database.
	    /// </summary>
	    /// <param name="planillaatributo">The dto object.</param>
	    /// <returns>The dto key of the newly created planillaatributo.</returns>
	    public string CreatePlanillaAtributo(PlanillaAtributoDto planillaatributo)
	    {
	        string key = this.PlanillaAtributoService.Add(planillaatributo);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing planillaatributo in the database from the given dto object.
	    /// </summary>
	    /// <param name="planillaatributo">The dto object.</param>
	    public void UpdatePlanillaAtributo(PlanillaAtributoDto planillaatributo)
	    {
	        this.PlanillaAtributoService.Update(planillaatributo);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update planillaatributos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="planillaatributos">The dto object list.</param>
	    public void UpdatePlanillaAtributos(IEnumerable<PlanillaAtributoDto> planillaatributos)
	    {
	        if (planillaatributos == null)
	        {
	            return;
	        }
	
	        foreach (PlanillaAtributoDto planillaatributo in planillaatributos)
	        {
	            if (planillaatributo == null)
	            {
	                continue;
	            }
	            
	            this.UpdatePlanillaAtributo(planillaatributo);
	        }
	    }
	
	    /// <summary>
	    /// Deletes planillaatributo from the database by the given dto object.
	    /// </summary>
	    /// <param name="planillaatributo">The dto object.</param>
	    public void DeletePlanillaAtributo(PlanillaAtributoDto planillaatributo)
	    {
	        this.PlanillaAtributoService.Delete(planillaatributo);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete planillaatributos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="planillaatributos">The dto object list.</param>
	    public void DeletePlanillaAtributos(IEnumerable<PlanillaAtributoDto> planillaatributos)
	    {
	        if (planillaatributos == null)
	        {
	            return;
	        }
	
	        foreach (PlanillaAtributoDto planillaatributo in planillaatributos)
	        {
	            if (planillaatributo == null)
	            {
	                continue;
	            }
	            
	            this.DeletePlanillaAtributo(planillaatributo);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against PlanillaRubro entity.
	    /// </summary>
	    private IPlanillaRubroService planillarubroservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against PlanillaRubro entity.
	    /// </summary>
	    public virtual IPlanillaRubroService PlanillaRubroService
	    {
	        get
	        {
	            if (this.planillarubroservice == null)
	            {
	                IPlanillaRubroAssembler assembler = new PlanillaRubroAssembler();
	                IPlanillaRubroRepository repository = new PlanillaRubroRepository(this.UnitOfWork);
	
	                this.planillarubroservice = new PlanillaRubroService(assembler, repository);
	            }
	            return this.planillarubroservice;
	        }
	    }
	        
	    #region PlanillaRubros CRUD Operations
	
	    /// <summary>
	    /// Returns all planillarubros.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<PlanillaRubroDto> ReadPlanillaRubros()	
	    {
	        return this.PlanillaRubroService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of planillarubros from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<PlanillaRubroDto> ReadPlanillaRubrosPaged(int startIndex, int pageSize)
	    {
	        return this.PlanillaRubroService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all planillarubros filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PlanillaRubroDto> ReadPlanillaRubrosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.PlanillaRubroService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of planillarubros from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PlanillaRubroDto> ReadPlanillaRubrosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.PlanillaRubroService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a planillarubro with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public PlanillaRubroDto ReadPlanillaRubro(string dtoKey)
	    {
	        return this.PlanillaRubroService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all planillarubros count.
	    /// </summary>
	    /// <returns></returns>
	    public int PlanillaRubrosCount()
	    {
	        return this.PlanillaRubroService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all planillarubros count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int PlanillaRubrosCountFiltered(string filterExpression)
	    {
	        return this.PlanillaRubroService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new planillarubro from the given dto object into the database.
	    /// </summary>
	    /// <param name="planillarubro">The dto object.</param>
	    /// <returns>The dto key of the newly created planillarubro.</returns>
	    public string CreatePlanillaRubro(PlanillaRubroDto planillarubro)
	    {
	        string key = this.PlanillaRubroService.Add(planillarubro);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing planillarubro in the database from the given dto object.
	    /// </summary>
	    /// <param name="planillarubro">The dto object.</param>
	    public void UpdatePlanillaRubro(PlanillaRubroDto planillarubro)
	    {
	        this.PlanillaRubroService.Update(planillarubro);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update planillarubros in the database from the given dto object list.
	    /// </summary>
	    /// <param name="planillarubros">The dto object list.</param>
	    public void UpdatePlanillaRubros(IEnumerable<PlanillaRubroDto> planillarubros)
	    {
	        if (planillarubros == null)
	        {
	            return;
	        }
	
	        foreach (PlanillaRubroDto planillarubro in planillarubros)
	        {
	            if (planillarubro == null)
	            {
	                continue;
	            }
	            
	            this.UpdatePlanillaRubro(planillarubro);
	        }
	    }
	
	    /// <summary>
	    /// Deletes planillarubro from the database by the given dto object.
	    /// </summary>
	    /// <param name="planillarubro">The dto object.</param>
	    public void DeletePlanillaRubro(PlanillaRubroDto planillarubro)
	    {
	        this.PlanillaRubroService.Delete(planillarubro);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete planillarubros from the database by the given dto object list.
	    /// </summary>
	    /// <param name="planillarubros">The dto object list.</param>
	    public void DeletePlanillaRubros(IEnumerable<PlanillaRubroDto> planillarubros)
	    {
	        if (planillarubros == null)
	        {
	            return;
	        }
	
	        foreach (PlanillaRubroDto planillarubro in planillarubros)
	        {
	            if (planillarubro == null)
	            {
	                continue;
	            }
	            
	            this.DeletePlanillaRubro(planillarubro);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against PlanillaSustitucion entity.
	    /// </summary>
	    private IPlanillaSustitucionService planillasustitucionservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against PlanillaSustitucion entity.
	    /// </summary>
	    public virtual IPlanillaSustitucionService PlanillaSustitucionService
	    {
	        get
	        {
	            if (this.planillasustitucionservice == null)
	            {
	                IPlanillaSustitucionAssembler assembler = new PlanillaSustitucionAssembler();
	                IPlanillaSustitucionRepository repository = new PlanillaSustitucionRepository(this.UnitOfWork);
	
	                this.planillasustitucionservice = new PlanillaSustitucionService(assembler, repository);
	            }
	            return this.planillasustitucionservice;
	        }
	    }
	        
	    #region PlanillaSustitucions CRUD Operations
	
	    /// <summary>
	    /// Returns all planillasustitucions.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<PlanillaSustitucionDto> ReadPlanillaSustitucions()	
	    {
	        return this.PlanillaSustitucionService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of planillasustitucions from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<PlanillaSustitucionDto> ReadPlanillaSustitucionsPaged(int startIndex, int pageSize)
	    {
	        return this.PlanillaSustitucionService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all planillasustitucions filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PlanillaSustitucionDto> ReadPlanillaSustitucionsFiltered(string sortExpression, string filterExpression)
	    {
	        return this.PlanillaSustitucionService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of planillasustitucions from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PlanillaSustitucionDto> ReadPlanillaSustitucionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.PlanillaSustitucionService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a planillasustitucion with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public PlanillaSustitucionDto ReadPlanillaSustitucion(string dtoKey)
	    {
	        return this.PlanillaSustitucionService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all planillasustitucions count.
	    /// </summary>
	    /// <returns></returns>
	    public int PlanillaSustitucionsCount()
	    {
	        return this.PlanillaSustitucionService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all planillasustitucions count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int PlanillaSustitucionsCountFiltered(string filterExpression)
	    {
	        return this.PlanillaSustitucionService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new planillasustitucion from the given dto object into the database.
	    /// </summary>
	    /// <param name="planillasustitucion">The dto object.</param>
	    /// <returns>The dto key of the newly created planillasustitucion.</returns>
	    public string CreatePlanillaSustitucion(PlanillaSustitucionDto planillasustitucion)
	    {
	        string key = this.PlanillaSustitucionService.Add(planillasustitucion);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing planillasustitucion in the database from the given dto object.
	    /// </summary>
	    /// <param name="planillasustitucion">The dto object.</param>
	    public void UpdatePlanillaSustitucion(PlanillaSustitucionDto planillasustitucion)
	    {
	        this.PlanillaSustitucionService.Update(planillasustitucion);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update planillasustitucions in the database from the given dto object list.
	    /// </summary>
	    /// <param name="planillasustitucions">The dto object list.</param>
	    public void UpdatePlanillaSustitucions(IEnumerable<PlanillaSustitucionDto> planillasustitucions)
	    {
	        if (planillasustitucions == null)
	        {
	            return;
	        }
	
	        foreach (PlanillaSustitucionDto planillasustitucion in planillasustitucions)
	        {
	            if (planillasustitucion == null)
	            {
	                continue;
	            }
	            
	            this.UpdatePlanillaSustitucion(planillasustitucion);
	        }
	    }
	
	    /// <summary>
	    /// Deletes planillasustitucion from the database by the given dto object.
	    /// </summary>
	    /// <param name="planillasustitucion">The dto object.</param>
	    public void DeletePlanillaSustitucion(PlanillaSustitucionDto planillasustitucion)
	    {
	        this.PlanillaSustitucionService.Delete(planillasustitucion);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete planillasustitucions from the database by the given dto object list.
	    /// </summary>
	    /// <param name="planillasustitucions">The dto object list.</param>
	    public void DeletePlanillaSustitucions(IEnumerable<PlanillaSustitucionDto> planillasustitucions)
	    {
	        if (planillasustitucions == null)
	        {
	            return;
	        }
	
	        foreach (PlanillaSustitucionDto planillasustitucion in planillasustitucions)
	        {
	            if (planillasustitucion == null)
	            {
	                continue;
	            }
	            
	            this.DeletePlanillaSustitucion(planillasustitucion);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against PredioBase entity.
	    /// </summary>
	    private IPredioBaseService prediobaseservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against PredioBase entity.
	    /// </summary>
	    public virtual IPredioBaseService PredioBaseService
	    {
	        get
	        {
	            if (this.prediobaseservice == null)
	            {
	                IPredioBaseAssembler assembler = new PredioBaseAssembler();
	                IPredioBaseRepository repository = new PredioBaseRepository(this.UnitOfWork);
	
	                this.prediobaseservice = new PredioBaseService(assembler, repository);
	            }
	            return this.prediobaseservice;
	        }
	    }
	        
	    #region PredioBases CRUD Operations
	
	    /// <summary>
	    /// Returns all prediobases.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<PredioBaseDto> ReadPredioBases()	
	    {
	        return this.PredioBaseService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of prediobases from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioBaseDto> ReadPredioBasesPaged(int startIndex, int pageSize)
	    {
	        return this.PredioBaseService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all prediobases filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioBaseDto> ReadPredioBasesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.PredioBaseService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of prediobases from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioBaseDto> ReadPredioBasesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.PredioBaseService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a prediobase with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public PredioBaseDto ReadPredioBase(string dtoKey)
	    {
	        return this.PredioBaseService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all prediobases count.
	    /// </summary>
	    /// <returns></returns>
	    public int PredioBasesCount()
	    {
	        return this.PredioBaseService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all prediobases count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int PredioBasesCountFiltered(string filterExpression)
	    {
	        return this.PredioBaseService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new prediobase from the given dto object into the database.
	    /// </summary>
	    /// <param name="prediobase">The dto object.</param>
	    /// <returns>The dto key of the newly created prediobase.</returns>
	    public string CreatePredioBase(PredioBaseDto prediobase)
	    {
	        string key = this.PredioBaseService.Add(prediobase);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing prediobase in the database from the given dto object.
	    /// </summary>
	    /// <param name="prediobase">The dto object.</param>
	    public void UpdatePredioBase(PredioBaseDto prediobase)
	    {
	        this.PredioBaseService.Update(prediobase);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update prediobases in the database from the given dto object list.
	    /// </summary>
	    /// <param name="prediobases">The dto object list.</param>
	    public void UpdatePredioBases(IEnumerable<PredioBaseDto> prediobases)
	    {
	        if (prediobases == null)
	        {
	            return;
	        }
	
	        foreach (PredioBaseDto prediobase in prediobases)
	        {
	            if (prediobase == null)
	            {
	                continue;
	            }
	            
	            this.UpdatePredioBase(prediobase);
	        }
	    }
	
	    /// <summary>
	    /// Deletes prediobase from the database by the given dto object.
	    /// </summary>
	    /// <param name="prediobase">The dto object.</param>
	    public void DeletePredioBase(PredioBaseDto prediobase)
	    {
	        this.PredioBaseService.Delete(prediobase);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete prediobases from the database by the given dto object list.
	    /// </summary>
	    /// <param name="prediobases">The dto object list.</param>
	    public void DeletePredioBases(IEnumerable<PredioBaseDto> prediobases)
	    {
	        if (prediobases == null)
	        {
	            return;
	        }
	
	        foreach (PredioBaseDto prediobase in prediobases)
	        {
	            if (prediobase == null)
	            {
	                continue;
	            }
	            
	            this.DeletePredioBase(prediobase);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against PredioBloque entity.
	    /// </summary>
	    private IPredioBloqueService prediobloqueservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against PredioBloque entity.
	    /// </summary>
	    public virtual IPredioBloqueService PredioBloqueService
	    {
	        get
	        {
	            if (this.prediobloqueservice == null)
	            {
	                IPredioBloqueAssembler assembler = new PredioBloqueAssembler();
	                IPredioBloqueRepository repository = new PredioBloqueRepository(this.UnitOfWork);
	
	                this.prediobloqueservice = new PredioBloqueService(assembler, repository);
	            }
	            return this.prediobloqueservice;
	        }
	    }
	        
	    #region PredioBloques CRUD Operations
	
	    /// <summary>
	    /// Returns all prediobloques.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<PredioBloqueDto> ReadPredioBloques()	
	    {
	        return this.PredioBloqueService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of prediobloques from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioBloqueDto> ReadPredioBloquesPaged(int startIndex, int pageSize)
	    {
	        return this.PredioBloqueService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all prediobloques filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioBloqueDto> ReadPredioBloquesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.PredioBloqueService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of prediobloques from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioBloqueDto> ReadPredioBloquesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.PredioBloqueService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a prediobloque with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public PredioBloqueDto ReadPredioBloque(string dtoKey)
	    {
	        return this.PredioBloqueService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all prediobloques count.
	    /// </summary>
	    /// <returns></returns>
	    public int PredioBloquesCount()
	    {
	        return this.PredioBloqueService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all prediobloques count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int PredioBloquesCountFiltered(string filterExpression)
	    {
	        return this.PredioBloqueService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new prediobloque from the given dto object into the database.
	    /// </summary>
	    /// <param name="prediobloque">The dto object.</param>
	    /// <returns>The dto key of the newly created prediobloque.</returns>
	    public string CreatePredioBloque(PredioBloqueDto prediobloque)
	    {
	        string key = this.PredioBloqueService.Add(prediobloque);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing prediobloque in the database from the given dto object.
	    /// </summary>
	    /// <param name="prediobloque">The dto object.</param>
	    public void UpdatePredioBloque(PredioBloqueDto prediobloque)
	    {
	        this.PredioBloqueService.Update(prediobloque);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update prediobloques in the database from the given dto object list.
	    /// </summary>
	    /// <param name="prediobloques">The dto object list.</param>
	    public void UpdatePredioBloques(IEnumerable<PredioBloqueDto> prediobloques)
	    {
	        if (prediobloques == null)
	        {
	            return;
	        }
	
	        foreach (PredioBloqueDto prediobloque in prediobloques)
	        {
	            if (prediobloque == null)
	            {
	                continue;
	            }
	            
	            this.UpdatePredioBloque(prediobloque);
	        }
	    }
	
	    /// <summary>
	    /// Deletes prediobloque from the database by the given dto object.
	    /// </summary>
	    /// <param name="prediobloque">The dto object.</param>
	    public void DeletePredioBloque(PredioBloqueDto prediobloque)
	    {
	        this.PredioBloqueService.Delete(prediobloque);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete prediobloques from the database by the given dto object list.
	    /// </summary>
	    /// <param name="prediobloques">The dto object list.</param>
	    public void DeletePredioBloques(IEnumerable<PredioBloqueDto> prediobloques)
	    {
	        if (prediobloques == null)
	        {
	            return;
	        }
	
	        foreach (PredioBloqueDto prediobloque in prediobloques)
	        {
	            if (prediobloque == null)
	            {
	                continue;
	            }
	            
	            this.DeletePredioBloque(prediobloque);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against PredioConstruccion entity.
	    /// </summary>
	    private IPredioConstruccionService predioconstruccionservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against PredioConstruccion entity.
	    /// </summary>
	    public virtual IPredioConstruccionService PredioConstruccionService
	    {
	        get
	        {
	            if (this.predioconstruccionservice == null)
	            {
	                IPredioConstruccionAssembler assembler = new PredioConstruccionAssembler();
	                IPredioConstruccionRepository repository = new PredioConstruccionRepository(this.UnitOfWork);
	
	                this.predioconstruccionservice = new PredioConstruccionService(assembler, repository);
	            }
	            return this.predioconstruccionservice;
	        }
	    }
	        
	    #region PredioConstruccions CRUD Operations
	
	    /// <summary>
	    /// Returns all predioconstruccions.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<PredioConstruccionDto> ReadPredioConstruccions()	
	    {
	        return this.PredioConstruccionService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of predioconstruccions from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioConstruccionDto> ReadPredioConstruccionsPaged(int startIndex, int pageSize)
	    {
	        return this.PredioConstruccionService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all predioconstruccions filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioConstruccionDto> ReadPredioConstruccionsFiltered(string sortExpression, string filterExpression)
	    {
	        return this.PredioConstruccionService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of predioconstruccions from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioConstruccionDto> ReadPredioConstruccionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.PredioConstruccionService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a predioconstruccion with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public PredioConstruccionDto ReadPredioConstruccion(string dtoKey)
	    {
	        return this.PredioConstruccionService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all predioconstruccions count.
	    /// </summary>
	    /// <returns></returns>
	    public int PredioConstruccionsCount()
	    {
	        return this.PredioConstruccionService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all predioconstruccions count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int PredioConstruccionsCountFiltered(string filterExpression)
	    {
	        return this.PredioConstruccionService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new predioconstruccion from the given dto object into the database.
	    /// </summary>
	    /// <param name="predioconstruccion">The dto object.</param>
	    /// <returns>The dto key of the newly created predioconstruccion.</returns>
	    public string CreatePredioConstruccion(PredioConstruccionDto predioconstruccion)
	    {
	        string key = this.PredioConstruccionService.Add(predioconstruccion);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing predioconstruccion in the database from the given dto object.
	    /// </summary>
	    /// <param name="predioconstruccion">The dto object.</param>
	    public void UpdatePredioConstruccion(PredioConstruccionDto predioconstruccion)
	    {
	        this.PredioConstruccionService.Update(predioconstruccion);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update predioconstruccions in the database from the given dto object list.
	    /// </summary>
	    /// <param name="predioconstruccions">The dto object list.</param>
	    public void UpdatePredioConstruccions(IEnumerable<PredioConstruccionDto> predioconstruccions)
	    {
	        if (predioconstruccions == null)
	        {
	            return;
	        }
	
	        foreach (PredioConstruccionDto predioconstruccion in predioconstruccions)
	        {
	            if (predioconstruccion == null)
	            {
	                continue;
	            }
	            
	            this.UpdatePredioConstruccion(predioconstruccion);
	        }
	    }
	
	    /// <summary>
	    /// Deletes predioconstruccion from the database by the given dto object.
	    /// </summary>
	    /// <param name="predioconstruccion">The dto object.</param>
	    public void DeletePredioConstruccion(PredioConstruccionDto predioconstruccion)
	    {
	        this.PredioConstruccionService.Delete(predioconstruccion);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete predioconstruccions from the database by the given dto object list.
	    /// </summary>
	    /// <param name="predioconstruccions">The dto object list.</param>
	    public void DeletePredioConstruccions(IEnumerable<PredioConstruccionDto> predioconstruccions)
	    {
	        if (predioconstruccions == null)
	        {
	            return;
	        }
	
	        foreach (PredioConstruccionDto predioconstruccion in predioconstruccions)
	        {
	            if (predioconstruccion == null)
	            {
	                continue;
	            }
	            
	            this.DeletePredioConstruccion(predioconstruccion);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against PredioFoto entity.
	    /// </summary>
	    private IPredioFotoService prediofotoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against PredioFoto entity.
	    /// </summary>
	    public virtual IPredioFotoService PredioFotoService
	    {
	        get
	        {
	            if (this.prediofotoservice == null)
	            {
	                IPredioFotoAssembler assembler = new PredioFotoAssembler();
	                IPredioFotoRepository repository = new PredioFotoRepository(this.UnitOfWork);
	
	                this.prediofotoservice = new PredioFotoService(assembler, repository);
	            }
	            return this.prediofotoservice;
	        }
	    }
	        
	    #region PredioFotos CRUD Operations
	
	    /// <summary>
	    /// Returns all prediofotos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<PredioFotoDto> ReadPredioFotos()	
	    {
	        return this.PredioFotoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of prediofotos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioFotoDto> ReadPredioFotosPaged(int startIndex, int pageSize)
	    {
	        return this.PredioFotoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all prediofotos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioFotoDto> ReadPredioFotosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.PredioFotoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of prediofotos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioFotoDto> ReadPredioFotosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.PredioFotoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a prediofoto with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public PredioFotoDto ReadPredioFoto(string dtoKey)
	    {
	        return this.PredioFotoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all prediofotos count.
	    /// </summary>
	    /// <returns></returns>
	    public int PredioFotosCount()
	    {
	        return this.PredioFotoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all prediofotos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int PredioFotosCountFiltered(string filterExpression)
	    {
	        return this.PredioFotoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new prediofoto from the given dto object into the database.
	    /// </summary>
	    /// <param name="prediofoto">The dto object.</param>
	    /// <returns>The dto key of the newly created prediofoto.</returns>
	    public string CreatePredioFoto(PredioFotoDto prediofoto)
	    {
	        string key = this.PredioFotoService.Add(prediofoto);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing prediofoto in the database from the given dto object.
	    /// </summary>
	    /// <param name="prediofoto">The dto object.</param>
	    public void UpdatePredioFoto(PredioFotoDto prediofoto)
	    {
	        this.PredioFotoService.Update(prediofoto);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update prediofotos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="prediofotos">The dto object list.</param>
	    public void UpdatePredioFotos(IEnumerable<PredioFotoDto> prediofotos)
	    {
	        if (prediofotos == null)
	        {
	            return;
	        }
	
	        foreach (PredioFotoDto prediofoto in prediofotos)
	        {
	            if (prediofoto == null)
	            {
	                continue;
	            }
	            
	            this.UpdatePredioFoto(prediofoto);
	        }
	    }
	
	    /// <summary>
	    /// Deletes prediofoto from the database by the given dto object.
	    /// </summary>
	    /// <param name="prediofoto">The dto object.</param>
	    public void DeletePredioFoto(PredioFotoDto prediofoto)
	    {
	        this.PredioFotoService.Delete(prediofoto);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete prediofotos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="prediofotos">The dto object list.</param>
	    public void DeletePredioFotos(IEnumerable<PredioFotoDto> prediofotos)
	    {
	        if (prediofotos == null)
	        {
	            return;
	        }
	
	        foreach (PredioFotoDto prediofoto in prediofotos)
	        {
	            if (prediofoto == null)
	            {
	                continue;
	            }
	            
	            this.DeletePredioFoto(prediofoto);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against PredioFrente entity.
	    /// </summary>
	    private IPredioFrenteService prediofrenteservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against PredioFrente entity.
	    /// </summary>
	    public virtual IPredioFrenteService PredioFrenteService
	    {
	        get
	        {
	            if (this.prediofrenteservice == null)
	            {
	                IPredioFrenteAssembler assembler = new PredioFrenteAssembler();
	                IPredioFrenteRepository repository = new PredioFrenteRepository(this.UnitOfWork);
	
	                this.prediofrenteservice = new PredioFrenteService(assembler, repository);
	            }
	            return this.prediofrenteservice;
	        }
	    }
	        
	    #region PredioFrentes CRUD Operations
	
	    /// <summary>
	    /// Returns all prediofrentes.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<PredioFrenteDto> ReadPredioFrentes()	
	    {
	        return this.PredioFrenteService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of prediofrentes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioFrenteDto> ReadPredioFrentesPaged(int startIndex, int pageSize)
	    {
	        return this.PredioFrenteService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all prediofrentes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioFrenteDto> ReadPredioFrentesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.PredioFrenteService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of prediofrentes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioFrenteDto> ReadPredioFrentesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.PredioFrenteService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a prediofrente with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public PredioFrenteDto ReadPredioFrente(string dtoKey)
	    {
	        return this.PredioFrenteService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all prediofrentes count.
	    /// </summary>
	    /// <returns></returns>
	    public int PredioFrentesCount()
	    {
	        return this.PredioFrenteService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all prediofrentes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int PredioFrentesCountFiltered(string filterExpression)
	    {
	        return this.PredioFrenteService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new prediofrente from the given dto object into the database.
	    /// </summary>
	    /// <param name="prediofrente">The dto object.</param>
	    /// <returns>The dto key of the newly created prediofrente.</returns>
	    public string CreatePredioFrente(PredioFrenteDto prediofrente)
	    {
	        string key = this.PredioFrenteService.Add(prediofrente);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing prediofrente in the database from the given dto object.
	    /// </summary>
	    /// <param name="prediofrente">The dto object.</param>
	    public void UpdatePredioFrente(PredioFrenteDto prediofrente)
	    {
	        this.PredioFrenteService.Update(prediofrente);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update prediofrentes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="prediofrentes">The dto object list.</param>
	    public void UpdatePredioFrentes(IEnumerable<PredioFrenteDto> prediofrentes)
	    {
	        if (prediofrentes == null)
	        {
	            return;
	        }
	
	        foreach (PredioFrenteDto prediofrente in prediofrentes)
	        {
	            if (prediofrente == null)
	            {
	                continue;
	            }
	            
	            this.UpdatePredioFrente(prediofrente);
	        }
	    }
	
	    /// <summary>
	    /// Deletes prediofrente from the database by the given dto object.
	    /// </summary>
	    /// <param name="prediofrente">The dto object.</param>
	    public void DeletePredioFrente(PredioFrenteDto prediofrente)
	    {
	        this.PredioFrenteService.Delete(prediofrente);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete prediofrentes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="prediofrentes">The dto object list.</param>
	    public void DeletePredioFrentes(IEnumerable<PredioFrenteDto> prediofrentes)
	    {
	        if (prediofrentes == null)
	        {
	            return;
	        }
	
	        foreach (PredioFrenteDto prediofrente in prediofrentes)
	        {
	            if (prediofrente == null)
	            {
	                continue;
	            }
	            
	            this.DeletePredioFrente(prediofrente);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against PredioPiso entity.
	    /// </summary>
	    private IPredioPisoService prediopisoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against PredioPiso entity.
	    /// </summary>
	    public virtual IPredioPisoService PredioPisoService
	    {
	        get
	        {
	            if (this.prediopisoservice == null)
	            {
	                IPredioPisoAssembler assembler = new PredioPisoAssembler();
	                IPredioPisoRepository repository = new PredioPisoRepository(this.UnitOfWork);
	
	                this.prediopisoservice = new PredioPisoService(assembler, repository);
	            }
	            return this.prediopisoservice;
	        }
	    }
	        
	    #region PredioPisos CRUD Operations
	
	    /// <summary>
	    /// Returns all prediopisos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<PredioPisoDto> ReadPredioPisos()	
	    {
	        return this.PredioPisoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of prediopisos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioPisoDto> ReadPredioPisosPaged(int startIndex, int pageSize)
	    {
	        return this.PredioPisoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all prediopisos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioPisoDto> ReadPredioPisosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.PredioPisoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of prediopisos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioPisoDto> ReadPredioPisosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.PredioPisoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a prediopiso with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public PredioPisoDto ReadPredioPiso(string dtoKey)
	    {
	        return this.PredioPisoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all prediopisos count.
	    /// </summary>
	    /// <returns></returns>
	    public int PredioPisosCount()
	    {
	        return this.PredioPisoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all prediopisos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int PredioPisosCountFiltered(string filterExpression)
	    {
	        return this.PredioPisoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new prediopiso from the given dto object into the database.
	    /// </summary>
	    /// <param name="prediopiso">The dto object.</param>
	    /// <returns>The dto key of the newly created prediopiso.</returns>
	    public string CreatePredioPiso(PredioPisoDto prediopiso)
	    {
	        string key = this.PredioPisoService.Add(prediopiso);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing prediopiso in the database from the given dto object.
	    /// </summary>
	    /// <param name="prediopiso">The dto object.</param>
	    public void UpdatePredioPiso(PredioPisoDto prediopiso)
	    {
	        this.PredioPisoService.Update(prediopiso);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update prediopisos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="prediopisos">The dto object list.</param>
	    public void UpdatePredioPisos(IEnumerable<PredioPisoDto> prediopisos)
	    {
	        if (prediopisos == null)
	        {
	            return;
	        }
	
	        foreach (PredioPisoDto prediopiso in prediopisos)
	        {
	            if (prediopiso == null)
	            {
	                continue;
	            }
	            
	            this.UpdatePredioPiso(prediopiso);
	        }
	    }
	
	    /// <summary>
	    /// Deletes prediopiso from the database by the given dto object.
	    /// </summary>
	    /// <param name="prediopiso">The dto object.</param>
	    public void DeletePredioPiso(PredioPisoDto prediopiso)
	    {
	        this.PredioPisoService.Delete(prediopiso);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete prediopisos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="prediopisos">The dto object list.</param>
	    public void DeletePredioPisos(IEnumerable<PredioPisoDto> prediopisos)
	    {
	        if (prediopisos == null)
	        {
	            return;
	        }
	
	        foreach (PredioPisoDto prediopiso in prediopisos)
	        {
	            if (prediopiso == null)
	            {
	                continue;
	            }
	            
	            this.DeletePredioPiso(prediopiso);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against PredioPropietario entity.
	    /// </summary>
	    private IPredioPropietarioService prediopropietarioservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against PredioPropietario entity.
	    /// </summary>
	    public virtual IPredioPropietarioService PredioPropietarioService
	    {
	        get
	        {
	            if (this.prediopropietarioservice == null)
	            {
	                IPredioPropietarioAssembler assembler = new PredioPropietarioAssembler();
	                IPredioPropietarioRepository repository = new PredioPropietarioRepository(this.UnitOfWork);
	
	                this.prediopropietarioservice = new PredioPropietarioService(assembler, repository);
	            }
	            return this.prediopropietarioservice;
	        }
	    }
	        
	    #region PredioPropietarios CRUD Operations
	
	    /// <summary>
	    /// Returns all prediopropietarios.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<PredioPropietarioDto> ReadPredioPropietarios()	
	    {
	        return this.PredioPropietarioService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of prediopropietarios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioPropietarioDto> ReadPredioPropietariosPaged(int startIndex, int pageSize)
	    {
	        return this.PredioPropietarioService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all prediopropietarios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioPropietarioDto> ReadPredioPropietariosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.PredioPropietarioService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of prediopropietarios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioPropietarioDto> ReadPredioPropietariosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.PredioPropietarioService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a prediopropietario with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public PredioPropietarioDto ReadPredioPropietario(string dtoKey)
	    {
	        return this.PredioPropietarioService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all prediopropietarios count.
	    /// </summary>
	    /// <returns></returns>
	    public int PredioPropietariosCount()
	    {
	        return this.PredioPropietarioService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all prediopropietarios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int PredioPropietariosCountFiltered(string filterExpression)
	    {
	        return this.PredioPropietarioService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new prediopropietario from the given dto object into the database.
	    /// </summary>
	    /// <param name="prediopropietario">The dto object.</param>
	    /// <returns>The dto key of the newly created prediopropietario.</returns>
	    public string CreatePredioPropietario(PredioPropietarioDto prediopropietario)
	    {
	        string key = this.PredioPropietarioService.Add(prediopropietario);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing prediopropietario in the database from the given dto object.
	    /// </summary>
	    /// <param name="prediopropietario">The dto object.</param>
	    public void UpdatePredioPropietario(PredioPropietarioDto prediopropietario)
	    {
	        this.PredioPropietarioService.Update(prediopropietario);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update prediopropietarios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="prediopropietarios">The dto object list.</param>
	    public void UpdatePredioPropietarios(IEnumerable<PredioPropietarioDto> prediopropietarios)
	    {
	        if (prediopropietarios == null)
	        {
	            return;
	        }
	
	        foreach (PredioPropietarioDto prediopropietario in prediopropietarios)
	        {
	            if (prediopropietario == null)
	            {
	                continue;
	            }
	            
	            this.UpdatePredioPropietario(prediopropietario);
	        }
	    }
	
	    /// <summary>
	    /// Deletes prediopropietario from the database by the given dto object.
	    /// </summary>
	    /// <param name="prediopropietario">The dto object.</param>
	    public void DeletePredioPropietario(PredioPropietarioDto prediopropietario)
	    {
	        this.PredioPropietarioService.Delete(prediopropietario);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete prediopropietarios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="prediopropietarios">The dto object list.</param>
	    public void DeletePredioPropietarios(IEnumerable<PredioPropietarioDto> prediopropietarios)
	    {
	        if (prediopropietarios == null)
	        {
	            return;
	        }
	
	        foreach (PredioPropietarioDto prediopropietario in prediopropietarios)
	        {
	            if (prediopropietario == null)
	            {
	                continue;
	            }
	            
	            this.DeletePredioPropietario(prediopropietario);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against PredioTabla entity.
	    /// </summary>
	    private IPredioTablaService prediotablaservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against PredioTabla entity.
	    /// </summary>
	    public virtual IPredioTablaService PredioTablaService
	    {
	        get
	        {
	            if (this.prediotablaservice == null)
	            {
	                IPredioTablaAssembler assembler = new PredioTablaAssembler();
	                IPredioTablaRepository repository = new PredioTablaRepository(this.UnitOfWork);
	
	                this.prediotablaservice = new PredioTablaService(assembler, repository);
	            }
	            return this.prediotablaservice;
	        }
	    }
	        
	    #region PredioTablas CRUD Operations
	
	    /// <summary>
	    /// Returns all prediotablas.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<PredioTablaDto> ReadPredioTablas()	
	    {
	        return this.PredioTablaService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of prediotablas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioTablaDto> ReadPredioTablasPaged(int startIndex, int pageSize)
	    {
	        return this.PredioTablaService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all prediotablas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioTablaDto> ReadPredioTablasFiltered(string sortExpression, string filterExpression)
	    {
	        return this.PredioTablaService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of prediotablas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioTablaDto> ReadPredioTablasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.PredioTablaService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a prediotabla with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public PredioTablaDto ReadPredioTabla(string dtoKey)
	    {
	        return this.PredioTablaService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all prediotablas count.
	    /// </summary>
	    /// <returns></returns>
	    public int PredioTablasCount()
	    {
	        return this.PredioTablaService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all prediotablas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int PredioTablasCountFiltered(string filterExpression)
	    {
	        return this.PredioTablaService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new prediotabla from the given dto object into the database.
	    /// </summary>
	    /// <param name="prediotabla">The dto object.</param>
	    /// <returns>The dto key of the newly created prediotabla.</returns>
	    public string CreatePredioTabla(PredioTablaDto prediotabla)
	    {
	        string key = this.PredioTablaService.Add(prediotabla);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing prediotabla in the database from the given dto object.
	    /// </summary>
	    /// <param name="prediotabla">The dto object.</param>
	    public void UpdatePredioTabla(PredioTablaDto prediotabla)
	    {
	        this.PredioTablaService.Update(prediotabla);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update prediotablas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="prediotablas">The dto object list.</param>
	    public void UpdatePredioTablas(IEnumerable<PredioTablaDto> prediotablas)
	    {
	        if (prediotablas == null)
	        {
	            return;
	        }
	
	        foreach (PredioTablaDto prediotabla in prediotablas)
	        {
	            if (prediotabla == null)
	            {
	                continue;
	            }
	            
	            this.UpdatePredioTabla(prediotabla);
	        }
	    }
	
	    /// <summary>
	    /// Deletes prediotabla from the database by the given dto object.
	    /// </summary>
	    /// <param name="prediotabla">The dto object.</param>
	    public void DeletePredioTabla(PredioTablaDto prediotabla)
	    {
	        this.PredioTablaService.Delete(prediotabla);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete prediotablas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="prediotablas">The dto object list.</param>
	    public void DeletePredioTablas(IEnumerable<PredioTablaDto> prediotablas)
	    {
	        if (prediotablas == null)
	        {
	            return;
	        }
	
	        foreach (PredioTablaDto prediotabla in prediotablas)
	        {
	            if (prediotabla == null)
	            {
	                continue;
	            }
	            
	            this.DeletePredioTabla(prediotabla);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against PredioTerreno entity.
	    /// </summary>
	    private IPredioTerrenoService predioterrenoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against PredioTerreno entity.
	    /// </summary>
	    public virtual IPredioTerrenoService PredioTerrenoService
	    {
	        get
	        {
	            if (this.predioterrenoservice == null)
	            {
	                IPredioTerrenoAssembler assembler = new PredioTerrenoAssembler();
	                IPredioTerrenoRepository repository = new PredioTerrenoRepository(this.UnitOfWork);
	
	                this.predioterrenoservice = new PredioTerrenoService(assembler, repository);
	            }
	            return this.predioterrenoservice;
	        }
	    }
	        
	    #region PredioTerrenos CRUD Operations
	
	    /// <summary>
	    /// Returns all predioterrenos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<PredioTerrenoDto> ReadPredioTerrenos()	
	    {
	        return this.PredioTerrenoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of predioterrenos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioTerrenoDto> ReadPredioTerrenosPaged(int startIndex, int pageSize)
	    {
	        return this.PredioTerrenoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all predioterrenos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioTerrenoDto> ReadPredioTerrenosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.PredioTerrenoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of predioterrenos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PredioTerrenoDto> ReadPredioTerrenosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.PredioTerrenoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a predioterreno with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public PredioTerrenoDto ReadPredioTerreno(string dtoKey)
	    {
	        return this.PredioTerrenoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all predioterrenos count.
	    /// </summary>
	    /// <returns></returns>
	    public int PredioTerrenosCount()
	    {
	        return this.PredioTerrenoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all predioterrenos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int PredioTerrenosCountFiltered(string filterExpression)
	    {
	        return this.PredioTerrenoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new predioterreno from the given dto object into the database.
	    /// </summary>
	    /// <param name="predioterreno">The dto object.</param>
	    /// <returns>The dto key of the newly created predioterreno.</returns>
	    public string CreatePredioTerreno(PredioTerrenoDto predioterreno)
	    {
	        string key = this.PredioTerrenoService.Add(predioterreno);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing predioterreno in the database from the given dto object.
	    /// </summary>
	    /// <param name="predioterreno">The dto object.</param>
	    public void UpdatePredioTerreno(PredioTerrenoDto predioterreno)
	    {
	        this.PredioTerrenoService.Update(predioterreno);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update predioterrenos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="predioterrenos">The dto object list.</param>
	    public void UpdatePredioTerrenos(IEnumerable<PredioTerrenoDto> predioterrenos)
	    {
	        if (predioterrenos == null)
	        {
	            return;
	        }
	
	        foreach (PredioTerrenoDto predioterreno in predioterrenos)
	        {
	            if (predioterreno == null)
	            {
	                continue;
	            }
	            
	            this.UpdatePredioTerreno(predioterreno);
	        }
	    }
	
	    /// <summary>
	    /// Deletes predioterreno from the database by the given dto object.
	    /// </summary>
	    /// <param name="predioterreno">The dto object.</param>
	    public void DeletePredioTerreno(PredioTerrenoDto predioterreno)
	    {
	        this.PredioTerrenoService.Delete(predioterreno);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete predioterrenos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="predioterrenos">The dto object list.</param>
	    public void DeletePredioTerrenos(IEnumerable<PredioTerrenoDto> predioterrenos)
	    {
	        if (predioterrenos == null)
	        {
	            return;
	        }
	
	        foreach (PredioTerrenoDto predioterreno in predioterrenos)
	        {
	            if (predioterreno == null)
	            {
	                continue;
	            }
	            
	            this.DeletePredioTerreno(predioterreno);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Privilegio entity.
	    /// </summary>
	    private IPrivilegioService privilegioservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Privilegio entity.
	    /// </summary>
	    public virtual IPrivilegioService PrivilegioService
	    {
	        get
	        {
	            if (this.privilegioservice == null)
	            {
	                IPrivilegioAssembler assembler = new PrivilegioAssembler();
	                IPrivilegioRepository repository = new PrivilegioRepository(this.UnitOfWork);
	
	                this.privilegioservice = new PrivilegioService(assembler, repository);
	            }
	            return this.privilegioservice;
	        }
	    }
	        
	    #region Privilegios CRUD Operations
	
	    /// <summary>
	    /// Returns all privilegios.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<PrivilegioDto> ReadPrivilegios()	
	    {
	        return this.PrivilegioService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of privilegios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<PrivilegioDto> ReadPrivilegiosPaged(int startIndex, int pageSize)
	    {
	        return this.PrivilegioService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all privilegios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PrivilegioDto> ReadPrivilegiosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.PrivilegioService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of privilegios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<PrivilegioDto> ReadPrivilegiosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.PrivilegioService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a privilegio with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public PrivilegioDto ReadPrivilegio(string dtoKey)
	    {
	        return this.PrivilegioService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all privilegios count.
	    /// </summary>
	    /// <returns></returns>
	    public int PrivilegiosCount()
	    {
	        return this.PrivilegioService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all privilegios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int PrivilegiosCountFiltered(string filterExpression)
	    {
	        return this.PrivilegioService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new privilegio from the given dto object into the database.
	    /// </summary>
	    /// <param name="privilegio">The dto object.</param>
	    /// <returns>The dto key of the newly created privilegio.</returns>
	    public string CreatePrivilegio(PrivilegioDto privilegio)
	    {
	        string key = this.PrivilegioService.Add(privilegio);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing privilegio in the database from the given dto object.
	    /// </summary>
	    /// <param name="privilegio">The dto object.</param>
	    public void UpdatePrivilegio(PrivilegioDto privilegio)
	    {
	        this.PrivilegioService.Update(privilegio);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update privilegios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="privilegios">The dto object list.</param>
	    public void UpdatePrivilegios(IEnumerable<PrivilegioDto> privilegios)
	    {
	        if (privilegios == null)
	        {
	            return;
	        }
	
	        foreach (PrivilegioDto privilegio in privilegios)
	        {
	            if (privilegio == null)
	            {
	                continue;
	            }
	            
	            this.UpdatePrivilegio(privilegio);
	        }
	    }
	
	    /// <summary>
	    /// Deletes privilegio from the database by the given dto object.
	    /// </summary>
	    /// <param name="privilegio">The dto object.</param>
	    public void DeletePrivilegio(PrivilegioDto privilegio)
	    {
	        this.PrivilegioService.Delete(privilegio);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete privilegios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="privilegios">The dto object list.</param>
	    public void DeletePrivilegios(IEnumerable<PrivilegioDto> privilegios)
	    {
	        if (privilegios == null)
	        {
	            return;
	        }
	
	        foreach (PrivilegioDto privilegio in privilegios)
	        {
	            if (privilegio == null)
	            {
	                continue;
	            }
	            
	            this.DeletePrivilegio(privilegio);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Rebaja entity.
	    /// </summary>
	    private IRebajaService rebajaservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Rebaja entity.
	    /// </summary>
	    public virtual IRebajaService RebajaService
	    {
	        get
	        {
	            if (this.rebajaservice == null)
	            {
	                IRebajaAssembler assembler = new RebajaAssembler();
	                IRebajaRepository repository = new RebajaRepository(this.UnitOfWork);
	
	                this.rebajaservice = new RebajaService(assembler, repository);
	            }
	            return this.rebajaservice;
	        }
	    }
	        
	    #region Rebajas CRUD Operations
	
	    /// <summary>
	    /// Returns all rebajas.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<RebajaDto> ReadRebajas()	
	    {
	        return this.RebajaService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of rebajas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<RebajaDto> ReadRebajasPaged(int startIndex, int pageSize)
	    {
	        return this.RebajaService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all rebajas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RebajaDto> ReadRebajasFiltered(string sortExpression, string filterExpression)
	    {
	        return this.RebajaService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of rebajas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RebajaDto> ReadRebajasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.RebajaService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a rebaja with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public RebajaDto ReadRebaja(string dtoKey)
	    {
	        return this.RebajaService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all rebajas count.
	    /// </summary>
	    /// <returns></returns>
	    public int RebajasCount()
	    {
	        return this.RebajaService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all rebajas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int RebajasCountFiltered(string filterExpression)
	    {
	        return this.RebajaService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new rebaja from the given dto object into the database.
	    /// </summary>
	    /// <param name="rebaja">The dto object.</param>
	    /// <returns>The dto key of the newly created rebaja.</returns>
	    public string CreateRebaja(RebajaDto rebaja)
	    {
	        string key = this.RebajaService.Add(rebaja);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing rebaja in the database from the given dto object.
	    /// </summary>
	    /// <param name="rebaja">The dto object.</param>
	    public void UpdateRebaja(RebajaDto rebaja)
	    {
	        this.RebajaService.Update(rebaja);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update rebajas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="rebajas">The dto object list.</param>
	    public void UpdateRebajas(IEnumerable<RebajaDto> rebajas)
	    {
	        if (rebajas == null)
	        {
	            return;
	        }
	
	        foreach (RebajaDto rebaja in rebajas)
	        {
	            if (rebaja == null)
	            {
	                continue;
	            }
	            
	            this.UpdateRebaja(rebaja);
	        }
	    }
	
	    /// <summary>
	    /// Deletes rebaja from the database by the given dto object.
	    /// </summary>
	    /// <param name="rebaja">The dto object.</param>
	    public void DeleteRebaja(RebajaDto rebaja)
	    {
	        this.RebajaService.Delete(rebaja);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete rebajas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="rebajas">The dto object list.</param>
	    public void DeleteRebajas(IEnumerable<RebajaDto> rebajas)
	    {
	        if (rebajas == null)
	        {
	            return;
	        }
	
	        foreach (RebajaDto rebaja in rebajas)
	        {
	            if (rebaja == null)
	            {
	                continue;
	            }
	            
	            this.DeleteRebaja(rebaja);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against RebajasRubro entity.
	    /// </summary>
	    private IRebajasRubroService rebajasrubroservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against RebajasRubro entity.
	    /// </summary>
	    public virtual IRebajasRubroService RebajasRubroService
	    {
	        get
	        {
	            if (this.rebajasrubroservice == null)
	            {
	                IRebajasRubroAssembler assembler = new RebajasRubroAssembler();
	                IRebajasRubroRepository repository = new RebajasRubroRepository(this.UnitOfWork);
	
	                this.rebajasrubroservice = new RebajasRubroService(assembler, repository);
	            }
	            return this.rebajasrubroservice;
	        }
	    }
	        
	    #region RebajasRubros CRUD Operations
	
	    /// <summary>
	    /// Returns all rebajasrubros.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<RebajasRubroDto> ReadRebajasRubros()	
	    {
	        return this.RebajasRubroService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of rebajasrubros from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<RebajasRubroDto> ReadRebajasRubrosPaged(int startIndex, int pageSize)
	    {
	        return this.RebajasRubroService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all rebajasrubros filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RebajasRubroDto> ReadRebajasRubrosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.RebajasRubroService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of rebajasrubros from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RebajasRubroDto> ReadRebajasRubrosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.RebajasRubroService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a rebajasrubro with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public RebajasRubroDto ReadRebajasRubro(string dtoKey)
	    {
	        return this.RebajasRubroService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all rebajasrubros count.
	    /// </summary>
	    /// <returns></returns>
	    public int RebajasRubrosCount()
	    {
	        return this.RebajasRubroService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all rebajasrubros count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int RebajasRubrosCountFiltered(string filterExpression)
	    {
	        return this.RebajasRubroService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new rebajasrubro from the given dto object into the database.
	    /// </summary>
	    /// <param name="rebajasrubro">The dto object.</param>
	    /// <returns>The dto key of the newly created rebajasrubro.</returns>
	    public string CreateRebajasRubro(RebajasRubroDto rebajasrubro)
	    {
	        string key = this.RebajasRubroService.Add(rebajasrubro);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing rebajasrubro in the database from the given dto object.
	    /// </summary>
	    /// <param name="rebajasrubro">The dto object.</param>
	    public void UpdateRebajasRubro(RebajasRubroDto rebajasrubro)
	    {
	        this.RebajasRubroService.Update(rebajasrubro);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update rebajasrubros in the database from the given dto object list.
	    /// </summary>
	    /// <param name="rebajasrubros">The dto object list.</param>
	    public void UpdateRebajasRubros(IEnumerable<RebajasRubroDto> rebajasrubros)
	    {
	        if (rebajasrubros == null)
	        {
	            return;
	        }
	
	        foreach (RebajasRubroDto rebajasrubro in rebajasrubros)
	        {
	            if (rebajasrubro == null)
	            {
	                continue;
	            }
	            
	            this.UpdateRebajasRubro(rebajasrubro);
	        }
	    }
	
	    /// <summary>
	    /// Deletes rebajasrubro from the database by the given dto object.
	    /// </summary>
	    /// <param name="rebajasrubro">The dto object.</param>
	    public void DeleteRebajasRubro(RebajasRubroDto rebajasrubro)
	    {
	        this.RebajasRubroService.Delete(rebajasrubro);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete rebajasrubros from the database by the given dto object list.
	    /// </summary>
	    /// <param name="rebajasrubros">The dto object list.</param>
	    public void DeleteRebajasRubros(IEnumerable<RebajasRubroDto> rebajasrubros)
	    {
	        if (rebajasrubros == null)
	        {
	            return;
	        }
	
	        foreach (RebajasRubroDto rebajasrubro in rebajasrubros)
	        {
	            if (rebajasrubro == null)
	            {
	                continue;
	            }
	            
	            this.DeleteRebajasRubro(rebajasrubro);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against RepCuentaCorrienteDetalle entity.
	    /// </summary>
	    private IRepCuentaCorrienteDetalleService repcuentacorrientedetalleservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against RepCuentaCorrienteDetalle entity.
	    /// </summary>
	    public virtual IRepCuentaCorrienteDetalleService RepCuentaCorrienteDetalleService
	    {
	        get
	        {
	            if (this.repcuentacorrientedetalleservice == null)
	            {
	                IRepCuentaCorrienteDetalleAssembler assembler = new RepCuentaCorrienteDetalleAssembler();
	                IRepCuentaCorrienteDetalleRepository repository = new RepCuentaCorrienteDetalleRepository(this.UnitOfWork);
	
	                this.repcuentacorrientedetalleservice = new RepCuentaCorrienteDetalleService(assembler, repository);
	            }
	            return this.repcuentacorrientedetalleservice;
	        }
	    }
	        
	    #region RepCuentaCorrienteDetalles CRUD Operations
	
	    /// <summary>
	    /// Returns all repcuentacorrientedetalles.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<RepCuentaCorrienteDetalleDto> ReadRepCuentaCorrienteDetalles()	
	    {
	        return this.RepCuentaCorrienteDetalleService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of repcuentacorrientedetalles from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<RepCuentaCorrienteDetalleDto> ReadRepCuentaCorrienteDetallesPaged(int startIndex, int pageSize)
	    {
	        return this.RepCuentaCorrienteDetalleService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all repcuentacorrientedetalles filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RepCuentaCorrienteDetalleDto> ReadRepCuentaCorrienteDetallesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.RepCuentaCorrienteDetalleService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of repcuentacorrientedetalles from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RepCuentaCorrienteDetalleDto> ReadRepCuentaCorrienteDetallesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.RepCuentaCorrienteDetalleService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a repcuentacorrientedetalle with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public RepCuentaCorrienteDetalleDto ReadRepCuentaCorrienteDetalle(string dtoKey)
	    {
	        return this.RepCuentaCorrienteDetalleService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all repcuentacorrientedetalles count.
	    /// </summary>
	    /// <returns></returns>
	    public int RepCuentaCorrienteDetallesCount()
	    {
	        return this.RepCuentaCorrienteDetalleService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all repcuentacorrientedetalles count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int RepCuentaCorrienteDetallesCountFiltered(string filterExpression)
	    {
	        return this.RepCuentaCorrienteDetalleService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new repcuentacorrientedetalle from the given dto object into the database.
	    /// </summary>
	    /// <param name="repcuentacorrientedetalle">The dto object.</param>
	    /// <returns>The dto key of the newly created repcuentacorrientedetalle.</returns>
	    public string CreateRepCuentaCorrienteDetalle(RepCuentaCorrienteDetalleDto repcuentacorrientedetalle)
	    {
	        string key = this.RepCuentaCorrienteDetalleService.Add(repcuentacorrientedetalle);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing repcuentacorrientedetalle in the database from the given dto object.
	    /// </summary>
	    /// <param name="repcuentacorrientedetalle">The dto object.</param>
	    public void UpdateRepCuentaCorrienteDetalle(RepCuentaCorrienteDetalleDto repcuentacorrientedetalle)
	    {
	        this.RepCuentaCorrienteDetalleService.Update(repcuentacorrientedetalle);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update repcuentacorrientedetalles in the database from the given dto object list.
	    /// </summary>
	    /// <param name="repcuentacorrientedetalles">The dto object list.</param>
	    public void UpdateRepCuentaCorrienteDetalles(IEnumerable<RepCuentaCorrienteDetalleDto> repcuentacorrientedetalles)
	    {
	        if (repcuentacorrientedetalles == null)
	        {
	            return;
	        }
	
	        foreach (RepCuentaCorrienteDetalleDto repcuentacorrientedetalle in repcuentacorrientedetalles)
	        {
	            if (repcuentacorrientedetalle == null)
	            {
	                continue;
	            }
	            
	            this.UpdateRepCuentaCorrienteDetalle(repcuentacorrientedetalle);
	        }
	    }
	
	    /// <summary>
	    /// Deletes repcuentacorrientedetalle from the database by the given dto object.
	    /// </summary>
	    /// <param name="repcuentacorrientedetalle">The dto object.</param>
	    public void DeleteRepCuentaCorrienteDetalle(RepCuentaCorrienteDetalleDto repcuentacorrientedetalle)
	    {
	        this.RepCuentaCorrienteDetalleService.Delete(repcuentacorrientedetalle);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete repcuentacorrientedetalles from the database by the given dto object list.
	    /// </summary>
	    /// <param name="repcuentacorrientedetalles">The dto object list.</param>
	    public void DeleteRepCuentaCorrienteDetalles(IEnumerable<RepCuentaCorrienteDetalleDto> repcuentacorrientedetalles)
	    {
	        if (repcuentacorrientedetalles == null)
	        {
	            return;
	        }
	
	        foreach (RepCuentaCorrienteDetalleDto repcuentacorrientedetalle in repcuentacorrientedetalles)
	        {
	            if (repcuentacorrientedetalle == null)
	            {
	                continue;
	            }
	            
	            this.DeleteRepCuentaCorrienteDetalle(repcuentacorrientedetalle);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against RepCuentaCorrienteResumen entity.
	    /// </summary>
	    private IRepCuentaCorrienteResumenService repcuentacorrienteresumenservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against RepCuentaCorrienteResumen entity.
	    /// </summary>
	    public virtual IRepCuentaCorrienteResumenService RepCuentaCorrienteResumenService
	    {
	        get
	        {
	            if (this.repcuentacorrienteresumenservice == null)
	            {
	                IRepCuentaCorrienteResumenAssembler assembler = new RepCuentaCorrienteResumenAssembler();
	                IRepCuentaCorrienteResumenRepository repository = new RepCuentaCorrienteResumenRepository(this.UnitOfWork);
	
	                this.repcuentacorrienteresumenservice = new RepCuentaCorrienteResumenService(assembler, repository);
	            }
	            return this.repcuentacorrienteresumenservice;
	        }
	    }
	        
	    #region RepCuentaCorrienteResumens CRUD Operations
	
	    /// <summary>
	    /// Returns all repcuentacorrienteresumens.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<RepCuentaCorrienteResumenDto> ReadRepCuentaCorrienteResumens()	
	    {
	        return this.RepCuentaCorrienteResumenService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of repcuentacorrienteresumens from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<RepCuentaCorrienteResumenDto> ReadRepCuentaCorrienteResumensPaged(int startIndex, int pageSize)
	    {
	        return this.RepCuentaCorrienteResumenService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all repcuentacorrienteresumens filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RepCuentaCorrienteResumenDto> ReadRepCuentaCorrienteResumensFiltered(string sortExpression, string filterExpression)
	    {
	        return this.RepCuentaCorrienteResumenService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of repcuentacorrienteresumens from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RepCuentaCorrienteResumenDto> ReadRepCuentaCorrienteResumensPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.RepCuentaCorrienteResumenService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a repcuentacorrienteresumen with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public RepCuentaCorrienteResumenDto ReadRepCuentaCorrienteResumen(string dtoKey)
	    {
	        return this.RepCuentaCorrienteResumenService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all repcuentacorrienteresumens count.
	    /// </summary>
	    /// <returns></returns>
	    public int RepCuentaCorrienteResumensCount()
	    {
	        return this.RepCuentaCorrienteResumenService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all repcuentacorrienteresumens count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int RepCuentaCorrienteResumensCountFiltered(string filterExpression)
	    {
	        return this.RepCuentaCorrienteResumenService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new repcuentacorrienteresumen from the given dto object into the database.
	    /// </summary>
	    /// <param name="repcuentacorrienteresumen">The dto object.</param>
	    /// <returns>The dto key of the newly created repcuentacorrienteresumen.</returns>
	    public string CreateRepCuentaCorrienteResumen(RepCuentaCorrienteResumenDto repcuentacorrienteresumen)
	    {
	        string key = this.RepCuentaCorrienteResumenService.Add(repcuentacorrienteresumen);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing repcuentacorrienteresumen in the database from the given dto object.
	    /// </summary>
	    /// <param name="repcuentacorrienteresumen">The dto object.</param>
	    public void UpdateRepCuentaCorrienteResumen(RepCuentaCorrienteResumenDto repcuentacorrienteresumen)
	    {
	        this.RepCuentaCorrienteResumenService.Update(repcuentacorrienteresumen);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update repcuentacorrienteresumens in the database from the given dto object list.
	    /// </summary>
	    /// <param name="repcuentacorrienteresumens">The dto object list.</param>
	    public void UpdateRepCuentaCorrienteResumens(IEnumerable<RepCuentaCorrienteResumenDto> repcuentacorrienteresumens)
	    {
	        if (repcuentacorrienteresumens == null)
	        {
	            return;
	        }
	
	        foreach (RepCuentaCorrienteResumenDto repcuentacorrienteresumen in repcuentacorrienteresumens)
	        {
	            if (repcuentacorrienteresumen == null)
	            {
	                continue;
	            }
	            
	            this.UpdateRepCuentaCorrienteResumen(repcuentacorrienteresumen);
	        }
	    }
	
	    /// <summary>
	    /// Deletes repcuentacorrienteresumen from the database by the given dto object.
	    /// </summary>
	    /// <param name="repcuentacorrienteresumen">The dto object.</param>
	    public void DeleteRepCuentaCorrienteResumen(RepCuentaCorrienteResumenDto repcuentacorrienteresumen)
	    {
	        this.RepCuentaCorrienteResumenService.Delete(repcuentacorrienteresumen);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete repcuentacorrienteresumens from the database by the given dto object list.
	    /// </summary>
	    /// <param name="repcuentacorrienteresumens">The dto object list.</param>
	    public void DeleteRepCuentaCorrienteResumens(IEnumerable<RepCuentaCorrienteResumenDto> repcuentacorrienteresumens)
	    {
	        if (repcuentacorrienteresumens == null)
	        {
	            return;
	        }
	
	        foreach (RepCuentaCorrienteResumenDto repcuentacorrienteresumen in repcuentacorrienteresumens)
	        {
	            if (repcuentacorrienteresumen == null)
	            {
	                continue;
	            }
	            
	            this.DeleteRepCuentaCorrienteResumen(repcuentacorrienteresumen);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against RepEmisionesSaldo entity.
	    /// </summary>
	    private IRepEmisionesSaldoService repemisionessaldoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against RepEmisionesSaldo entity.
	    /// </summary>
	    public virtual IRepEmisionesSaldoService RepEmisionesSaldoService
	    {
	        get
	        {
	            if (this.repemisionessaldoservice == null)
	            {
	                IRepEmisionesSaldoAssembler assembler = new RepEmisionesSaldoAssembler();
	                IRepEmisionesSaldoRepository repository = new RepEmisionesSaldoRepository(this.UnitOfWork);
	
	                this.repemisionessaldoservice = new RepEmisionesSaldoService(assembler, repository);
	            }
	            return this.repemisionessaldoservice;
	        }
	    }
	        
	    #region RepEmisionesSaldos CRUD Operations
	
	    /// <summary>
	    /// Returns all repemisionessaldos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<RepEmisionesSaldoDto> ReadRepEmisionesSaldos()	
	    {
	        return this.RepEmisionesSaldoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of repemisionessaldos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<RepEmisionesSaldoDto> ReadRepEmisionesSaldosPaged(int startIndex, int pageSize)
	    {
	        return this.RepEmisionesSaldoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all repemisionessaldos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RepEmisionesSaldoDto> ReadRepEmisionesSaldosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.RepEmisionesSaldoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of repemisionessaldos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RepEmisionesSaldoDto> ReadRepEmisionesSaldosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.RepEmisionesSaldoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a repemisionessaldo with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public RepEmisionesSaldoDto ReadRepEmisionesSaldo(string dtoKey)
	    {
	        return this.RepEmisionesSaldoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all repemisionessaldos count.
	    /// </summary>
	    /// <returns></returns>
	    public int RepEmisionesSaldosCount()
	    {
	        return this.RepEmisionesSaldoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all repemisionessaldos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int RepEmisionesSaldosCountFiltered(string filterExpression)
	    {
	        return this.RepEmisionesSaldoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new repemisionessaldo from the given dto object into the database.
	    /// </summary>
	    /// <param name="repemisionessaldo">The dto object.</param>
	    /// <returns>The dto key of the newly created repemisionessaldo.</returns>
	    public string CreateRepEmisionesSaldo(RepEmisionesSaldoDto repemisionessaldo)
	    {
	        string key = this.RepEmisionesSaldoService.Add(repemisionessaldo);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing repemisionessaldo in the database from the given dto object.
	    /// </summary>
	    /// <param name="repemisionessaldo">The dto object.</param>
	    public void UpdateRepEmisionesSaldo(RepEmisionesSaldoDto repemisionessaldo)
	    {
	        this.RepEmisionesSaldoService.Update(repemisionessaldo);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update repemisionessaldos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="repemisionessaldos">The dto object list.</param>
	    public void UpdateRepEmisionesSaldos(IEnumerable<RepEmisionesSaldoDto> repemisionessaldos)
	    {
	        if (repemisionessaldos == null)
	        {
	            return;
	        }
	
	        foreach (RepEmisionesSaldoDto repemisionessaldo in repemisionessaldos)
	        {
	            if (repemisionessaldo == null)
	            {
	                continue;
	            }
	            
	            this.UpdateRepEmisionesSaldo(repemisionessaldo);
	        }
	    }
	
	    /// <summary>
	    /// Deletes repemisionessaldo from the database by the given dto object.
	    /// </summary>
	    /// <param name="repemisionessaldo">The dto object.</param>
	    public void DeleteRepEmisionesSaldo(RepEmisionesSaldoDto repemisionessaldo)
	    {
	        this.RepEmisionesSaldoService.Delete(repemisionessaldo);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete repemisionessaldos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="repemisionessaldos">The dto object list.</param>
	    public void DeleteRepEmisionesSaldos(IEnumerable<RepEmisionesSaldoDto> repemisionessaldos)
	    {
	        if (repemisionessaldos == null)
	        {
	            return;
	        }
	
	        foreach (RepEmisionesSaldoDto repemisionessaldo in repemisionessaldos)
	        {
	            if (repemisionessaldo == null)
	            {
	                continue;
	            }
	            
	            this.DeleteRepEmisionesSaldo(repemisionessaldo);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Reporte entity.
	    /// </summary>
	    private IReporteService reporteservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Reporte entity.
	    /// </summary>
	    public virtual IReporteService ReporteService
	    {
	        get
	        {
	            if (this.reporteservice == null)
	            {
	                IReporteAssembler assembler = new ReporteAssembler();
	                IReporteRepository repository = new ReporteRepository(this.UnitOfWork);
	
	                this.reporteservice = new ReporteService(assembler, repository);
	            }
	            return this.reporteservice;
	        }
	    }
	        
	    #region Reportes CRUD Operations
	
	    /// <summary>
	    /// Returns all reportes.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ReporteDto> ReadReportes()	
	    {
	        return this.ReporteService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of reportes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ReporteDto> ReadReportesPaged(int startIndex, int pageSize)
	    {
	        return this.ReporteService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all reportes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ReporteDto> ReadReportesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ReporteService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of reportes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ReporteDto> ReadReportesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ReporteService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a reporte with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ReporteDto ReadReporte(string dtoKey)
	    {
	        return this.ReporteService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all reportes count.
	    /// </summary>
	    /// <returns></returns>
	    public int ReportesCount()
	    {
	        return this.ReporteService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all reportes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ReportesCountFiltered(string filterExpression)
	    {
	        return this.ReporteService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new reporte from the given dto object into the database.
	    /// </summary>
	    /// <param name="reporte">The dto object.</param>
	    /// <returns>The dto key of the newly created reporte.</returns>
	    public string CreateReporte(ReporteDto reporte)
	    {
	        string key = this.ReporteService.Add(reporte);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing reporte in the database from the given dto object.
	    /// </summary>
	    /// <param name="reporte">The dto object.</param>
	    public void UpdateReporte(ReporteDto reporte)
	    {
	        this.ReporteService.Update(reporte);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update reportes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="reportes">The dto object list.</param>
	    public void UpdateReportes(IEnumerable<ReporteDto> reportes)
	    {
	        if (reportes == null)
	        {
	            return;
	        }
	
	        foreach (ReporteDto reporte in reportes)
	        {
	            if (reporte == null)
	            {
	                continue;
	            }
	            
	            this.UpdateReporte(reporte);
	        }
	    }
	
	    /// <summary>
	    /// Deletes reporte from the database by the given dto object.
	    /// </summary>
	    /// <param name="reporte">The dto object.</param>
	    public void DeleteReporte(ReporteDto reporte)
	    {
	        this.ReporteService.Delete(reporte);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete reportes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="reportes">The dto object list.</param>
	    public void DeleteReportes(IEnumerable<ReporteDto> reportes)
	    {
	        if (reportes == null)
	        {
	            return;
	        }
	
	        foreach (ReporteDto reporte in reportes)
	        {
	            if (reporte == null)
	            {
	                continue;
	            }
	            
	            this.DeleteReporte(reporte);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against RepPredio entity.
	    /// </summary>
	    private IRepPredioService reppredioservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against RepPredio entity.
	    /// </summary>
	    public virtual IRepPredioService RepPredioService
	    {
	        get
	        {
	            if (this.reppredioservice == null)
	            {
	                IRepPredioAssembler assembler = new RepPredioAssembler();
	                IRepPredioRepository repository = new RepPredioRepository(this.UnitOfWork);
	
	                this.reppredioservice = new RepPredioService(assembler, repository);
	            }
	            return this.reppredioservice;
	        }
	    }
	        
	    #region RepPredios CRUD Operations
	
	    /// <summary>
	    /// Returns all reppredios.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<RepPredioDto> ReadRepPredios()	
	    {
	        return this.RepPredioService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of reppredios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<RepPredioDto> ReadRepPrediosPaged(int startIndex, int pageSize)
	    {
	        return this.RepPredioService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all reppredios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RepPredioDto> ReadRepPrediosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.RepPredioService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of reppredios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RepPredioDto> ReadRepPrediosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.RepPredioService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a reppredio with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public RepPredioDto ReadRepPredio(string dtoKey)
	    {
	        return this.RepPredioService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all reppredios count.
	    /// </summary>
	    /// <returns></returns>
	    public int RepPrediosCount()
	    {
	        return this.RepPredioService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all reppredios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int RepPrediosCountFiltered(string filterExpression)
	    {
	        return this.RepPredioService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new reppredio from the given dto object into the database.
	    /// </summary>
	    /// <param name="reppredio">The dto object.</param>
	    /// <returns>The dto key of the newly created reppredio.</returns>
	    public string CreateRepPredio(RepPredioDto reppredio)
	    {
	        string key = this.RepPredioService.Add(reppredio);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing reppredio in the database from the given dto object.
	    /// </summary>
	    /// <param name="reppredio">The dto object.</param>
	    public void UpdateRepPredio(RepPredioDto reppredio)
	    {
	        this.RepPredioService.Update(reppredio);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update reppredios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="reppredios">The dto object list.</param>
	    public void UpdateRepPredios(IEnumerable<RepPredioDto> reppredios)
	    {
	        if (reppredios == null)
	        {
	            return;
	        }
	
	        foreach (RepPredioDto reppredio in reppredios)
	        {
	            if (reppredio == null)
	            {
	                continue;
	            }
	            
	            this.UpdateRepPredio(reppredio);
	        }
	    }
	
	    /// <summary>
	    /// Deletes reppredio from the database by the given dto object.
	    /// </summary>
	    /// <param name="reppredio">The dto object.</param>
	    public void DeleteRepPredio(RepPredioDto reppredio)
	    {
	        this.RepPredioService.Delete(reppredio);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete reppredios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="reppredios">The dto object list.</param>
	    public void DeleteRepPredios(IEnumerable<RepPredioDto> reppredios)
	    {
	        if (reppredios == null)
	        {
	            return;
	        }
	
	        foreach (RepPredioDto reppredio in reppredios)
	        {
	            if (reppredio == null)
	            {
	                continue;
	            }
	            
	            this.DeleteRepPredio(reppredio);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against RepRecaudacionesCompDetalle entity.
	    /// </summary>
	    private IRepRecaudacionesCompDetalleService reprecaudacionescompdetalleservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against RepRecaudacionesCompDetalle entity.
	    /// </summary>
	    public virtual IRepRecaudacionesCompDetalleService RepRecaudacionesCompDetalleService
	    {
	        get
	        {
	            if (this.reprecaudacionescompdetalleservice == null)
	            {
	                IRepRecaudacionesCompDetalleAssembler assembler = new RepRecaudacionesCompDetalleAssembler();
	                IRepRecaudacionesCompDetalleRepository repository = new RepRecaudacionesCompDetalleRepository(this.UnitOfWork);
	
	                this.reprecaudacionescompdetalleservice = new RepRecaudacionesCompDetalleService(assembler, repository);
	            }
	            return this.reprecaudacionescompdetalleservice;
	        }
	    }
	        
	    #region RepRecaudacionesCompDetalles CRUD Operations
	
	    /// <summary>
	    /// Returns all reprecaudacionescompdetalles.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<RepRecaudacionesCompDetalleDto> ReadRepRecaudacionesCompDetalles()	
	    {
	        return this.RepRecaudacionesCompDetalleService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of reprecaudacionescompdetalles from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<RepRecaudacionesCompDetalleDto> ReadRepRecaudacionesCompDetallesPaged(int startIndex, int pageSize)
	    {
	        return this.RepRecaudacionesCompDetalleService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all reprecaudacionescompdetalles filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RepRecaudacionesCompDetalleDto> ReadRepRecaudacionesCompDetallesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.RepRecaudacionesCompDetalleService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of reprecaudacionescompdetalles from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RepRecaudacionesCompDetalleDto> ReadRepRecaudacionesCompDetallesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.RepRecaudacionesCompDetalleService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a reprecaudacionescompdetalle with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public RepRecaudacionesCompDetalleDto ReadRepRecaudacionesCompDetalle(string dtoKey)
	    {
	        return this.RepRecaudacionesCompDetalleService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all reprecaudacionescompdetalles count.
	    /// </summary>
	    /// <returns></returns>
	    public int RepRecaudacionesCompDetallesCount()
	    {
	        return this.RepRecaudacionesCompDetalleService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all reprecaudacionescompdetalles count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int RepRecaudacionesCompDetallesCountFiltered(string filterExpression)
	    {
	        return this.RepRecaudacionesCompDetalleService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new reprecaudacionescompdetalle from the given dto object into the database.
	    /// </summary>
	    /// <param name="reprecaudacionescompdetalle">The dto object.</param>
	    /// <returns>The dto key of the newly created reprecaudacionescompdetalle.</returns>
	    public string CreateRepRecaudacionesCompDetalle(RepRecaudacionesCompDetalleDto reprecaudacionescompdetalle)
	    {
	        string key = this.RepRecaudacionesCompDetalleService.Add(reprecaudacionescompdetalle);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing reprecaudacionescompdetalle in the database from the given dto object.
	    /// </summary>
	    /// <param name="reprecaudacionescompdetalle">The dto object.</param>
	    public void UpdateRepRecaudacionesCompDetalle(RepRecaudacionesCompDetalleDto reprecaudacionescompdetalle)
	    {
	        this.RepRecaudacionesCompDetalleService.Update(reprecaudacionescompdetalle);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update reprecaudacionescompdetalles in the database from the given dto object list.
	    /// </summary>
	    /// <param name="reprecaudacionescompdetalles">The dto object list.</param>
	    public void UpdateRepRecaudacionesCompDetalles(IEnumerable<RepRecaudacionesCompDetalleDto> reprecaudacionescompdetalles)
	    {
	        if (reprecaudacionescompdetalles == null)
	        {
	            return;
	        }
	
	        foreach (RepRecaudacionesCompDetalleDto reprecaudacionescompdetalle in reprecaudacionescompdetalles)
	        {
	            if (reprecaudacionescompdetalle == null)
	            {
	                continue;
	            }
	            
	            this.UpdateRepRecaudacionesCompDetalle(reprecaudacionescompdetalle);
	        }
	    }
	
	    /// <summary>
	    /// Deletes reprecaudacionescompdetalle from the database by the given dto object.
	    /// </summary>
	    /// <param name="reprecaudacionescompdetalle">The dto object.</param>
	    public void DeleteRepRecaudacionesCompDetalle(RepRecaudacionesCompDetalleDto reprecaudacionescompdetalle)
	    {
	        this.RepRecaudacionesCompDetalleService.Delete(reprecaudacionescompdetalle);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete reprecaudacionescompdetalles from the database by the given dto object list.
	    /// </summary>
	    /// <param name="reprecaudacionescompdetalles">The dto object list.</param>
	    public void DeleteRepRecaudacionesCompDetalles(IEnumerable<RepRecaudacionesCompDetalleDto> reprecaudacionescompdetalles)
	    {
	        if (reprecaudacionescompdetalles == null)
	        {
	            return;
	        }
	
	        foreach (RepRecaudacionesCompDetalleDto reprecaudacionescompdetalle in reprecaudacionescompdetalles)
	        {
	            if (reprecaudacionescompdetalle == null)
	            {
	                continue;
	            }
	            
	            this.DeleteRepRecaudacionesCompDetalle(reprecaudacionescompdetalle);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against RepRecaudacionesFecha entity.
	    /// </summary>
	    private IRepRecaudacionesFechaService reprecaudacionesfechaservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against RepRecaudacionesFecha entity.
	    /// </summary>
	    public virtual IRepRecaudacionesFechaService RepRecaudacionesFechaService
	    {
	        get
	        {
	            if (this.reprecaudacionesfechaservice == null)
	            {
	                IRepRecaudacionesFechaAssembler assembler = new RepRecaudacionesFechaAssembler();
	                IRepRecaudacionesFechaRepository repository = new RepRecaudacionesFechaRepository(this.UnitOfWork);
	
	                this.reprecaudacionesfechaservice = new RepRecaudacionesFechaService(assembler, repository);
	            }
	            return this.reprecaudacionesfechaservice;
	        }
	    }
	        
	    #region RepRecaudacionesFechas CRUD Operations
	
	    /// <summary>
	    /// Returns all reprecaudacionesfechas.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<RepRecaudacionesFechaDto> ReadRepRecaudacionesFechas()	
	    {
	        return this.RepRecaudacionesFechaService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of reprecaudacionesfechas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<RepRecaudacionesFechaDto> ReadRepRecaudacionesFechasPaged(int startIndex, int pageSize)
	    {
	        return this.RepRecaudacionesFechaService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all reprecaudacionesfechas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RepRecaudacionesFechaDto> ReadRepRecaudacionesFechasFiltered(string sortExpression, string filterExpression)
	    {
	        return this.RepRecaudacionesFechaService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of reprecaudacionesfechas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RepRecaudacionesFechaDto> ReadRepRecaudacionesFechasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.RepRecaudacionesFechaService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a reprecaudacionesfecha with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public RepRecaudacionesFechaDto ReadRepRecaudacionesFecha(string dtoKey)
	    {
	        return this.RepRecaudacionesFechaService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all reprecaudacionesfechas count.
	    /// </summary>
	    /// <returns></returns>
	    public int RepRecaudacionesFechasCount()
	    {
	        return this.RepRecaudacionesFechaService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all reprecaudacionesfechas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int RepRecaudacionesFechasCountFiltered(string filterExpression)
	    {
	        return this.RepRecaudacionesFechaService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new reprecaudacionesfecha from the given dto object into the database.
	    /// </summary>
	    /// <param name="reprecaudacionesfecha">The dto object.</param>
	    /// <returns>The dto key of the newly created reprecaudacionesfecha.</returns>
	    public string CreateRepRecaudacionesFecha(RepRecaudacionesFechaDto reprecaudacionesfecha)
	    {
	        string key = this.RepRecaudacionesFechaService.Add(reprecaudacionesfecha);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing reprecaudacionesfecha in the database from the given dto object.
	    /// </summary>
	    /// <param name="reprecaudacionesfecha">The dto object.</param>
	    public void UpdateRepRecaudacionesFecha(RepRecaudacionesFechaDto reprecaudacionesfecha)
	    {
	        this.RepRecaudacionesFechaService.Update(reprecaudacionesfecha);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update reprecaudacionesfechas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="reprecaudacionesfechas">The dto object list.</param>
	    public void UpdateRepRecaudacionesFechas(IEnumerable<RepRecaudacionesFechaDto> reprecaudacionesfechas)
	    {
	        if (reprecaudacionesfechas == null)
	        {
	            return;
	        }
	
	        foreach (RepRecaudacionesFechaDto reprecaudacionesfecha in reprecaudacionesfechas)
	        {
	            if (reprecaudacionesfecha == null)
	            {
	                continue;
	            }
	            
	            this.UpdateRepRecaudacionesFecha(reprecaudacionesfecha);
	        }
	    }
	
	    /// <summary>
	    /// Deletes reprecaudacionesfecha from the database by the given dto object.
	    /// </summary>
	    /// <param name="reprecaudacionesfecha">The dto object.</param>
	    public void DeleteRepRecaudacionesFecha(RepRecaudacionesFechaDto reprecaudacionesfecha)
	    {
	        this.RepRecaudacionesFechaService.Delete(reprecaudacionesfecha);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete reprecaudacionesfechas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="reprecaudacionesfechas">The dto object list.</param>
	    public void DeleteRepRecaudacionesFechas(IEnumerable<RepRecaudacionesFechaDto> reprecaudacionesfechas)
	    {
	        if (reprecaudacionesfechas == null)
	        {
	            return;
	        }
	
	        foreach (RepRecaudacionesFechaDto reprecaudacionesfecha in reprecaudacionesfechas)
	        {
	            if (reprecaudacionesfecha == null)
	            {
	                continue;
	            }
	            
	            this.DeleteRepRecaudacionesFecha(reprecaudacionesfecha);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against RepReversionesFecha entity.
	    /// </summary>
	    private IRepReversionesFechaService repreversionesfechaservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against RepReversionesFecha entity.
	    /// </summary>
	    public virtual IRepReversionesFechaService RepReversionesFechaService
	    {
	        get
	        {
	            if (this.repreversionesfechaservice == null)
	            {
	                IRepReversionesFechaAssembler assembler = new RepReversionesFechaAssembler();
	                IRepReversionesFechaRepository repository = new RepReversionesFechaRepository(this.UnitOfWork);
	
	                this.repreversionesfechaservice = new RepReversionesFechaService(assembler, repository);
	            }
	            return this.repreversionesfechaservice;
	        }
	    }
	        
	    #region RepReversionesFechas CRUD Operations
	
	    /// <summary>
	    /// Returns all repreversionesfechas.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<RepReversionesFechaDto> ReadRepReversionesFechas()	
	    {
	        return this.RepReversionesFechaService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of repreversionesfechas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<RepReversionesFechaDto> ReadRepReversionesFechasPaged(int startIndex, int pageSize)
	    {
	        return this.RepReversionesFechaService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all repreversionesfechas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RepReversionesFechaDto> ReadRepReversionesFechasFiltered(string sortExpression, string filterExpression)
	    {
	        return this.RepReversionesFechaService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of repreversionesfechas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RepReversionesFechaDto> ReadRepReversionesFechasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.RepReversionesFechaService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a repreversionesfecha with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public RepReversionesFechaDto ReadRepReversionesFecha(string dtoKey)
	    {
	        return this.RepReversionesFechaService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all repreversionesfechas count.
	    /// </summary>
	    /// <returns></returns>
	    public int RepReversionesFechasCount()
	    {
	        return this.RepReversionesFechaService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all repreversionesfechas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int RepReversionesFechasCountFiltered(string filterExpression)
	    {
	        return this.RepReversionesFechaService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new repreversionesfecha from the given dto object into the database.
	    /// </summary>
	    /// <param name="repreversionesfecha">The dto object.</param>
	    /// <returns>The dto key of the newly created repreversionesfecha.</returns>
	    public string CreateRepReversionesFecha(RepReversionesFechaDto repreversionesfecha)
	    {
	        string key = this.RepReversionesFechaService.Add(repreversionesfecha);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing repreversionesfecha in the database from the given dto object.
	    /// </summary>
	    /// <param name="repreversionesfecha">The dto object.</param>
	    public void UpdateRepReversionesFecha(RepReversionesFechaDto repreversionesfecha)
	    {
	        this.RepReversionesFechaService.Update(repreversionesfecha);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update repreversionesfechas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="repreversionesfechas">The dto object list.</param>
	    public void UpdateRepReversionesFechas(IEnumerable<RepReversionesFechaDto> repreversionesfechas)
	    {
	        if (repreversionesfechas == null)
	        {
	            return;
	        }
	
	        foreach (RepReversionesFechaDto repreversionesfecha in repreversionesfechas)
	        {
	            if (repreversionesfecha == null)
	            {
	                continue;
	            }
	            
	            this.UpdateRepReversionesFecha(repreversionesfecha);
	        }
	    }
	
	    /// <summary>
	    /// Deletes repreversionesfecha from the database by the given dto object.
	    /// </summary>
	    /// <param name="repreversionesfecha">The dto object.</param>
	    public void DeleteRepReversionesFecha(RepReversionesFechaDto repreversionesfecha)
	    {
	        this.RepReversionesFechaService.Delete(repreversionesfecha);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete repreversionesfechas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="repreversionesfechas">The dto object list.</param>
	    public void DeleteRepReversionesFechas(IEnumerable<RepReversionesFechaDto> repreversionesfechas)
	    {
	        if (repreversionesfechas == null)
	        {
	            return;
	        }
	
	        foreach (RepReversionesFechaDto repreversionesfecha in repreversionesfechas)
	        {
	            if (repreversionesfecha == null)
	            {
	                continue;
	            }
	            
	            this.DeleteRepReversionesFecha(repreversionesfecha);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Rubro entity.
	    /// </summary>
	    private IRubroService rubroservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Rubro entity.
	    /// </summary>
	    public virtual IRubroService RubroService
	    {
	        get
	        {
	            if (this.rubroservice == null)
	            {
	                IRubroAssembler assembler = new RubroAssembler();
	                IRubroRepository repository = new RubroRepository(this.UnitOfWork);
	
	                this.rubroservice = new RubroService(assembler, repository);
	            }
	            return this.rubroservice;
	        }
	    }
	        
	    #region Rubros CRUD Operations
	
	    /// <summary>
	    /// Returns all rubros.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<RubroDto> ReadRubros()	
	    {
	        return this.RubroService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of rubros from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<RubroDto> ReadRubrosPaged(int startIndex, int pageSize)
	    {
	        return this.RubroService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all rubros filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RubroDto> ReadRubrosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.RubroService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of rubros from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RubroDto> ReadRubrosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.RubroService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a rubro with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public RubroDto ReadRubro(string dtoKey)
	    {
	        return this.RubroService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all rubros count.
	    /// </summary>
	    /// <returns></returns>
	    public int RubrosCount()
	    {
	        return this.RubroService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all rubros count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int RubrosCountFiltered(string filterExpression)
	    {
	        return this.RubroService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new rubro from the given dto object into the database.
	    /// </summary>
	    /// <param name="rubro">The dto object.</param>
	    /// <returns>The dto key of the newly created rubro.</returns>
	    public string CreateRubro(RubroDto rubro)
	    {
	        string key = this.RubroService.Add(rubro);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing rubro in the database from the given dto object.
	    /// </summary>
	    /// <param name="rubro">The dto object.</param>
	    public void UpdateRubro(RubroDto rubro)
	    {
	        this.RubroService.Update(rubro);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update rubros in the database from the given dto object list.
	    /// </summary>
	    /// <param name="rubros">The dto object list.</param>
	    public void UpdateRubros(IEnumerable<RubroDto> rubros)
	    {
	        if (rubros == null)
	        {
	            return;
	        }
	
	        foreach (RubroDto rubro in rubros)
	        {
	            if (rubro == null)
	            {
	                continue;
	            }
	            
	            this.UpdateRubro(rubro);
	        }
	    }
	
	    /// <summary>
	    /// Deletes rubro from the database by the given dto object.
	    /// </summary>
	    /// <param name="rubro">The dto object.</param>
	    public void DeleteRubro(RubroDto rubro)
	    {
	        this.RubroService.Delete(rubro);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete rubros from the database by the given dto object list.
	    /// </summary>
	    /// <param name="rubros">The dto object list.</param>
	    public void DeleteRubros(IEnumerable<RubroDto> rubros)
	    {
	        if (rubros == null)
	        {
	            return;
	        }
	
	        foreach (RubroDto rubro in rubros)
	        {
	            if (rubro == null)
	            {
	                continue;
	            }
	            
	            this.DeleteRubro(rubro);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against RubrosParametro entity.
	    /// </summary>
	    private IRubrosParametroService rubrosparametroservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against RubrosParametro entity.
	    /// </summary>
	    public virtual IRubrosParametroService RubrosParametroService
	    {
	        get
	        {
	            if (this.rubrosparametroservice == null)
	            {
	                IRubrosParametroAssembler assembler = new RubrosParametroAssembler();
	                IRubrosParametroRepository repository = new RubrosParametroRepository(this.UnitOfWork);
	
	                this.rubrosparametroservice = new RubrosParametroService(assembler, repository);
	            }
	            return this.rubrosparametroservice;
	        }
	    }
	        
	    #region RubrosParametros CRUD Operations
	
	    /// <summary>
	    /// Returns all rubrosparametros.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<RubrosParametroDto> ReadRubrosParametros()	
	    {
	        return this.RubrosParametroService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of rubrosparametros from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<RubrosParametroDto> ReadRubrosParametrosPaged(int startIndex, int pageSize)
	    {
	        return this.RubrosParametroService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all rubrosparametros filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RubrosParametroDto> ReadRubrosParametrosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.RubrosParametroService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of rubrosparametros from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<RubrosParametroDto> ReadRubrosParametrosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.RubrosParametroService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a rubrosparametro with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public RubrosParametroDto ReadRubrosParametro(string dtoKey)
	    {
	        return this.RubrosParametroService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all rubrosparametros count.
	    /// </summary>
	    /// <returns></returns>
	    public int RubrosParametrosCount()
	    {
	        return this.RubrosParametroService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all rubrosparametros count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int RubrosParametrosCountFiltered(string filterExpression)
	    {
	        return this.RubrosParametroService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new rubrosparametro from the given dto object into the database.
	    /// </summary>
	    /// <param name="rubrosparametro">The dto object.</param>
	    /// <returns>The dto key of the newly created rubrosparametro.</returns>
	    public string CreateRubrosParametro(RubrosParametroDto rubrosparametro)
	    {
	        string key = this.RubrosParametroService.Add(rubrosparametro);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing rubrosparametro in the database from the given dto object.
	    /// </summary>
	    /// <param name="rubrosparametro">The dto object.</param>
	    public void UpdateRubrosParametro(RubrosParametroDto rubrosparametro)
	    {
	        this.RubrosParametroService.Update(rubrosparametro);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update rubrosparametros in the database from the given dto object list.
	    /// </summary>
	    /// <param name="rubrosparametros">The dto object list.</param>
	    public void UpdateRubrosParametros(IEnumerable<RubrosParametroDto> rubrosparametros)
	    {
	        if (rubrosparametros == null)
	        {
	            return;
	        }
	
	        foreach (RubrosParametroDto rubrosparametro in rubrosparametros)
	        {
	            if (rubrosparametro == null)
	            {
	                continue;
	            }
	            
	            this.UpdateRubrosParametro(rubrosparametro);
	        }
	    }
	
	    /// <summary>
	    /// Deletes rubrosparametro from the database by the given dto object.
	    /// </summary>
	    /// <param name="rubrosparametro">The dto object.</param>
	    public void DeleteRubrosParametro(RubrosParametroDto rubrosparametro)
	    {
	        this.RubrosParametroService.Delete(rubrosparametro);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete rubrosparametros from the database by the given dto object list.
	    /// </summary>
	    /// <param name="rubrosparametros">The dto object list.</param>
	    public void DeleteRubrosParametros(IEnumerable<RubrosParametroDto> rubrosparametros)
	    {
	        if (rubrosparametros == null)
	        {
	            return;
	        }
	
	        foreach (RubrosParametroDto rubrosparametro in rubrosparametros)
	        {
	            if (rubrosparametro == null)
	            {
	                continue;
	            }
	            
	            this.DeleteRubrosParametro(rubrosparametro);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Seguimiento entity.
	    /// </summary>
	    private ISeguimientoService seguimientoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Seguimiento entity.
	    /// </summary>
	    public virtual ISeguimientoService SeguimientoService
	    {
	        get
	        {
	            if (this.seguimientoservice == null)
	            {
	                ISeguimientoAssembler assembler = new SeguimientoAssembler();
	                ISeguimientoRepository repository = new SeguimientoRepository(this.UnitOfWork);
	
	                this.seguimientoservice = new SeguimientoService(assembler, repository);
	            }
	            return this.seguimientoservice;
	        }
	    }
	        
	    #region Seguimientos CRUD Operations
	
	    /// <summary>
	    /// Returns all seguimientos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<SeguimientoDto> ReadSeguimientos()	
	    {
	        return this.SeguimientoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of seguimientos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<SeguimientoDto> ReadSeguimientosPaged(int startIndex, int pageSize)
	    {
	        return this.SeguimientoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all seguimientos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SeguimientoDto> ReadSeguimientosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.SeguimientoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of seguimientos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SeguimientoDto> ReadSeguimientosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.SeguimientoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a seguimiento with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public SeguimientoDto ReadSeguimiento(string dtoKey)
	    {
	        return this.SeguimientoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all seguimientos count.
	    /// </summary>
	    /// <returns></returns>
	    public int SeguimientosCount()
	    {
	        return this.SeguimientoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all seguimientos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int SeguimientosCountFiltered(string filterExpression)
	    {
	        return this.SeguimientoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new seguimiento from the given dto object into the database.
	    /// </summary>
	    /// <param name="seguimiento">The dto object.</param>
	    /// <returns>The dto key of the newly created seguimiento.</returns>
	    public string CreateSeguimiento(SeguimientoDto seguimiento)
	    {
	        string key = this.SeguimientoService.Add(seguimiento);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing seguimiento in the database from the given dto object.
	    /// </summary>
	    /// <param name="seguimiento">The dto object.</param>
	    public void UpdateSeguimiento(SeguimientoDto seguimiento)
	    {
	        this.SeguimientoService.Update(seguimiento);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update seguimientos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="seguimientos">The dto object list.</param>
	    public void UpdateSeguimientos(IEnumerable<SeguimientoDto> seguimientos)
	    {
	        if (seguimientos == null)
	        {
	            return;
	        }
	
	        foreach (SeguimientoDto seguimiento in seguimientos)
	        {
	            if (seguimiento == null)
	            {
	                continue;
	            }
	            
	            this.UpdateSeguimiento(seguimiento);
	        }
	    }
	
	    /// <summary>
	    /// Deletes seguimiento from the database by the given dto object.
	    /// </summary>
	    /// <param name="seguimiento">The dto object.</param>
	    public void DeleteSeguimiento(SeguimientoDto seguimiento)
	    {
	        this.SeguimientoService.Delete(seguimiento);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete seguimientos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="seguimientos">The dto object list.</param>
	    public void DeleteSeguimientos(IEnumerable<SeguimientoDto> seguimientos)
	    {
	        if (seguimientos == null)
	        {
	            return;
	        }
	
	        foreach (SeguimientoDto seguimiento in seguimientos)
	        {
	            if (seguimiento == null)
	            {
	                continue;
	            }
	            
	            this.DeleteSeguimiento(seguimiento);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Servicio entity.
	    /// </summary>
	    private IServicioService servicioservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Servicio entity.
	    /// </summary>
	    public virtual IServicioService ServicioService
	    {
	        get
	        {
	            if (this.servicioservice == null)
	            {
	                IServicioAssembler assembler = new ServicioAssembler();
	                IServicioRepository repository = new ServicioRepository(this.UnitOfWork);
	
	                this.servicioservice = new ServicioService(assembler, repository);
	            }
	            return this.servicioservice;
	        }
	    }
	        
	    #region Servicios CRUD Operations
	
	    /// <summary>
	    /// Returns all servicios.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<ServicioDto> ReadServicios()	
	    {
	        return this.ServicioService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of servicios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<ServicioDto> ReadServiciosPaged(int startIndex, int pageSize)
	    {
	        return this.ServicioService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all servicios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ServicioDto> ReadServiciosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.ServicioService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of servicios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<ServicioDto> ReadServiciosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.ServicioService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a servicio with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public ServicioDto ReadServicio(string dtoKey)
	    {
	        return this.ServicioService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all servicios count.
	    /// </summary>
	    /// <returns></returns>
	    public int ServiciosCount()
	    {
	        return this.ServicioService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all servicios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int ServiciosCountFiltered(string filterExpression)
	    {
	        return this.ServicioService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new servicio from the given dto object into the database.
	    /// </summary>
	    /// <param name="servicio">The dto object.</param>
	    /// <returns>The dto key of the newly created servicio.</returns>
	    public string CreateServicio(ServicioDto servicio)
	    {
	        string key = this.ServicioService.Add(servicio);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing servicio in the database from the given dto object.
	    /// </summary>
	    /// <param name="servicio">The dto object.</param>
	    public void UpdateServicio(ServicioDto servicio)
	    {
	        this.ServicioService.Update(servicio);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update servicios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="servicios">The dto object list.</param>
	    public void UpdateServicios(IEnumerable<ServicioDto> servicios)
	    {
	        if (servicios == null)
	        {
	            return;
	        }
	
	        foreach (ServicioDto servicio in servicios)
	        {
	            if (servicio == null)
	            {
	                continue;
	            }
	            
	            this.UpdateServicio(servicio);
	        }
	    }
	
	    /// <summary>
	    /// Deletes servicio from the database by the given dto object.
	    /// </summary>
	    /// <param name="servicio">The dto object.</param>
	    public void DeleteServicio(ServicioDto servicio)
	    {
	        this.ServicioService.Delete(servicio);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete servicios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="servicios">The dto object list.</param>
	    public void DeleteServicios(IEnumerable<ServicioDto> servicios)
	    {
	        if (servicios == null)
	        {
	            return;
	        }
	
	        foreach (ServicioDto servicio in servicios)
	        {
	            if (servicio == null)
	            {
	                continue;
	            }
	            
	            this.DeleteServicio(servicio);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Soporte entity.
	    /// </summary>
	    private ISoporteService soporteservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Soporte entity.
	    /// </summary>
	    public virtual ISoporteService SoporteService
	    {
	        get
	        {
	            if (this.soporteservice == null)
	            {
	                ISoporteAssembler assembler = new SoporteAssembler();
	                ISoporteRepository repository = new SoporteRepository(this.UnitOfWork);
	
	                this.soporteservice = new SoporteService(assembler, repository);
	            }
	            return this.soporteservice;
	        }
	    }
	        
	    #region Soportes CRUD Operations
	
	    /// <summary>
	    /// Returns all soportes.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<SoporteDto> ReadSoportes()	
	    {
	        return this.SoporteService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of soportes from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<SoporteDto> ReadSoportesPaged(int startIndex, int pageSize)
	    {
	        return this.SoporteService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all soportes filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SoporteDto> ReadSoportesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.SoporteService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of soportes from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SoporteDto> ReadSoportesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.SoporteService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a soporte with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public SoporteDto ReadSoporte(string dtoKey)
	    {
	        return this.SoporteService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all soportes count.
	    /// </summary>
	    /// <returns></returns>
	    public int SoportesCount()
	    {
	        return this.SoporteService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all soportes count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int SoportesCountFiltered(string filterExpression)
	    {
	        return this.SoporteService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new soporte from the given dto object into the database.
	    /// </summary>
	    /// <param name="soporte">The dto object.</param>
	    /// <returns>The dto key of the newly created soporte.</returns>
	    public string CreateSoporte(SoporteDto soporte)
	    {
	        string key = this.SoporteService.Add(soporte);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing soporte in the database from the given dto object.
	    /// </summary>
	    /// <param name="soporte">The dto object.</param>
	    public void UpdateSoporte(SoporteDto soporte)
	    {
	        this.SoporteService.Update(soporte);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update soportes in the database from the given dto object list.
	    /// </summary>
	    /// <param name="soportes">The dto object list.</param>
	    public void UpdateSoportes(IEnumerable<SoporteDto> soportes)
	    {
	        if (soportes == null)
	        {
	            return;
	        }
	
	        foreach (SoporteDto soporte in soportes)
	        {
	            if (soporte == null)
	            {
	                continue;
	            }
	            
	            this.UpdateSoporte(soporte);
	        }
	    }
	
	    /// <summary>
	    /// Deletes soporte from the database by the given dto object.
	    /// </summary>
	    /// <param name="soporte">The dto object.</param>
	    public void DeleteSoporte(SoporteDto soporte)
	    {
	        this.SoporteService.Delete(soporte);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete soportes from the database by the given dto object list.
	    /// </summary>
	    /// <param name="soportes">The dto object list.</param>
	    public void DeleteSoportes(IEnumerable<SoporteDto> soportes)
	    {
	        if (soportes == null)
	        {
	            return;
	        }
	
	        foreach (SoporteDto soporte in soportes)
	        {
	            if (soporte == null)
	            {
	                continue;
	            }
	            
	            this.DeleteSoporte(soporte);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against SoporteMovimiento entity.
	    /// </summary>
	    private ISoporteMovimientoService soportemovimientoservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against SoporteMovimiento entity.
	    /// </summary>
	    public virtual ISoporteMovimientoService SoporteMovimientoService
	    {
	        get
	        {
	            if (this.soportemovimientoservice == null)
	            {
	                ISoporteMovimientoAssembler assembler = new SoporteMovimientoAssembler();
	                ISoporteMovimientoRepository repository = new SoporteMovimientoRepository(this.UnitOfWork);
	
	                this.soportemovimientoservice = new SoporteMovimientoService(assembler, repository);
	            }
	            return this.soportemovimientoservice;
	        }
	    }
	        
	    #region SoporteMovimientos CRUD Operations
	
	    /// <summary>
	    /// Returns all soportemovimientos.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<SoporteMovimientoDto> ReadSoporteMovimientos()	
	    {
	        return this.SoporteMovimientoService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of soportemovimientos from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<SoporteMovimientoDto> ReadSoporteMovimientosPaged(int startIndex, int pageSize)
	    {
	        return this.SoporteMovimientoService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all soportemovimientos filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SoporteMovimientoDto> ReadSoporteMovimientosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.SoporteMovimientoService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of soportemovimientos from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SoporteMovimientoDto> ReadSoporteMovimientosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.SoporteMovimientoService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a soportemovimiento with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public SoporteMovimientoDto ReadSoporteMovimiento(string dtoKey)
	    {
	        return this.SoporteMovimientoService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all soportemovimientos count.
	    /// </summary>
	    /// <returns></returns>
	    public int SoporteMovimientosCount()
	    {
	        return this.SoporteMovimientoService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all soportemovimientos count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int SoporteMovimientosCountFiltered(string filterExpression)
	    {
	        return this.SoporteMovimientoService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new soportemovimiento from the given dto object into the database.
	    /// </summary>
	    /// <param name="soportemovimiento">The dto object.</param>
	    /// <returns>The dto key of the newly created soportemovimiento.</returns>
	    public string CreateSoporteMovimiento(SoporteMovimientoDto soportemovimiento)
	    {
	        string key = this.SoporteMovimientoService.Add(soportemovimiento);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing soportemovimiento in the database from the given dto object.
	    /// </summary>
	    /// <param name="soportemovimiento">The dto object.</param>
	    public void UpdateSoporteMovimiento(SoporteMovimientoDto soportemovimiento)
	    {
	        this.SoporteMovimientoService.Update(soportemovimiento);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update soportemovimientos in the database from the given dto object list.
	    /// </summary>
	    /// <param name="soportemovimientos">The dto object list.</param>
	    public void UpdateSoporteMovimientos(IEnumerable<SoporteMovimientoDto> soportemovimientos)
	    {
	        if (soportemovimientos == null)
	        {
	            return;
	        }
	
	        foreach (SoporteMovimientoDto soportemovimiento in soportemovimientos)
	        {
	            if (soportemovimiento == null)
	            {
	                continue;
	            }
	            
	            this.UpdateSoporteMovimiento(soportemovimiento);
	        }
	    }
	
	    /// <summary>
	    /// Deletes soportemovimiento from the database by the given dto object.
	    /// </summary>
	    /// <param name="soportemovimiento">The dto object.</param>
	    public void DeleteSoporteMovimiento(SoporteMovimientoDto soportemovimiento)
	    {
	        this.SoporteMovimientoService.Delete(soportemovimiento);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete soportemovimientos from the database by the given dto object list.
	    /// </summary>
	    /// <param name="soportemovimientos">The dto object list.</param>
	    public void DeleteSoporteMovimientos(IEnumerable<SoporteMovimientoDto> soportemovimientos)
	    {
	        if (soportemovimientos == null)
	        {
	            return;
	        }
	
	        foreach (SoporteMovimientoDto soportemovimiento in soportemovimientos)
	        {
	            if (soportemovimiento == null)
	            {
	                continue;
	            }
	            
	            this.DeleteSoporteMovimiento(soportemovimiento);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Supervision entity.
	    /// </summary>
	    private ISupervisionService supervisionservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Supervision entity.
	    /// </summary>
	    public virtual ISupervisionService SupervisionService
	    {
	        get
	        {
	            if (this.supervisionservice == null)
	            {
	                ISupervisionAssembler assembler = new SupervisionAssembler();
	                ISupervisionRepository repository = new SupervisionRepository(this.UnitOfWork);
	
	                this.supervisionservice = new SupervisionService(assembler, repository);
	            }
	            return this.supervisionservice;
	        }
	    }
	        
	    #region Supervisions CRUD Operations
	
	    /// <summary>
	    /// Returns all supervisions.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<SupervisionDto> ReadSupervisions()	
	    {
	        return this.SupervisionService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of supervisions from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<SupervisionDto> ReadSupervisionsPaged(int startIndex, int pageSize)
	    {
	        return this.SupervisionService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all supervisions filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SupervisionDto> ReadSupervisionsFiltered(string sortExpression, string filterExpression)
	    {
	        return this.SupervisionService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of supervisions from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<SupervisionDto> ReadSupervisionsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.SupervisionService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a supervision with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public SupervisionDto ReadSupervision(string dtoKey)
	    {
	        return this.SupervisionService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all supervisions count.
	    /// </summary>
	    /// <returns></returns>
	    public int SupervisionsCount()
	    {
	        return this.SupervisionService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all supervisions count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int SupervisionsCountFiltered(string filterExpression)
	    {
	        return this.SupervisionService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new supervision from the given dto object into the database.
	    /// </summary>
	    /// <param name="supervision">The dto object.</param>
	    /// <returns>The dto key of the newly created supervision.</returns>
	    public string CreateSupervision(SupervisionDto supervision)
	    {
	        string key = this.SupervisionService.Add(supervision);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing supervision in the database from the given dto object.
	    /// </summary>
	    /// <param name="supervision">The dto object.</param>
	    public void UpdateSupervision(SupervisionDto supervision)
	    {
	        this.SupervisionService.Update(supervision);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update supervisions in the database from the given dto object list.
	    /// </summary>
	    /// <param name="supervisions">The dto object list.</param>
	    public void UpdateSupervisions(IEnumerable<SupervisionDto> supervisions)
	    {
	        if (supervisions == null)
	        {
	            return;
	        }
	
	        foreach (SupervisionDto supervision in supervisions)
	        {
	            if (supervision == null)
	            {
	                continue;
	            }
	            
	            this.UpdateSupervision(supervision);
	        }
	    }
	
	    /// <summary>
	    /// Deletes supervision from the database by the given dto object.
	    /// </summary>
	    /// <param name="supervision">The dto object.</param>
	    public void DeleteSupervision(SupervisionDto supervision)
	    {
	        this.SupervisionService.Delete(supervision);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete supervisions from the database by the given dto object list.
	    /// </summary>
	    /// <param name="supervisions">The dto object list.</param>
	    public void DeleteSupervisions(IEnumerable<SupervisionDto> supervisions)
	    {
	        if (supervisions == null)
	        {
	            return;
	        }
	
	        foreach (SupervisionDto supervision in supervisions)
	        {
	            if (supervision == null)
	            {
	                continue;
	            }
	            
	            this.DeleteSupervision(supervision);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Tabla entity.
	    /// </summary>
	    private ITablaService tablaservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Tabla entity.
	    /// </summary>
	    public virtual ITablaService TablaService
	    {
	        get
	        {
	            if (this.tablaservice == null)
	            {
	                ITablaAssembler assembler = new TablaAssembler();
	                ITablaRepository repository = new TablaRepository(this.UnitOfWork);
	
	                this.tablaservice = new TablaService(assembler, repository);
	            }
	            return this.tablaservice;
	        }
	    }
	        
	    #region Tablas CRUD Operations
	
	    /// <summary>
	    /// Returns all tablas.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<TablaDto> ReadTablas()	
	    {
	        return this.TablaService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of tablas from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<TablaDto> ReadTablasPaged(int startIndex, int pageSize)
	    {
	        return this.TablaService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all tablas filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<TablaDto> ReadTablasFiltered(string sortExpression, string filterExpression)
	    {
	        return this.TablaService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of tablas from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<TablaDto> ReadTablasPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.TablaService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a tabla with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public TablaDto ReadTabla(string dtoKey)
	    {
	        return this.TablaService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all tablas count.
	    /// </summary>
	    /// <returns></returns>
	    public int TablasCount()
	    {
	        return this.TablaService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all tablas count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int TablasCountFiltered(string filterExpression)
	    {
	        return this.TablaService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new tabla from the given dto object into the database.
	    /// </summary>
	    /// <param name="tabla">The dto object.</param>
	    /// <returns>The dto key of the newly created tabla.</returns>
	    public string CreateTabla(TablaDto tabla)
	    {
	        string key = this.TablaService.Add(tabla);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing tabla in the database from the given dto object.
	    /// </summary>
	    /// <param name="tabla">The dto object.</param>
	    public void UpdateTabla(TablaDto tabla)
	    {
	        this.TablaService.Update(tabla);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update tablas in the database from the given dto object list.
	    /// </summary>
	    /// <param name="tablas">The dto object list.</param>
	    public void UpdateTablas(IEnumerable<TablaDto> tablas)
	    {
	        if (tablas == null)
	        {
	            return;
	        }
	
	        foreach (TablaDto tabla in tablas)
	        {
	            if (tabla == null)
	            {
	                continue;
	            }
	            
	            this.UpdateTabla(tabla);
	        }
	    }
	
	    /// <summary>
	    /// Deletes tabla from the database by the given dto object.
	    /// </summary>
	    /// <param name="tabla">The dto object.</param>
	    public void DeleteTabla(TablaDto tabla)
	    {
	        this.TablaService.Delete(tabla);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete tablas from the database by the given dto object list.
	    /// </summary>
	    /// <param name="tablas">The dto object list.</param>
	    public void DeleteTablas(IEnumerable<TablaDto> tablas)
	    {
	        if (tablas == null)
	        {
	            return;
	        }
	
	        foreach (TablaDto tabla in tablas)
	        {
	            if (tabla == null)
	            {
	                continue;
	            }
	            
	            this.DeleteTabla(tabla);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against TablaClave entity.
	    /// </summary>
	    private ITablaClaveService tablaclaveservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against TablaClave entity.
	    /// </summary>
	    public virtual ITablaClaveService TablaClaveService
	    {
	        get
	        {
	            if (this.tablaclaveservice == null)
	            {
	                ITablaClaveAssembler assembler = new TablaClaveAssembler();
	                ITablaClaveRepository repository = new TablaClaveRepository(this.UnitOfWork);
	
	                this.tablaclaveservice = new TablaClaveService(assembler, repository);
	            }
	            return this.tablaclaveservice;
	        }
	    }
	        
	    #region TablaClaves CRUD Operations
	
	    /// <summary>
	    /// Returns all tablaclaves.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<TablaClaveDto> ReadTablaClaves()	
	    {
	        return this.TablaClaveService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of tablaclaves from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<TablaClaveDto> ReadTablaClavesPaged(int startIndex, int pageSize)
	    {
	        return this.TablaClaveService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all tablaclaves filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<TablaClaveDto> ReadTablaClavesFiltered(string sortExpression, string filterExpression)
	    {
	        return this.TablaClaveService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of tablaclaves from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<TablaClaveDto> ReadTablaClavesPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.TablaClaveService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a tablaclave with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public TablaClaveDto ReadTablaClave(string dtoKey)
	    {
	        return this.TablaClaveService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all tablaclaves count.
	    /// </summary>
	    /// <returns></returns>
	    public int TablaClavesCount()
	    {
	        return this.TablaClaveService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all tablaclaves count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int TablaClavesCountFiltered(string filterExpression)
	    {
	        return this.TablaClaveService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new tablaclave from the given dto object into the database.
	    /// </summary>
	    /// <param name="tablaclave">The dto object.</param>
	    /// <returns>The dto key of the newly created tablaclave.</returns>
	    public string CreateTablaClave(TablaClaveDto tablaclave)
	    {
	        string key = this.TablaClaveService.Add(tablaclave);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing tablaclave in the database from the given dto object.
	    /// </summary>
	    /// <param name="tablaclave">The dto object.</param>
	    public void UpdateTablaClave(TablaClaveDto tablaclave)
	    {
	        this.TablaClaveService.Update(tablaclave);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update tablaclaves in the database from the given dto object list.
	    /// </summary>
	    /// <param name="tablaclaves">The dto object list.</param>
	    public void UpdateTablaClaves(IEnumerable<TablaClaveDto> tablaclaves)
	    {
	        if (tablaclaves == null)
	        {
	            return;
	        }
	
	        foreach (TablaClaveDto tablaclave in tablaclaves)
	        {
	            if (tablaclave == null)
	            {
	                continue;
	            }
	            
	            this.UpdateTablaClave(tablaclave);
	        }
	    }
	
	    /// <summary>
	    /// Deletes tablaclave from the database by the given dto object.
	    /// </summary>
	    /// <param name="tablaclave">The dto object.</param>
	    public void DeleteTablaClave(TablaClaveDto tablaclave)
	    {
	        this.TablaClaveService.Delete(tablaclave);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete tablaclaves from the database by the given dto object list.
	    /// </summary>
	    /// <param name="tablaclaves">The dto object list.</param>
	    public void DeleteTablaClaves(IEnumerable<TablaClaveDto> tablaclaves)
	    {
	        if (tablaclaves == null)
	        {
	            return;
	        }
	
	        foreach (TablaClaveDto tablaclave in tablaclaves)
	        {
	            if (tablaclave == null)
	            {
	                continue;
	            }
	            
	            this.DeleteTablaClave(tablaclave);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// A general purpose generated service used for all CRUD operations against Usuario entity.
	    /// </summary>
	    private IUsuarioService usuarioservice;
	    
	    /// <summary>
	    /// Gets or sets the general purpose generated service used for all CRUD operations against Usuario entity.
	    /// </summary>
	    public virtual IUsuarioService UsuarioService
	    {
	        get
	        {
	            if (this.usuarioservice == null)
	            {
	                IUsuarioAssembler assembler = new UsuarioAssembler();
	                IUsuarioRepository repository = new UsuarioRepository(this.UnitOfWork);
	
	                this.usuarioservice = new UsuarioService(assembler, repository);
	            }
	            return this.usuarioservice;
	        }
	    }
	        
	    #region Usuarios CRUD Operations
	
	    /// <summary>
	    /// Returns all usuarios.
	    /// </summary>
	    /// <returns></returns>
	    public IEnumerable<UsuarioDto> ReadUsuarios()	
	    {
	        return this.UsuarioService.GetAll();
	    }
	
	    /// <summary>
	    /// Returns a specified amount of usuarios from the given start index.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <returns></returns>
	    public IEnumerable<UsuarioDto> ReadUsuariosPaged(int startIndex, int pageSize)
	    {
	        return this.UsuarioService.Find(startIndex, pageSize);
	    }
	
	    /// <summary>
	    /// Returns all usuarios filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<UsuarioDto> ReadUsuariosFiltered(string sortExpression, string filterExpression)
	    {
	        return this.UsuarioService.Find(sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a specified amount of usuarios from the given start index filtered by the specified filter expression and sorted by the specified sort expression.
	    /// </summary>
	    /// <param name="startIndex">The start index.</param>
	    /// <param name="pageSize">The returned entities count.</param>
	    /// <param name="sortExpression">The sort expression.</param>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public IEnumerable<UsuarioDto> ReadUsuariosPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
	    {
	        return this.UsuarioService.Find(startIndex, pageSize, sortExpression, filterExpression);
	    }
	
	    /// <summary>
	    /// Returns a usuario with the specified dto key.
	    /// </summary>
	    /// <param name="dtoKey">The specified dto key value.</param>
	    /// <returns></returns>
	    public UsuarioDto ReadUsuario(string dtoKey)
	    {
	        return this.UsuarioService.GetByKey(dtoKey);
	    }
	    
	    /// <summary>
	    /// Returns all usuarios count.
	    /// </summary>
	    /// <returns></returns>
	    public int UsuariosCount()
	    {
	        return this.UsuarioService.Count();
	    }
	    
	    /// <summary>
	    /// Returns all usuarios count filtered by the specified filter expression.
	    /// </summary>
	    /// <param name="filterExpression">The filter expression.</param>
	    /// <returns></returns>
	    public int UsuariosCountFiltered(string filterExpression)
	    {
	        return this.UsuarioService.Count(filterExpression);
	    }
	
	    /// <summary>
	    /// Adds a new usuario from the given dto object into the database.
	    /// </summary>
	    /// <param name="usuario">The dto object.</param>
	    /// <returns>The dto key of the newly created usuario.</returns>
	    public string CreateUsuario(UsuarioDto usuario)
	    {
	        string key = this.UsuarioService.Add(usuario);
	        this.UnitOfWork.SaveChanges();
	        return key;
	    }
	
	    /// <summary>
	    /// Updates an existing usuario in the database from the given dto object.
	    /// </summary>
	    /// <param name="usuario">The dto object.</param>
	    public void UpdateUsuario(UsuarioDto usuario)
	    {
	        this.UsuarioService.Update(usuario);
	        this.UnitOfWork.SaveChanges();
	    }
	
	    /// <summary>
	    /// Update usuarios in the database from the given dto object list.
	    /// </summary>
	    /// <param name="usuarios">The dto object list.</param>
	    public void UpdateUsuarios(IEnumerable<UsuarioDto> usuarios)
	    {
	        if (usuarios == null)
	        {
	            return;
	        }
	
	        foreach (UsuarioDto usuario in usuarios)
	        {
	            if (usuario == null)
	            {
	                continue;
	            }
	            
	            this.UpdateUsuario(usuario);
	        }
	    }
	
	    /// <summary>
	    /// Deletes usuario from the database by the given dto object.
	    /// </summary>
	    /// <param name="usuario">The dto object.</param>
	    public void DeleteUsuario(UsuarioDto usuario)
	    {
	        this.UsuarioService.Delete(usuario);
	        this.UnitOfWork.SaveChanges();		
	    }
	
	    /// <summary>
	    /// Delete usuarios from the database by the given dto object list.
	    /// </summary>
	    /// <param name="usuarios">The dto object list.</param>
	    public void DeleteUsuarios(IEnumerable<UsuarioDto> usuarios)
	    {
	        if (usuarios == null)
	        {
	            return;
	        }
	
	        foreach (UsuarioDto usuario in usuarios)
	        {
	            if (usuario == null)
	            {
	                continue;
	            }
	            
	            this.DeleteUsuario(usuario);
	        }
	    }
	    
	    #endregion
	    
	    /// <summary>
	    /// Entidades finalizer.
	    /// </summary>
	    ~Entidades()
	    {
	        IDisposable context = this.unitOfWork as IDisposable;
	        if(context != null)
	        {
	            context.Dispose();
	        }
	    }
	}
}
#pragma warning restore 1591
